[
    {
        "name":"Abs",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Abs.html#l-onnx-doc-abs",
        "details":{
            "Summary":"Absolute takes one input data (Tensor\n) and produces one output data\n(Tensor\n) where absolute value, y = abs(x), is applied to\nthe tensor elementwise.",
            "Inputs":"X\n(heterogeneous) -\nT\n:\nInput tensor",
            "Outputs":"Y\n(heterogeneous) -\nT\n:\nOutput tensor",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain input and output types to all numeric tensors.\nAbs - 6 vs 13"
        }
    },
    {
        "name":"Acos",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Acos.html#l-onnx-doc-acos",
        "details":{
            "Summary":"Calculates the arccosine (inverse of cosine) of the given input tensor, element-wise.",
            "Inputs":"input\n(heterogeneous) -\nT\n:\nInput tensor",
            "Outputs":"output\n(heterogeneous) -\nT\n:\nThe arccosine of the input tensor computed element-wise",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n):\nConstrain input and output types to float tensors.\nAcos - 7 vs 22"
        }
    },
    {
        "name":"Acosh",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Acosh.html#l-onnx-doc-acosh",
        "details":{
            "Summary":"Calculates the hyperbolic arccosine of the given input tensor element-wise.",
            "Inputs":"input\n(heterogeneous) -\nT\n:\nInput tensor",
            "Outputs":"output\n(heterogeneous) -\nT\n:\nThe hyperbolic arccosine values of the input tensor computed element-wise",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n):\nConstrain input and output types to float tensors.\nAcosh - 9 vs 22"
        }
    },
    {
        "name":"Add",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Add.html#l-onnx-doc-add",
        "details":{
            "Summary":"Performs element-wise binary addition (with Numpy-style broadcasting support).\nThis operator supports\nmultidirectional (i.e., Numpy-style) broadcasting\n; for more details please check\nBroadcasting in ONNX\n.\n(Opset 14 change): Extend supported types to include uint8, int8, uint16, and int16.",
            "Inputs":"A\n(heterogeneous) -\nT\n:\nFirst operand.\nB\n(heterogeneous) -\nT\n:\nSecond operand.",
            "Outputs":"C\n(heterogeneous) -\nT\n:\nResult, has same element type as two inputs",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain input and output types to all numeric tensors.\nAdd - 13 vs 14"
        }
    },
    {
        "name":"AffineGrid",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__AffineGrid.html#l-onnx-doc-affinegrid",
        "details":{
            "Summary":"Generates a 2D or 3D flow field (sampling grid), given a batch of affine matrices theta\n(\nhttps:\/\/pytorch.org\/docs\/stable\/generated\/torch.nn.functional.affine_grid.html\n).\nAn affine matrix\ntheta\nis applied to a position tensor represented in its homogeneous expression. Here is an example in 3D:\n[\nr00\n,\nr01\n,\nr02\n,\nt0\n]\n[\nx\n]\n[\nx\n']\n[\nr10\n,\nr11\n,\nr12\n,\nt1\n]\n*\n[\ny\n]\n=\n[\ny\n']\n[\nr20\n,\nr21\n,\nr22\n,\nt2\n]\n[\nz\n]\n[\nz\n']\n[\n0\n,\n0\n,\n0\n,\n1\n]\n[\n1\n]\n[\n1\n]\nwhere\n(x,\ny,\nz)\nis the position in the original space,\n(x',\ny',\nz')\nis the position in the output space.\nThe last row is always\n[0,\n0,\n0,\n1]\nand is not stored in the affine matrix. Therefore we have\ntheta\nof shape\n(N,\n2,\n3)\nfor 2D or\n(N,\n3,\n4)\nfor 3D.\nInput\nsize\nis used to define grid of positions evenly spaced in the original 2D or 3D space, with dimensions ranging from\n-1\nto\n1\n.\nThe output\ngrid\ncontains positions in the output space.\nWhen\nalign_corners=1\n, consider\n-1\nand\n1\nto refer to the centers of the corner pixels (mark\nv\nin illustration).\nv\nv\nv\nv\n|-------------------|------------------|\n-\n1\n0\n1\nWhen\nalign_corners=0\n, consider\n-1\nand\n1\nto refer to the outer edge of the corner pixels.\nv\nv\nv\nv\n|------------------|-------------------|\n-\n1\n0\n1\nFunction Body\nÂ¶\nThe function definition for this operator.\n<\ndomain\n:\n\"\"\n,\nopset_import\n:\n[\n\"\"\n:\n20\n]\n>\nAffineGrid\n<\nalign_corners\n>\n(\ntheta\n,\nsize\n)\n=>\n(\ngrid\n)\n{\none\n=\nConstant\n<\nvalue_int\n:\nint\n=\n1\n>\n()\ntwo\n=\nConstant\n<\nvalue_int\n:\nint\n=\n2\n>\n()\nzero\n=\nConstant\n<\nvalue_int\n:\nint\n=\n0\n>\n()\nfour\n=\nConstant\n<\nvalue_int\n:\nint\n=\n4\n>\n()\none_1d\n=\nConstant\n<\nvalue_ints\n:\nints\n=\n[\n1\n]\n>\n()\nzero_1d\n=\nConstant\n<\nvalue_ints\n:\nints\n=\n[\n0\n]\n>\n()\nminus_one\n=\nConstant\n<\nvalue_int\n:\nint\n=\n-\n1\n>\n()\nminus_one_f\n=\nCastLike\n(\nminus_one\n,\ntheta\n)\nzero_f\n=\nCastLike\n(\nzero\n,\ntheta\n)\none_f\n=\nCastLike\n(\none\n,\ntheta\n)\ntwo_f\n=\nCastLike\n(\ntwo\n,\ntheta\n)\nconstant_align_corners\n=\nConstant\n<\nvalue_int\n:\nint\n=\n@align_corners\n>\n()\nconstant_align_corners_equal_zero\n=\nEqual\n(\nconstant_align_corners\n,\nzero\n)\nsize_ndim\n=\nSize\n(\nsize\n)\ncondition_is_2d\n=\nEqual\n(\nsize_ndim\n,\nfour\n)\nN\n,\nC\n,\nD\n,\nH\n,\nW\n=\nIf\n(\ncondition_is_2d\n)\n<\nthen_branch\n:\ngraph\n=\ng1\n()\n=>\n(\nN_then\n,\nC_then\n,\nD_then\n,\nH_then\n,\nW_then\n)\n{\nN_then\n,\nC_then\n,\nH_then\n,\nW_then\n=\nSplit\n<\nnum_outputs\n:\nint\n=\n4\n>\n(\nsize\n)\nD_then\n=\nIdentity\n(\none_1d\n)\n},\nelse_branch\n:\ngraph\n=\ng2\n()\n=>\n(\nN_else\n,\nC_else\n,\nD_else\n,\nH_else\n,\nW_else\n)\n{\nN_else\n,\nC_else\n,\nD_else\n,\nH_else\n,\nW_else\n=\nSplit\n<\nnum_outputs\n:\nint\n=\n5\n>\n(\nsize\n)\n}\n>\nsize_NCDHW\n=\nConcat\n<\naxis\n:\nint\n=\n0\n>\n(\nN\n,\nC\n,\nD\n,\nH\n,\nW\n)\ntheta_3d\n=\nIf\n(\ncondition_is_2d\n)\n<\nthen_branch\n:\ngraph\n=\ng3\n()\n=>\n(\ntheta_then\n)\n{\ngather_idx_6\n=\nConstant\n<\nvalue_ints\n:\nints\n=\n[\n0\n,\n1\n,\n2\n,\n0\n,\n1\n,\n2\n]\n>\n()\nshape_23\n=\nConstant\n<\nvalue_ints\n:\nints\n=\n[\n2\n,\n3\n]\n>\n()\ngather_idx_23\n=\nReshape\n(\ngather_idx_6\n,\nshape_23\n)\nshape_N23\n=\nConcat\n<\naxis\n:\nint\n=\n0\n>\n(\nN\n,\nshape_23\n)\ngather_idx_N23\n=\nExpand\n(\ngather_idx_23\n,\nshape_N23\n)\nthetaN23\n=\nGatherElements\n<\naxis\n:\nint\n=\n2\n>\n(\ntheta\n,\ngather_idx_N23\n)\nr1\n,\nr2\n=\nSplit\n<\naxis\n:\nint\n=\n1\n,\nnum_outputs\n:\nint\n=\n2\n>\n(\nthetaN23\n)\nr1_\n=\nSqueeze\n(\nr1\n)\nr2_\n=\nSqueeze\n(\nr2\n)\nr11\n,\nr12\n,\nt1\n=\nSplit\n<\naxis\n:\nint\n=\n1\n,\nnum_outputs\n:\nint\n=\n3\n>\n(\nr1_\n)\nr21\n,\nr22\n,\nt2\n=\nSplit\n<\naxis\n:\nint\n=\n1\n,\nnum_outputs\n:\nint\n=\n3\n>\n(\nr2_\n)\nr11_shape\n=\nShape\n(\nr21\n)\nfloat_zero_1d_\n=\nConstantOfShape\n(\nr11_shape\n)\nfloat_zero_1d\n=\nCastLike\n(\nfloat_zero_1d_\n,\ntheta\n)\nfloat_one_1d\n=\nAdd\n(\nfloat_zero_1d\n,\none_f\n)\nR1\n=\nConcat\n<\naxis\n:\nint\n=\n1\n>\n(\nr11\n,\nr12\n,\nfloat_zero_1d\n,\nt1\n)\nR2\n=\nConcat\n<\naxis\n:\nint\n=\n1\n>\n(\nr21\n,\nr22\n,\nfloat_zero_1d\n,\nt2\n)\nR3\n=\nConcat\n<\naxis\n:\nint\n=\n1\n>\n(\nfloat_zero_1d\n,\nfloat_zero_1d\n,\nfloat_one_1d\n,\nfloat_zero_1d\n)\nR1_\n=\nUnsqueeze\n(\nR1\n,\none_1d\n)\nR2_\n=\nUnsqueeze\n(\nR2\n,\none_1d\n)\nR3_\n=\nUnsqueeze\n(\nR3\n,\none_1d\n)\ntheta_then\n=\nConcat\n<\naxis\n:\nint\n=\n1\n>\n(\nR1_\n,\nR2_\n,\nR3_\n)\n},\nelse_branch\n:\ngraph\n=\ng4\n()\n=>\n(\ntheta_else\n)\n{\ntheta_else\n=\nIdentity\n(\ntheta\n)\n}\n>\ntwo_1d\n=\nConstant\n<\nvalue_ints\n:\nints\n=\n[\n2\n]\n>\n()\nthree_1d\n=\nConstant\n<\nvalue_ints\n:\nints\n=\n[\n3\n]\n>\n()\nfive_1d\n=\nConstant\n<\nvalue_ints\n:\nints\n=\n[\n5\n]\n>\n()\nconstant_D_H_W_shape\n=\nSlice\n(\nsize_NCDHW\n,\ntwo_1d\n,\nfive_1d\n)\nzeros_D_H_W_\n=\nConstantOfShape\n(\nconstant_D_H_W_shape\n)\nzeros_D_H_W\n=\nCastLike\n(\nzeros_D_H_W_\n,\ntheta\n)\nones_D_H_W\n=\nAdd\n(\nzeros_D_H_W\n,\none_f\n)\nD_float\n=\nCastLike\n(\nD\n,\nzero_f\n)\nH_float\n=\nCastLike\n(\nH\n,\nzero_f\n)\nW_float\n=\nCastLike\n(\nW\n,\nzero_f\n)\nstart_d\n,\nstep_d\n,\nstart_h\n,\nstep_h\n,\nstart_w\n,\nstep_w\n=\nIf\n(\nconstant_align_corners_equal_zero\n)\n<\nthen_branch\n:\ngraph\n=\nh1\n()\n=>\n(\nstart_d_then\n,\nstep_d_then\n,\nstart_h_then\n,\nstep_h_then\n,\nstart_w_then\n,\nstep_w_then\n)\n{\nstep_d_then\n=\nDiv\n(\ntwo_f\n,\nD_float\n)\nstep_h_then\n=\nDiv\n(\ntwo_f\n,\nH_float\n)\nstep_w_then\n=\nDiv\n(\ntwo_f\n,\nW_float\n)\nstep_d_half\n=\nDiv\n(\nstep_d_then\n,\ntwo_f\n)\nstart_d_then\n=\nAdd\n(\nminus_one_f\n,\nstep_d_half\n)\nstep_h_half\n=\nDiv\n(\nstep_h_then\n,\ntwo_f\n)\nstart_h_then\n=\nAdd\n(\nminus_one_f\n,\nstep_h_half\n)\nstep_w_half\n=\nDiv\n(\nstep_w_then\n,\ntwo_f\n)\nstart_w_then\n=\nAdd\n(\nminus_one_f\n,\nstep_w_half\n)\n},\nelse_branch\n:\ngraph\n=\nh2\n()\n=>\n(\nstart_d_else\n,\nstep_d_else\n,\nstart_h_else\n,\nstep_h_else\n,\nstart_w_else\n,\nstep_w_else\n)\n{\nD_float_nimus_one\n=\nSub\n(\nD_float\n,\none_f\n)\nH_float_nimus_one\n=\nSub\n(\nH_float\n,\none_f\n)\nW_float_nimus_one\n=\nSub\n(\nW_float\n,\none_f\n)\nD_equals_one\n=\nEqual\n(\nD\n,\none\n)\nstep_d_else\n=\nIf\n(\nD_equals_one\n)\n<\nthen_branch\n:\ngraph\n=\ng5\n()\n=>\n(\nstep_d_else_then\n)\n{\nstep_d_else_then\n=\nIdentity\n(\nzero_f\n)\n},\nelse_branch\n:\ngraph\n=\ng6\n()\n=>\n(\nstep_d_else_else\n)\n{\nstep_d_else_else\n=\nDiv\n(\ntwo_f\n,\nD_float_nimus_one\n)\n}\n>\nstep_h_else\n=\nDiv\n(\ntwo_f\n,\nH_float_nimus_one\n)\nstep_w_else\n=\nDiv\n(\ntwo_f\n,\nW_float_nimus_one\n)\nstart_d_else\n=\nIdentity\n(\nminus_one_f\n)\nstart_h_else\n=\nIdentity\n(\nminus_one_f\n)\nstart_w_else\n=\nIdentity\n(\nminus_one_f\n)\n}\n>\ngrid_w_steps_int\n=\nRange\n(\nzero\n,\nW\n,\none\n)\ngrid_w_steps_float\n=\nCastLike\n(\ngrid_w_steps_int\n,\nstep_w\n)\ngrid_w_steps\n=\nMul\n(\ngrid_w_steps_float\n,\nstep_w\n)\ngrid_w_0\n=\nAdd\n(\nstart_w\n,\ngrid_w_steps\n)\ngrid_h_steps_int\n=\nRange\n(\nzero\n,\nH\n,\none\n)\ngrid_h_steps_float\n=\nCastLike\n(\ngrid_h_steps_int\n,\nstep_h\n)\ngrid_h_steps\n=\nMul\n(\ngrid_h_steps_float\n,\nstep_h\n)\ngrid_h_0\n=\nAdd\n(\nstart_h\n,\ngrid_h_steps\n)\ngrid_d_steps_int\n=\nRange\n(\nzero\n,\nD\n,\none\n)\ngrid_d_steps_float\n=\nCastLike\n(\ngrid_d_steps_int\n,\nstep_d\n)\ngrid_d_steps\n=\nMul\n(\ngrid_d_steps_float\n,\nstep_d\n)\ngrid_d_0\n=\nAdd\n(\nstart_d\n,\ngrid_d_steps\n)\nzeros_H_W_D\n=\nTranspose\n<\nperm\n:\nints\n=\n[\n1\n,\n2\n,\n0\n]\n>\n(\nzeros_D_H_W\n)\ngrid_d_1\n=\nAdd\n(\nzeros_H_W_D\n,\ngrid_d_0\n)\ngrid_d\n=\nTranspose\n<\nperm\n:\nints\n=\n[\n2\n,\n0\n,\n1\n]\n>\n(\ngrid_d_1\n)\nzeros_D_W_H\n=\nTranspose\n<\nperm\n:\nints\n=\n[\n0\n,\n2\n,\n1\n]\n>\n(\nzeros_D_H_W\n)\ngrid_h_1\n=\nAdd\n(\nzeros_D_W_H\n,\ngrid_h_0\n)\ngrid_h\n=\nTranspose\n<\nperm\n:\nints\n=\n[\n0\n,\n2\n,\n1\n]\n>\n(\ngrid_h_1\n)\ngrid_w\n=\nAdd\n(\ngrid_w_0\n,\nzeros_D_H_W\n)\ngrid_w_usqzed\n=\nUnsqueeze\n(\ngrid_w\n,\nminus_one\n)\ngrid_h_usqzed\n=\nUnsqueeze\n(\ngrid_h\n,\nminus_one\n)\ngrid_d_usqzed\n=\nUnsqueeze\n(\ngrid_d\n,\nminus_one\n)\nones_D_H_W_usqzed\n=\nUnsqueeze\n(\nones_D_H_W\n,\nminus_one\n)\noriginal_grid\n=\nConcat\n<\naxis\n:\nint\n=\n-\n1\n>\n(\ngrid_w_usqzed\n,\ngrid_h_usqzed\n,\ngrid_d_usqzed\n,\nones_D_H_W_usqzed\n)\nconstant_shape_DHW_4\n=\nConstant\n<\nvalue_ints\n:\nints\n=\n[\n-\n1\n,\n4\n]\n>\n()\noriginal_grid_DHW_4\n=\nReshape\n(\noriginal_grid\n,\nconstant_shape_DHW_4\n)\noriginal_grid_4_DHW_\n=\nTranspose\n(\noriginal_grid_DHW_4\n)\noriginal_grid_4_DHW\n=\nCastLike\n(\noriginal_grid_4_DHW_\n,\ntheta_3d\n)\ngrid_N_3_DHW\n=\nMatMul\n(\ntheta_3d\n,\noriginal_grid_4_DHW\n)\ngrid_N_DHW_3\n=\nTranspose\n<\nperm\n:\nints\n=\n[\n0\n,\n2\n,\n1\n]\n>\n(\ngrid_N_3_DHW\n)\nN_D_H_W_3\n=\nConcat\n<\naxis\n:\nint\n=\n-\n1\n>\n(\nN\n,\nD\n,\nH\n,\nW\n,\nthree_1d\n)\ngrid_3d_else_\n=\nReshape\n(\ngrid_N_DHW_3\n,\nN_D_H_W_3\n)\ngrid_3d\n=\nCastLike\n(\ngrid_3d_else_\n,\ntheta_3d\n)\ngrid\n=\nIf\n(\ncondition_is_2d\n)\n<\nthen_branch\n:\ngraph\n=\ng1\n()\n=>\n(\ngrid_then\n)\n{\ngrid_squeezed\n=\nSqueeze\n(\ngrid_3d\n,\none_1d\n)\ngrid_then\n=\nSlice\n(\ngrid_squeezed\n,\nzero_1d\n,\ntwo_1d\n,\nthree_1d\n)\n},\nelse_branch\n:\ngraph\n=\ng2\n()\n=>\n(\ngrid_else\n)\n{\ngrid_else\n=\nIdentity\n(\ngrid_3d\n)\n}\n>\n}",
            "Attributes":"align_corners - INT\n(default is\n'0'\n):\nif align_corners=1, consider -1 and 1 to refer to the centers of the corner pixels. if align_corners=0, consider -1 and 1 to refer to the outer edge the corner pixels.",
            "Inputs":"theta\n(heterogeneous) -\nT1\n:\ninput batch of affine matrices with shape (N, 2, 3) for 2D or (N, 3, 4) for 3D\nsize\n(heterogeneous) -\nT2\n:\nthe target output image size (N, C, H, W) for 2D or (N, C, D, H, W) for 3D",
            "Outputs":"grid\n(heterogeneous) -\nT1\n:\noutput tensor of shape (N, H, W, 2) of 2D sample coordinates or (N, D, H, W, 3) of 3D sample coordinates.",
            "Type constraints":"T1\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n):\nConstrain grid types to float tensors.\nT2\nin (\ntensor(int64)\n):\nConstrain sizeâs type to int64 tensors."
        }
    },
    {
        "name":"And",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__And.html#l-onnx-doc-and",
        "details":{
            "Summary":"Returns the tensor resulted from performing the\nand\nlogical operation\nelementwise on the input tensors\nA\nand\nB\n(with Numpy-style broadcasting support).\nThis operator supports\nmultidirectional (i.e., Numpy-style) broadcasting\n; for more details please check\nBroadcasting in ONNX\n.",
            "Inputs":"A\n(heterogeneous) -\nT\n:\nFirst input operand for the logical operator.\nB\n(heterogeneous) -\nT\n:\nSecond input operand for the logical operator.",
            "Outputs":"C\n(heterogeneous) -\nT1\n:\nResult tensor.",
            "Type constraints":"T\nin (\ntensor(bool)\n):\nConstrain input to boolean tensor.\nT1\nin (\ntensor(bool)\n):\nConstrain output to boolean tensor.\nAnd - 1 vs 7"
        }
    },
    {
        "name":"ArgMax",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__ArgMax.html#l-onnx-doc-argmax",
        "details":{
            "Summary":"Computes the indices of the max elements of the input tensorâs element along the\nprovided axis. The resulting tensor has the same rank as the input if keepdims equals 1.\nIf keepdims equals 0, then the resulting tensor has the reduced dimension pruned.\nIf select_last_index is True (default False), the index of the last occurrence of the max\nis selected if the max appears more than once in the input. Otherwise the index of the\nfirst occurrence is selected.\nThe type of the output tensor is integer.",
            "Attributes":"axis - INT\n(default is\n'0'\n):\nThe axis in which to compute the arg indices. Accepted range is [-r, r-1] where r = rank(data).\nkeepdims - INT\n(default is\n'1'\n):\nKeep the reduced dimension or not, default 1 means keep reduced dimension.\nselect_last_index - INT\n(default is\n'0'\n):\nWhether to select the last index or the first index if the {name} appears in multiple indices, default is False (first index).",
            "Inputs":"data\n(heterogeneous) -\nT\n:\nAn input tensor.",
            "Outputs":"reduced\n(heterogeneous) -\ntensor(int64)\n:\nReduced output tensor with integer data type.",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain input and output types to all numeric tensors.\nArgMax - 12 vs 13"
        }
    },
    {
        "name":"ArgMin",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__ArgMin.html#l-onnx-doc-argmin",
        "details":{
            "Summary":"Computes the indices of the min elements of the input tensorâs element along the\nprovided axis. The resulting tensor has the same rank as the input if keepdims equals 1.\nIf keepdims equals 0, then the resulting tensor has the reduced dimension pruned.\nIf select_last_index is True (default False), the index of the last occurrence of the min\nis selected if the min appears more than once in the input. Otherwise the index of the\nfirst occurrence is selected.\nThe type of the output tensor is integer.",
            "Attributes":"axis - INT\n(default is\n'0'\n):\nThe axis in which to compute the arg indices. Accepted range is [-r, r-1] where r = rank(data).\nkeepdims - INT\n(default is\n'1'\n):\nKeep the reduced dimension or not, default 1 means keep reduced dimension.\nselect_last_index - INT\n(default is\n'0'\n):\nWhether to select the last index or the first index if the {name} appears in multiple indices, default is False (first index).",
            "Inputs":"data\n(heterogeneous) -\nT\n:\nAn input tensor.",
            "Outputs":"reduced\n(heterogeneous) -\ntensor(int64)\n:\nReduced output tensor with integer data type.",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain input and output types to all numeric tensors.\nArgMin - 12 vs 13"
        }
    },
    {
        "name":"Asin",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Asin.html#l-onnx-doc-asin",
        "details":{
            "Summary":"Calculates the arcsine (inverse of sine) of the given input tensor, element-wise.",
            "Inputs":"input\n(heterogeneous) -\nT\n:\nInput tensor",
            "Outputs":"output\n(heterogeneous) -\nT\n:\nThe arcsine of the input tensor computed element-wise",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n):\nConstrain input and output types to float tensors.\nAsin - 7 vs 22"
        }
    },
    {
        "name":"Asinh",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Asinh.html#l-onnx-doc-asinh",
        "details":{
            "Summary":"Calculates the hyperbolic arcsine of the given input tensor element-wise.",
            "Inputs":"input\n(heterogeneous) -\nT\n:\nInput tensor",
            "Outputs":"output\n(heterogeneous) -\nT\n:\nThe hyperbolic arcsine values of the input tensor computed element-wise",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n):\nConstrain input and output types to float tensors.\nAsinh - 9 vs 22"
        }
    },
    {
        "name":"Atan",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Atan.html#l-onnx-doc-atan",
        "details":{
            "Summary":"Calculates the arctangent (inverse of tangent) of the given input tensor, element-wise.",
            "Inputs":"input\n(heterogeneous) -\nT\n:\nInput tensor",
            "Outputs":"output\n(heterogeneous) -\nT\n:\nThe arctangent of the input tensor computed element-wise",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n):\nConstrain input and output types to float tensors.\nAtan - 7 vs 22"
        }
    },
    {
        "name":"Atanh",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Atanh.html#l-onnx-doc-atanh",
        "details":{
            "Summary":"Calculates the hyperbolic arctangent of the given input tensor element-wise.",
            "Inputs":"input\n(heterogeneous) -\nT\n:\nInput tensor",
            "Outputs":"output\n(heterogeneous) -\nT\n:\nThe hyperbolic arctangent values of the input tensor computed element-wise",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n):\nConstrain input and output types to float tensors.\nAtanh - 9 vs 22"
        }
    },
    {
        "name":"Attention",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Attention.html#l-onnx-doc-attention",
        "details":{
            "Summary":"Computes scaled dot product attention on query, key and value tensors, using an optional attention mask if passed.\nThis operator covers self and cross variants of the attention operation based on sequence lengths of K, Q and V.\nFor self attention,\nkv_sequence_length\nequals to\nq_sequence_length\n.\nFor cross attention, query and key might have different lengths.\nThis operator also covers the 3 following variants based on the number of heads:\nMulti-headed Attention (MHA): Described in the paper\nhttps:\/\/arxiv.org\/pdf\/1706.03762\n,\nq_num_heads\n=\nkv_num_heads\n.\nGroup-query Attention (GQA): Described in the paper\nhttps:\/\/arxiv.org\/pdf\/2305.13245\n,\nq_num_heads\n>\nkv_num_heads\n,\nq_num_heads\n%\nkv_num_heads\n==\n0\n.\nMulti-query Attention (MQA): Described in the paper\nhttps:\/\/arxiv.org\/pdf\/1911.02150\n,\nq_num_heads\n>\nkv_num_heads\n,\nkv_num_heads=1\n.\nAttention bias to be added is calculated based on\nattn_mask\ninput and\nis_causal\nattribute:\nattn_mask\n: A boolean mask where a value of\nTrue\nindicates that the element should take part in attention or a float mask of the same type as query, key, value that is added to the attention score.\nIf\nis_causal\nis set to\n1\n, attention scores above the diagonal are masked out, regardless of the\nattn_mask\ninput.\nWith respect to KV cache update, this operator allows the following two use cases:\nCache update happens inside the Attention operator. In this case, the\nK\nand\nV\ninputs contain only the incoming\ntokens for the current autoregressive step, and the four optional inputs\/outputs past and present key and value are\nall needed. The Attention op performs a Concat operation on the past and incoming key and value to form the present\nkey and value, respectively. Note that this only works correctly for the special case where the past key and value\ndo not contain padded tokens.\nCache update happens outside the Attention operator (for example, through the\nTensorScatter\noperator). In this\ncase, the\nK\nand\nV\ninputs correspond to the entire cache tensor, so the four optional inputs\/outputs past and\npresent key and value should not be used. An additional input\nnonpad_kv_seqlen\nof shape (batch_size,) may be\nprovided to indicate the number of non-padding tokens in each sample of the batch to save unnecessary computation.\nHere, the kv_sequence dimension of\nattn_mask\ncan be shorter than\nK\nand\nV\n, but still needs to be at least as long\nas the maximum value of\nnonpad_kv_seqlen\n.\nBoth past and present state key\/values are optional. They shall be used together, and not allowed to use only one of them.\nThe following pattern is applied to the Q, K and V inputs after appropriate reshaping of K and V inputs based on sequence lengths and num heads provided:\nThe\nfollowing\npattern\nis\napplied\nby\nthis\noperator\n:\nQ\nK\nV\n|\n|\n|\nQ\n*\nsqrt\n(\nscale\n)\nK\n*\nsqrt\n(\nscale\n)\n|\n|\n|\n|\n|\nTranspose\n|\n|\n|\n|\n---\nMatMul\n---\n|\n|\n|\nat_mask\n---\nAdd\n|\n|\n|\nsoftcap\n(\nif\nprovided\n)\n|\n|\n|\nSoftmax\n|\n|\n|\n-----\nMatMul\n------\n|\nY",
            "Attributes":"is_causal - INT\n(default is\n'0'\n):\nIf set to\n1\n, the attention masking is a lower triangular matrix when the mask is a square matrix. The attention masking has the form of the upper left causal bias due to the alignment.\nkv_num_heads - INT\n:\nNumber of heads of key and value. Must be used with 3D inputs of Q, K and V.\nq_num_heads - INT\n:\nNumber of heads of query. Must be used with 3D inputs of Q, K and V.\nqk_matmul_output_mode - INT\n(default is\n'0'\n):\nIf set to\n0\n, qk_matmul_output is the output of qk matmul. If set to\n1\n, qk_matmul_output includes the addition of the attention mask to the output of qk matmul. If set to\n2\n, qk_matmul_output is the output after the softcap operation. If set to\n3\n, qk_matmul_output is the output after the softmax operation. Default value is 0.\nscale - FLOAT\n:\nScaling factor applied to\n\\(Q*K^T\\)\n. Default value is\n1\/sqrt(head_size)\n. To prevent\nnumerical overflow\n, scale\nQ\n,\nK\nby\nsqrt(scale)\nbefore matmul.\nsoftcap - FLOAT\n(default is\n'0.0'\n):\nSoftcap value for attention weights. Default value is 0.\nsoftmax_precision - INT\n:\nThe floating-point precision used in softmax computation. If softmax precision is not provided, the same precision as the input of softmax (Q and K) is used.",
            "Inputs":"Between 3 and 7 inputs.\nQ\n(heterogeneous) -\nT1\n:\nQuery tensor. 4D tensor with shape\n(batch_size,\nq_num_heads,\nq_sequence_length,\nhead_size)\nor 3D tensor with shape\n(batch_size,\nq_sequence_length,\nq_hidden_size)\n. For cases with a 3D input tensor,\nq_hidden_size\n=\nq_num_heads\n*\nhead_size\nK\n(heterogeneous) -\nT1\n:\nKey tensor. 4D tensor with shape\n(batch_size,\nkv_num_heads,\nkv_sequence_length,\nhead_size)\nor 3D tensor with shape\n(batch_size,\nkv_sequence_length,\nk_hidden_size)\n. For cases with a 3D input tensor,\nk_hidden_size\n=\nkv_num_heads\n*\nhead_size\nV\n(heterogeneous) -\nT2\n:\nValue tensor. 4D tensor with shape\n(batch_size,\nkv_num_heads,\nkv_sequence_length,\nv_head_size)\nor 3D tensor with shape\n(batch_size,\nkv_sequence_length,\nv_hidden_size)\n. For cases with a 3D input tensor,\nv_hidden_size\n=\nkv_num_heads\n*\nv_head_size\nattn_mask\n(optional, heterogeneous) -\nU\n:\nAttention mask. Shape must be broadcastable to\n(batch_size,\nq_num_heads,\nq_sequence_length,\ntotal_sequence_length)\nwhere\ntotal_sequence_length\n=\npast_sequence_length\n+\nkv_sequence_length.\nThe last dimension can also be shorter than\ntotal_sequence_length\nand will be padded to\ntotal_sequence_length\nwith negative infinity. Two types of masks are supported: a boolean mask where a value of\nTrue\nindicates that the element should take part in attention, or a float mask of the same type as query, key, value that is added to the attention score.\npast_key\n(optional, heterogeneous) -\nT1\n:\npast state cache for key with shape\n(batch_size,\nkv_num_heads,\npast_sequence_length,\nhead_size)\npast_value\n(optional, heterogeneous) -\nT2\n:\npast state cache for value with shape\n(batch_size,\nkv_num_heads,\npast_sequence_length,\nv_head_size)\nnonpad_kv_seqlen\n(optional, heterogeneous) -\ntensor(int64)\n:\nA vector of integers of shape\n(batch_size,)\nthat indicates the number of valid (ie, non-padding) tokens in each sample. A padding mask can be derived from this. This should not be used together with\npast_key\nand\npast_value\ninputs or\npresent_key\nand\npresent_value\noutputs (See the KV cache use cases in the operator description).",
            "Outputs":"Between 1 and 4 outputs.\nY\n(heterogeneous) -\nT1\n:\nThe output tensor . 4D tensor with shape\n(batch_size,\nq_num_heads,\nq_sequence_length,\nv_head_size)\nor 3D tensor with shape\n(batch_size,\nq_sequence_length,\nhidden_size)\n. For cases with a 3D input tensor,\nhidden_size\n=\nq_num_heads\n*\nv_head_size\npresent_key\n(optional, heterogeneous) -\nT1\n:\nUpdated key cache with shape\n(batch_size,\nkv_num_heads,\ntotal_sequence_length,\nhead_size)\nwhere\ntotal_sequence_length\n=\npast_sequence_length\n+\nkv_sequence_length\n.\npresent_value\n(optional, heterogeneous) -\nT2\n:\nUpdated value cache with shape\n(batch_size,\nkv_num_heads,\ntotal_sequence_length,\nv_head_size)\nwhere\ntotal_sequence_length\n=\npast_sequence_length\n+\nkv_sequence_length\n.\nqk_matmul_output\n(optional, heterogeneous) -\nT1\n:\nThe output of QK matmul. 4D tensor with shape\n(batch_size,\nq_num_heads,\nq_sequence_length,\ntotal_sequence_length)\nwhere\ntotal_sequence_length\n=\npast_sequence_length\n+\nkv_sequence_length\n.",
            "Type constraints":"T1\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n):\nConstrain Q and K inputs types to float tensors.\nT2\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n):\nConstrain V input types to float tensors.\nU\nin (\ntensor(bfloat16)\n,\ntensor(bool)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain output âmaskâ types to boolean tensors and input types.\nAttention - 23 vs 24"
        }
    },
    {
        "name":"AveragePool",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__AveragePool.html#l-onnx-doc-averagepool",
        "details":{
            "Summary":"AveragePool consumes an input tensor X and applies average pooling across\nthe tensor according to kernel sizes, stride sizes, and pad lengths.\naverage pooling consisting of computing the average on all values of a\nsubset of the input tensor according to the kernel size and downsampling the\ndata into the output tensor Y for further processing. The output spatial shape is calculated differently\ndepending on whether explicit padding is used, where pads is employed, or auto padding is used, where auto_pad is utilized.\nWith explicit padding (\nhttps:\/\/pytorch.org\/docs\/stable\/generated\/torch.nn.MaxPool2d.html?highlight=maxpool#torch.nn.MaxPool2d\n):\noutput_spatial_shape\n[\ni\n]\n=\nfloor\n((\ninput_spatial_shape\n[\ni\n]\n+\npad_shape\n[\ni\n]\n-\ndilation\n[\ni\n]\n*\n(\nkernel_shape\n[\ni\n]\n-\n1\n)\n-\n1\n)\n\/\nstrides_spatial_shape\n[\ni\n]\n+\n1\n)\nor\noutput_spatial_shape\n[\ni\n]\n=\nceil\n((\ninput_spatial_shape\n[\ni\n]\n+\npad_shape\n[\ni\n]\n-\ndilation\n[\ni\n]\n*\n(\nkernel_shape\n[\ni\n]\n-\n1\n)\n-\n1\n)\n\/\nstrides_spatial_shape\n[\ni\n]\n+\n1\n)\nif ceil_mode is enabled.\npad_shape[i]\nis the sum of pads along axis\ni\n. Sliding windows that would start in the right padded region are ignored.\nauto_pad\nis a DEPRECATED attribute. If you are using them currently, the output spatial shape will be following when ceil_mode is enabled:\nVALID\n:\noutput_spatial_shape\n[\ni\n]\n=\nceil\n((\ninput_spatial_shape\n[\ni\n]\n-\n((\nkernel_spatial_shape\n[\ni\n]\n-\n1\n)\n*\ndilations\n[\ni\n]\n+\n1\n)\n+\n1\n)\n\/\nstrides_spatial_shape\n[\ni\n])\nSAME_UPPER\nor\nSAME_LOWER\n:\noutput_spatial_shape\n[\ni\n]\n=\nceil\n(\ninput_spatial_shape\n[\ni\n]\n\/\nstrides_spatial_shape\n[\ni\n])\nor when ceil_mode is disabled (\nhttps:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/layers\/AveragePooling2D\n):\nVALID\n:\noutput_spatial_shape\n[\ni\n]\n=\nfloor\n((\ninput_spatial_shape\n[\ni\n]\n-\n((\nkernel_spatial_shape\n[\ni\n]\n-\n1\n)\n*\ndilations\n[\ni\n]\n+\n1\n))\n\/\nstrides_spatial_shape\n[\ni\n])\n+\n1\nSAME_UPPER\nor\nSAME_LOWER\n:\noutput_spatial_shape\n[\ni\n]\n=\nfloor\n((\ninput_spatial_shape\n[\ni\n]\n-\n1\n)\n\/\nstrides_spatial_shape\n[\ni\n])\n+\n1\nAnd pad shape will be following if\nSAME_UPPER\nor\nSAME_LOWER\n:\npad_shape\n[\ni\n]\n=\n(\noutput_spatial_shape\n[\ni\n]\n-\n1\n)\n*\nstrides_spatial_shape\n[\ni\n]\n+\n((\nkernel_spatial_shape\n[\ni\n]\n-\n1\n)\n*\ndilations\n[\ni\n]\n+\n1\n)\n-\ninput_spatial_shape\n[\ni\n]\nThe output of each pooling window is divided by the number of elements (exclude pad when attribute count_include_pad is zero).",
            "Attributes":"auto_pad - STRING\n(default is\n'NOTSET'\n):\nauto_pad must be either NOTSET, SAME_UPPER, SAME_LOWER or VALID. Where default value is NOTSET, which means explicit padding is used. SAME_UPPER or SAME_LOWER mean pad the input so that\noutput_shape[i]\n=\nceil(input_shape[i]\n\/\nstrides[i])\nfor each axis\ni\n. The padding is split between the two sides equally or almost equally (depending on whether it is even or odd). In case the padding is an odd number, the extra padding is added at the end for SAME_UPPER and at the beginning for SAME_LOWER.\nceil_mode - INT\n(default is\n'0'\n):\nWhether to use ceil or floor (default) to compute the output shape.\ncount_include_pad - INT\n(default is\n'0'\n):\nWhether include pad pixels when calculating values for the edges. Default is 0, doesnât count include pad.\ndilations - INTS\n:\nDilation value along each spatial axis of filter. If not present, the dilation defaults to 1 along each spatial axis.\nkernel_shape - INTS\n(required) :\nThe size of the kernel along each axis.\npads - INTS\n:\nPadding for the beginning and ending along each spatial axis, it can take any value greater than or equal to 0. The value represent the number of pixels added to the beginning and end part of the corresponding axis.\npads\nformat should be as follow [x1_begin, x2_beginâ¦x1_end, x2_end,â¦], where xi_begin the number of pixels added at the beginning of axis\ni\nand xi_end, the number of pixels added at the end of axis\ni\n. This attribute cannot be used simultaneously with auto_pad attribute. If not present, the padding defaults to 0 along start and end of each spatial axis.\nstrides - INTS\n:\nStride along each spatial axis. If not present, the stride defaults to 1 along each spatial axis.",
            "Inputs":"X\n(heterogeneous) -\nT\n:\nInput data tensor from the previous operator; dimensions for image case are (N x C x H x W), where N is the batch size, C is the number of channels, and H and W are the height and the width of the data. For non image case, the dimensions are in the form of (N x C x D1 x D2 â¦ Dn), where N is the batch size. Optionally, if dimension denotation is in effect, the operation expects the input data tensor to arrive with the dimension denotation of [DATA_BATCH, DATA_CHANNEL, DATA_FEATURE, DATA_FEATURE â¦].",
            "Outputs":"Y\n(heterogeneous) -\nT\n:\nOutput data tensor from average or max pooling across the input tensor. Dimensions will vary based on various kernel, stride, and pad sizes. Floor value of the dimension is used",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n):\nConstrain input and output types to float tensors.\nAveragePool - 19 vs 22"
        }
    },
    {
        "name":"BatchNormalization",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__BatchNormalization.html#l-onnx-doc-batchnormalization",
        "details":{
            "Summary":"Carries out batch normalization as described in the paper\nhttps:\/\/arxiv.org\/abs\/1502.03167\n. Depending on the mode it is being run,\nThere are five required inputs âXâ, âscaleâ, âBâ, âinput_meanâ and\nâinput_varâ.\nNote that âinput_meanâ and âinput_varâ are expected to be the estimated\nstatistics in inference mode (training_mode=False, default),\nand the running statistics in training mode (training_mode=True).\nThere are multiple cases for the number of outputs, which we list below:\nOutput case #1: Y, running_mean, running_var (training_mode=True)\nOutput case #2: Y (training_mode=False)\nWhen training_mode=False, extra outputs are invalid.\nThe outputs are updated as follows when training_mode=True:\nrunning_mean\n=\ninput_mean\n*\nmomentum\n+\ncurrent_mean\n*\n(\n1\n-\nmomentum\n)\nrunning_var\n=\ninput_var\n*\nmomentum\n+\ncurrent_var\n*\n(\n1\n-\nmomentum\n)\nY\n=\n(\nX\n-\ncurrent_mean\n)\n\/\nsqrt\n(\ncurrent_var\n+\nepsilon\n)\n*\nscale\n+\nB\nwhere:\ncurrent_mean\n=\nReduceMean\n(\nX\n,\naxis\n=\nall_except_channel_index\n)\ncurrent_var\n=\nReduceVar\n(\nX\n,\naxis\n=\nall_except_channel_index\n)\nNotice that\nReduceVar\nrefers to the population variance, and it equals to\nsum(sqrd(x_i\n-\nx_avg))\n\/\nN\nwhere\nN\nis the population size (this formula does not use sample size\nN\n-\n1\n).\nThe computation of ReduceMean and ReduceVar uses float to avoid overflow for float16 inputs.\nWhen training_mode=False:\nY\n=\n(\nX\n-\ninput_mean\n)\n\/\nsqrt\n(\ninput_var\n+\nepsilon\n)\n*\nscale\n+\nB\nFor previous (depreciated) non-spatial cases, implementors are suggested\nto flatten the input shape to (N x C * D1 * D2 * â¦ * Dn) before a BatchNormalization Op.\nThis operator has\noptional\ninputs\/outputs. See\nONNX IR\nfor more details about the representation of optional arguments. An empty string may be used in the place of an actual argumentâs name to indicate a missing argument. Trailing optional arguments (those not followed by an argument that is present) may also be simply omitted.",
            "Attributes":"epsilon - FLOAT\n(default is\n'1e-05'\n):\nThe epsilon value to use to avoid division by zero.\nmomentum - FLOAT\n(default is\n'0.9'\n):\nFactor used in computing the running mean and variance.e.g., running_mean = running_mean * momentum + mean * (1 - momentum).\ntraining_mode - INT\n(default is\n'0'\n):\nIf set to true, it indicates BatchNormalization is being used for training, and outputs 1 and 2 are to be computed.",
            "Inputs":"X\n(heterogeneous) -\nT\n:\nInput data tensor from the previous operator; dimensions are in the form of (N x C x D1 x D2 â¦ Dn), where N is the batch size, C is the number of channels. Statistics are computed for every channel of C over N and D1 to Dn dimensions. For image data, input dimensions become (N x C x H x W). The op also accepts single dimension input of size N in which case C is assumed to be 1\nscale\n(heterogeneous) -\nT1\n:\nScale tensor of shape Â©.\nB\n(heterogeneous) -\nT1\n:\nBias tensor of shape Â©.\ninput_mean\n(heterogeneous) -\nT2\n:\nrunning (training) or estimated (testing) mean tensor of shape Â©.\ninput_var\n(heterogeneous) -\nT2\n:\nrunning (training) or estimated (testing) variance tensor of shape Â©.",
            "Outputs":"Between 1 and 3 outputs.\nY\n(heterogeneous) -\nT\n:\nThe output tensor of the same shape as X\nrunning_mean\n(optional, heterogeneous) -\nT2\n:\nThe running mean after the BatchNormalization operator.\nrunning_var\n(optional, heterogeneous) -\nT2\n:\nThe running variance after the BatchNormalization operator. This op uses the population size (N) for calculating variance, and not the sample size N-1.",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n):\nConstrain input and output types to float tensors.\nT1\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n):\nConstrain scale and bias types to float tensors.\nT2\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n):\nConstrain mean and variance types to float tensors.\nBatchNormalization - 14 vs 15"
        }
    },
    {
        "name":"Bernoulli",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Bernoulli.html#l-onnx-doc-bernoulli",
        "details":{
            "Summary":"Draws binary random numbers (0 or 1) from a Bernoulli distribution. The input tensor should be a tensor\ncontaining probabilities p (a value in the range [0,1]) to be used for drawing the binary random number,\nwhere an output of 1 is produced with probability p and an output of 0 is produced with probability (1-p).\nThis operator is non-deterministic and may not produce the same values in different\nimplementations (even if a seed is specified).",
            "Attributes":"dtype - INT\n:\nThe data type for the elements of the output tensor. if not specified, we will use the data type of the input tensor.\nseed - FLOAT\n:\n(Optional) Seed to the random generator, if not specified we will auto generate one.",
            "Inputs":"input\n(heterogeneous) -\nT1\n:\nAll values in input have to be in the range:[0, 1].",
            "Outputs":"output\n(heterogeneous) -\nT2\n:\nThe returned output tensor only has values 0 or 1, same shape as input tensor.",
            "Type constraints":"T1\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n):\nConstrain input types to float tensors.\nT2\nin (\ntensor(bfloat16)\n,\ntensor(bool)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain output types to all numeric tensors and bool tensors.\nBernoulli - 15 vs 22"
        }
    },
    {
        "name":"BitShift",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__BitShift.html#l-onnx-doc-bitshift",
        "details":{
            "Summary":"Bitwise shift operator performs element-wise operation. For each input element, if the\nattribute âdirectionâ is âRIGHTâ, this operator moves its binary representation toward\nthe right side so that the input value is effectively decreased. If the attribute âdirectionâ\nis âLEFTâ, bits of binary representation moves toward the left side, which results the\nincrease of its actual value. The input X is the tensor to be shifted and another input\nY specifies the amounts of shifting. For example, if âdirectionâ is âRightâ, X is [1, 4],\nand S is [1, 1], the corresponding output Z would be [0, 2]. If âdirectionâ is âLEFTâ with\nX=[1, 2] and S=[1, 2], the corresponding output Y would be [2, 8].\nBecause this operator supports Numpy-style broadcasting, Xâs and Yâs shapes are\nnot necessarily identical.\nThis operator supports\nmultidirectional (i.e., Numpy-style) broadcasting\n; for more details please check\nBroadcasting in ONNX\n.",
            "Attributes":"direction - STRING\n(required) :\nDirection of moving bits. It can be either âRIGHTâ (for right shift) or âLEFTâ (for left shift).",
            "Inputs":"X\n(heterogeneous) -\nT\n:\nFirst operand, input to be shifted.\nY\n(heterogeneous) -\nT\n:\nSecond operand, amounts of shift.",
            "Outputs":"Z\n(heterogeneous) -\nT\n:\nOutput tensor",
            "Type constraints":"T\nin (\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain input and output types to integer tensors."
        }
    },
    {
        "name":"BitwiseAnd",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__BitwiseAnd.html#l-onnx-doc-bitwiseand",
        "details":{
            "Summary":"Returns the tensor resulting from performing the bitwise\nand\noperation\nelementwise on the input tensors\nA\nand\nB\n(with Numpy-style broadcasting support).\nThis operator supports\nmultidirectional (i.e., Numpy-style) broadcasting\n; for more details please check\nBroadcasting in ONNX\n.",
            "Inputs":"A\n(heterogeneous) -\nT\n:\nFirst input operand for the bitwise operator.\nB\n(heterogeneous) -\nT\n:\nSecond input operand for the bitwise operator.",
            "Outputs":"C\n(heterogeneous) -\nT\n:\nResult tensor.",
            "Type constraints":"T\nin (\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain input to integer tensors."
        }
    },
    {
        "name":"BitwiseNot",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__BitwiseNot.html#l-onnx-doc-bitwisenot",
        "details":{
            "Summary":"Returns the bitwise not of the input tensor element-wise.",
            "Inputs":"X\n(heterogeneous) -\nT\n:\nInput tensor",
            "Outputs":"Y\n(heterogeneous) -\nT\n:\nOutput tensor",
            "Type constraints":"T\nin (\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain input\/output to integer tensors."
        }
    },
    {
        "name":"BitwiseOr",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__BitwiseOr.html#l-onnx-doc-bitwiseor",
        "details":{
            "Summary":"Returns the tensor resulting from performing the bitwise\nor\noperation\nelementwise on the input tensors\nA\nand\nB\n(with Numpy-style broadcasting support).\nThis operator supports\nmultidirectional (i.e., Numpy-style) broadcasting\n; for more details please check\nBroadcasting in ONNX\n.",
            "Inputs":"A\n(heterogeneous) -\nT\n:\nFirst input operand for the bitwise operator.\nB\n(heterogeneous) -\nT\n:\nSecond input operand for the bitwise operator.",
            "Outputs":"C\n(heterogeneous) -\nT\n:\nResult tensor.",
            "Type constraints":"T\nin (\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain input to integer tensors."
        }
    },
    {
        "name":"BitwiseXor",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__BitwiseXor.html#l-onnx-doc-bitwisexor",
        "details":{
            "Summary":"Returns the tensor resulting from performing the bitwise\nxor\noperation\nelementwise on the input tensors\nA\nand\nB\n(with Numpy-style broadcasting support).\nThis operator supports\nmultidirectional (i.e., Numpy-style) broadcasting\n; for more details please check\nBroadcasting in ONNX\n.",
            "Inputs":"A\n(heterogeneous) -\nT\n:\nFirst input operand for the bitwise operator.\nB\n(heterogeneous) -\nT\n:\nSecond input operand for the bitwise operator.",
            "Outputs":"C\n(heterogeneous) -\nT\n:\nResult tensor.",
            "Type constraints":"T\nin (\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain input to integer tensors."
        }
    },
    {
        "name":"BlackmanWindow",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__BlackmanWindow.html#l-onnx-doc-blackmanwindow",
        "details":{
            "Summary":"Generates a Blackman window as described in the paper\nhttps:\/\/ieeexplore.ieee.org\/document\/1455106\n.\nFunction Body\nÂ¶\nThe function definition for this operator.\n<\ndomain\n:\n\"\"\n,\nopset_import\n:\n[\n\"\"\n:\n17\n]\n>\nBlackmanWindow\n<\nperiodic\n,\noutput_datatype\n>\n(\nsize\n)\n=>\n(\noutput\n)\n{\nA0\n=\nConstant\n<\nvalue\n:\ntensor\n=\nfloat\n{\n0.42\n}\n>\n()\nA1\n=\nConstant\n<\nvalue\n:\ntensor\n=\nfloat\n{\n0.5\n}\n>\n()\nA2\n=\nConstant\n<\nvalue\n:\ntensor\n=\nfloat\n{\n0.08\n}\n>\n()\nZero\n=\nConstant\n<\nvalue\n:\ntensor\n=\nfloat\n{\n0\n}\n>\n()\nOne\n=\nConstant\n<\nvalue\n:\ntensor\n=\nfloat\n{\n1\n}\n>\n()\nTwo\n=\nConstant\n<\nvalue\n:\ntensor\n=\nfloat\n{\n2\n}\n>\n()\nTau\n=\nConstant\n<\nvalue\n:\ntensor\n=\nfloat\n{\n6.28319\n}\n>\n()\nPeriodic_Size_FP\n=\nCast\n<\nto\n:\nint\n=\n1\n>\n(\nsize\n)\nSymmetric_Size_FP\n=\nSub\n(\nPeriodic_Size_FP\n,\nOne\n)\nIsPeriodic\n=\nConstant\n<\nvalue_int\n:\nint\n=\n@periodic\n>\n()\nIsPeriodic_FP\n=\nCast\n<\nto\n:\nint\n=\n1\n>\n(\nIsPeriodic\n)\nIsSymmetric_FP\n=\nSub\n(\nOne\n,\nIsPeriodic_FP\n)\nPeriodic_Component\n=\nMul\n(\nPeriodic_Size_FP\n,\nIsPeriodic_FP\n)\nSymmetric_Component\n=\nMul\n(\nSymmetric_Size_FP\n,\nIsSymmetric_FP\n)\nSize_FP\n=\nAdd\n(\nPeriodic_Component\n,\nSymmetric_Component\n)\nAngularIncrement\n=\nDiv\n(\nTau\n,\nSize_FP\n)\nRange\n=\nRange\n(\nZero\n,\nPeriodic_Size_FP\n,\nOne\n)\nRangeAngular\n=\nMul\n(\nRange\n,\nAngularIncrement\n)\nTwoRangeAngular\n=\nMul\n(\nRangeAngular\n,\nTwo\n)\nCosTwoRangeAngular\n=\nCos\n(\nTwoRangeAngular\n)\nA2_Component\n=\nMul\n(\nA2\n,\nCosTwoRangeAngular\n)\nCosRangeAngular\n=\nCos\n(\nRangeAngular\n)\nA1_Component\n=\nMul\n(\nA1\n,\nCosRangeAngular\n)\nTemp0\n=\nSub\n(\nA0\n,\nA1_Component\n)\nTemp1\n=\nAdd\n(\nTemp0\n,\nA2_Component\n)\noutput\n=\nCast\n<\nto\n:\nint\n=\n@output_datatype\n>\n(\nTemp1\n)\n}",
            "Attributes":"output_datatype - INT\n(default is\n'1'\n):\nThe data type of the output tensor. Strictly must be one of the values from DataType enum in TensorProto whose values correspond to T2. The default value is 1 = FLOAT.\nperiodic - INT\n(default is\n'1'\n):\nIf 1, returns a window to be used as periodic function. If 0, return a symmetric window. When âperiodicâ is specified, hann computes a window of length size + 1 and returns the first size points. The default value is 1.",
            "Inputs":"size\n(heterogeneous) -\nT1\n:\nA scalar value indicating the length of the window.",
            "Outputs":"output\n(heterogeneous) -\nT2\n:\nA Blackman window with length: size. The output has the shape: [size].",
            "Type constraints":"T1\nin (\ntensor(int32)\n,\ntensor(int64)\n):\nConstrain the input size to int64_t.\nT2\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain output types to numeric tensors."
        }
    },
    {
        "name":"Cast",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Cast.html#l-onnx-doc-cast",
        "details":{
            "Summary":"The operator casts the elements of a given input tensor to a data type\nspecified by the âtoâ argument and returns an output tensor of the same size in\nthe converted type. The âtoâ argument must be one of the data types specified\nin the âDataTypeâ enum field in the TensorProto message.\nCasting from string tensor in plain (e.g., â3.14â and â1000â) and scientific numeric representations\n(e.g., â1e-5â and â1E8â) to float types is supported. For example, converting string â100.5â to an integer may\nyield result 100. There are some string literals reserved for special floating-point values;\nâ+INFâ (and âINFâ), â-INFâ, and âNaNâ are positive infinity, negative infinity, and not-a-number, respectively.\nAny string which can exactly match â+INFâ in a case-insensitive way would be mapped to positive infinite. Similarly,\nthis case-insensitive rule is applied to âINFâ and âNaNâ. When casting from numeric tensors\nto string tensors, plain floating-point representation (such as â314.15926â) would be used.\nConverting non-numerical-literal string such as âHello World!â is an undefined behavior. Cases\nof converting string representing floating-point arithmetic value, such as â2.718â, to INT is an undefined behavior.\nConversion from a numerical type to any numerical type is always allowed.\nUser must be aware of precision loss and value change caused by range difference between two types.\nFor example, a 64-bit float 3.1415926459 may be round to a 32-bit float 3.141592. Similarly, converting\nan integer 36 to Boolean may produce 1 because we truncate bits which canât be stored in the targeted type.\nIn more detail, the conversion among numerical types should follow these rules\nif the destination type is not a float 8 type.\nCasting from floating point to:\nfloating point: +\/- infinity if OOR (out of range).\nfixed point: undefined if OOR.\nbool: +\/- 0.0 to False; all else to True.\nCasting from fixed point to:\nfloating point: +\/- infinity if OOR. (+ infinity in the case of uint)\nfixed point: when OOR, discard higher bits and reinterpret (with respect to twoâs complement representation for\nsigned types). For example, 200 (int16) -> -56 (int8).\nbool: zero to False; nonzero to True.\nCasting from bool to:\nfloating point:\n{1.0,\n0.0}\n.\nfixed point:\n{1,\n0}\n.\nbool: no change.\nFloat 8 types (E4M3FN, E4M3FNUZ, E5M2, E5M2FNUZ) were introduced to speed up the training of\ndeep models. By default the conversion of a float\nx\nobeys\nto the following rules.\n[x]\nmeans the value rounded to\nthe target mantissa width.\nx\nE4M3FN\nE4M3FNUZ\nE5M2\nE5M2FNUZ\n0\n0\n0\n0\n0\n-0\n-0\n0\n-0\n0\nNaN\nNaN\nNaN\nNaN\nNaN\nInf\nFLT_MAX\nFLT_MAX\nFLT_MAX\nFLT_MAX\n-Inf\n-FLT_MAX\n-FLT_MAX\n-FLT_MAX\n-FLT_MAX\n[x] > FLT_MAX\nFLT_MAX\nFLT_MAX\nFLT_MAX\nFLT_MAX\n[x] < -FLT_MAX\n-FLT_MAX\n-FLT_MAX\n-FLT_MAX\n-FLT_MAX\nelse\nRNE\nRNE\nRNE\nRNE\nThe behavior changes if the parameter âsaturateâ is set to False.\nThe rules then become:\nx\nE4M3FN\nE4M3FNUZ\nE5M2\nE5M2FNUZ\n0\n0\n0\n0\n0\n-0\n-0\n0\n-0\n0\nNaN\nNaN\nNaN\nNaN\nNaN\n-NaN\n-NaN\nNaN\n-NaN\nNaN\nInf\nNaN\nNaN\nInf\nNaN\n-Inf\n-NaN\nNaN\n-Inf\nNaN\n[x] > FLT_MAX\nNaN\nNaN\nInf\nNaN\n[x] < -FLT_MAX\nNaN\nNaN\n-Inf\nNaN\nelse\nRNE\nRNE\nRNE\nRNE\nFLOAT8E8M0 type was introduced to enable\nMicroscaling (MX) formats\n.\nWhen casting to FLOAT8E8M0, the rounding behavior can be specified using the\nround_mode\nand\nsaturate\nattributes.\nThe current CUDA behavior is to round up and saturate. Casting negative values to FLOAT8E8M0 gives undefined behavior.\nThe following table describes the casting behavior of special values to FLOAT8E8M0 in the two most common cases.\nx\nsaturate + up\nnon-saturate + nearest\n0\n0\nNaN\n-0\nUnspecified\nUnspecified\nNaN\nNaN\nNaN\nInf\nE8M0_MAX\nNaN\nx > E8M0_MAX\nE8M0_MAX\nNaN\nx < E8M0_MIN\nE8M0_MIN\nNaN\nx < 0\nUnspecified\nUnspecified",
            "Attributes":"round_mode - STRING\n(default is\n'up'\n):\nRounding mode for conversion to float8e8m0. It only applies to casting to float8e8m0 and is\nup\nby default.\nup\n: round to nearest value away from zero,\ndown\n: round to nearest value towards zero,\nnearest\n: round to nearest value and ties round up.\nsaturate - INT\n(default is\n'1'\n):\nThe parameter defines how the conversion behaves if an input value is out of range of the destination type. It only applies for float 8 conversion (float8e4m3fn, float8e4m3fnuz, float8e5m2, float8e5m2fnuz, float8e8m0). It is true by default. All cases are fully described in the tables inserted in the operator description.\nto - INT\n(required) :\nThe data type to which the elements of the input tensor are cast. Strictly must be one of the types from DataType enum in TensorProto",
            "Inputs":"input\n(heterogeneous) -\nT1\n:\nInput tensor to be cast.",
            "Outputs":"output\n(heterogeneous) -\nT2\n:\nOutput tensor with the same shape as input with type specified by the âtoâ argument",
            "Type constraints":"T1\nin (\ntensor(bfloat16)\n,\ntensor(bool)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(float4e2m1)\n,\ntensor(float8e4m3fn)\n,\ntensor(float8e4m3fnuz)\n,\ntensor(float8e5m2)\n,\ntensor(float8e5m2fnuz)\n,\ntensor(float8e8m0)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int4)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(string)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint4)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain input types. Casting from complex is not supported.\nT2\nin (\ntensor(bfloat16)\n,\ntensor(bool)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(float4e2m1)\n,\ntensor(float8e4m3fn)\n,\ntensor(float8e4m3fnuz)\n,\ntensor(float8e5m2)\n,\ntensor(float8e5m2fnuz)\n,\ntensor(float8e8m0)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int4)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(string)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint4)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain output types. Casting to complex is not supported.\nCast - 23 vs 24"
        }
    },
    {
        "name":"CastLike",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__CastLike.html#l-onnx-doc-castlike",
        "details":{
            "Summary":"The operator casts the elements of a given input tensor (the first input) to\nthe same data type as the elements of the second input tensor.\nSee documentation of the Cast operator for further details.",
            "Attributes":"round_mode - STRING\n(default is\n'up'\n):\nRounding mode for conversion to float8e8m0. It only applies to casting to float8e8m0 and is\nup\nby default.\nup\n: round to nearest value away from zero,\ndown\n: round to nearest value towards zero,\nnearest\n: round to nearest value and ties round up. Please refer to operator Cast description for further details.\nsaturate - INT\n(default is\n'1'\n):\nThe parameter defines how the conversion behaves if an input value is out of range of the destination type. It only applies for float 8 conversion (float8e4m3fn, float8e4m3fnuz, float8e5m2, float8e5m2fnuz, float8e8m0). It is true by default. Please refer to operator Cast description for further details.",
            "Inputs":"input\n(heterogeneous) -\nT1\n:\nInput tensor to be cast.\ntarget_type\n(heterogeneous) -\nT2\n:\nThe (first) input tensor will be cast to produce a tensor of the same type as this (second input) tensor.",
            "Outputs":"output\n(heterogeneous) -\nT2\n:\nOutput tensor produced by casting the first input tensor to have the same type as the second input tensor.",
            "Type constraints":"T1\nin (\ntensor(bfloat16)\n,\ntensor(bool)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(float4e2m1)\n,\ntensor(float8e4m3fn)\n,\ntensor(float8e4m3fnuz)\n,\ntensor(float8e5m2)\n,\ntensor(float8e5m2fnuz)\n,\ntensor(float8e8m0)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int4)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(string)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint4)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain input types. Casting from complex is not supported.\nT2\nin (\ntensor(bfloat16)\n,\ntensor(bool)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(float4e2m1)\n,\ntensor(float8e4m3fn)\n,\ntensor(float8e4m3fnuz)\n,\ntensor(float8e5m2)\n,\ntensor(float8e5m2fnuz)\n,\ntensor(float8e8m0)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int4)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(string)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint4)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain output types. Casting to complex is not supported.\nCastLike - 23 vs 24"
        }
    },
    {
        "name":"Ceil",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Ceil.html#l-onnx-doc-ceil",
        "details":{
            "Summary":"Ceil takes one input data (Tensor\n) and produces one output data\n(Tensor\n) where the ceil is, y = ceil(x), is applied to\nthe tensor elementwise. If x is integral, +0, -0, NaN,  or infinite, x itself is returned.",
            "Inputs":"X\n(heterogeneous) -\nT\n:\nInput tensor",
            "Outputs":"Y\n(heterogeneous) -\nT\n:\nOutput tensor",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n):\nConstrain input and output types to float tensors.\nCeil - 6 vs 13"
        }
    },
    {
        "name":"Celu",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Celu.html#l-onnx-doc-celu",
        "details":{
            "Summary":"Continuously Differentiable Exponential Linear Units:\nPerform the linear unit element-wise on the input tensor X\nusing formula:\nmax\n(\n0\n,\nx\n)\n+\nmin\n(\n0\n,\nalpha\n*\n(\nexp\n(\nx\n\/\nalpha\n)\n-\n1\n))",
            "Attributes":"alpha - FLOAT\n(default is\n'1.0'\n):\nThe Alpha value in Celu formula which control the shape of the unit. The default value is 1.0.",
            "Inputs":"X\n(heterogeneous) -\nT\n:\nInput tensor",
            "Outputs":"Y\n(heterogeneous) -\nT\n:\nOutput tensor",
            "Type constraints":"T\nin (\ntensor(float)\n):\nConstrain input and output types to float32 tensors."
        }
    },
    {
        "name":"CenterCropPad",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__CenterCropPad.html#l-onnx-doc-centercroppad",
        "details":{
            "Summary":"Center crop or pad an input to given dimensions.\nThe crop\/pad dimensions can be specified for a subset of the\naxes\n; unspecified dimensions will remain unchanged.\nIf the input dimensions are larger than the target crop dimensions, a centered cropping window will be extracted\nfrom the input. The starting value for the cropping window is rounded down, which means that if the difference\nbetween the input shape and the crop shape is odd, the cropping window will be shifted half a pixel to the left\nof the input center.\nIf the input dimensions are smaller than the target crop dimensions, the input will be padded equally on both sides\nto center it in the output. In cases where the total number of padding pixels is odd, an additional pixel will be\nadded to the right side.\nThe padding value used is zero.",
            "Attributes":"axes - INTS\n:\nIf provided, it specifies a subset of axes that âshapeâ refer to. If not provided, all axes are assumed [0, 1, â¦, r-1], where r = rank(data). Negative value means counting dimensions from the back. Accepted range is [-r, r-1], where r = rank(data). Behavior is undefined if an axis is repeated.",
            "Inputs":"input_data\n(heterogeneous) -\nT\n:\nInput to extract the centered crop from.\nshape\n(heterogeneous) -\nTind\n:\n1-D tensor representing the cropping window dimensions.",
            "Outputs":"output_data\n(heterogeneous) -\nT\n:\nOutput data.",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(bool)\n,\ntensor(complex128)\n,\ntensor(complex64)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(string)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain input and output types to all tensor types.\nTind\nin (\ntensor(int32)\n,\ntensor(int64)\n):\nConstrain indices to integer types"
        }
    },
    {
        "name":"Clip",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Clip.html#l-onnx-doc-clip",
        "details":{
            "Summary":"Clip operator limits the given input within an interval. The interval is\nspecified by the inputs âminâ and âmaxâ. They default to\nnumeric_limits::lowest() and numeric_limits::max(), respectively.\nWhen âminâ is greater than âmaxâ, the clip operator sets all the âinputâ values to\nthe value of âmaxâ. Thus, this is equivalent to âMin(max, Max(input, min))â.",
            "Inputs":"Between 1 and 3 inputs.\ninput\n(heterogeneous) -\nT\n:\nInput tensor whose elements to be clipped\nmin\n(optional, heterogeneous) -\nT\n:\nMinimum value, under which element is replaced by min. It must be a scalar(tensor of empty shape).\nmax\n(optional, heterogeneous) -\nT\n:\nMaximum value, above which element is replaced by max. It must be a scalar(tensor of empty shape).",
            "Outputs":"output\n(heterogeneous) -\nT\n:\nOutput tensor with clipped input elements",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain input and output types to all numeric tensors.\nClip - 12 vs 13"
        }
    },
    {
        "name":"Col2Im",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Col2Im.html#l-onnx-doc-col2im",
        "details":{
            "Summary":"The operator rearranges column blocks back into a multidimensional image\nCol2Im behaves similarly to PyTorchâs fold\nhttps:\/\/pytorch.org\/docs\/stable\/generated\/torch.nn.Fold.html\n,\nbut it only supports\nbatched\nmulti-dimensional image tensors.\nAnother implementation in Python with N-dimension support can be found at\nhttps:\/\/github.com\/f-dangel\/unfoldNd\/\n.\nNOTE:\nAlthough specifying image_shape looks redundant because it could be calculated from\nconvolution formulas, it is required as input for more advanced scenarios as explained\nat PyTorchâs implementation (\nhttps:\/\/github.com\/pytorch\/pytorch\/blob\/master\/aten\/src\/ATen\/native\/Col2Im.cpp#L10\n)",
            "Attributes":"dilations - INTS\n:\n1-dimensional tensor with dilation value along each spatial axis of the image. If not present, the dilation defaults to 1 along each spatial axis of the image.\npads - INTS\n:\n1-dimensional tensor with padding value for the beginning and ending along each spatial axis, it can take any value greater than or equal to 0. The value represent the number of pixels added to the beginning and end part of the corresponding axis.\npads\nformat should be as follow [x1_begin, x2_beginâ¦x1_end, x2_end,â¦], where xi_begin is the number of pixels added at the beginning of axis\ni\nand xi_end is the number of pixels added at the end of axis\ni\n. If not present, the padding defaults to 0 along start and end of each spatial axis.\nstrides - INTS\n:\n1-dimensional tensor with stride value along each spatial axis. If not present, the stride defaults to 1 along each spatial axis.",
            "Inputs":"input\n(heterogeneous) -\nT\n:\nInput data tensor to be rearranged from column blocks back into an image. This is a 3-dimensional tensor containing [N, C * n-ary-product(block_shape), L], where N is batch dimension, C is image channel dimension and L is number of blocks.The blocks are enumerated in increasing lexicographic-order of their indices.For example, with an image-size 10\n20 and block-size 9\n18, there would be 2*3 blocks, enumerated in the order block(0, 0), block(0, 1), block(0, 2), block(1, 0), block(1, 1), block(1, 2).\nimage_shape\n(heterogeneous) -\ntensor(int64)\n:\nThe shape of the spatial dimensions of the image after rearranging the column blocks.This is a 1-dimensional tensor with size of at least 2, containing the value [H_img, W_img]  for a 2-D image or [dim_i1, dim_i2, â¦, dim_iN] for a N-D image.\nblock_shape\n(heterogeneous) -\ntensor(int64)\n:\nThe shape of the block to apply on the input.This is a 1-dimensional tensor of size of at least 2, containing the value [H_block, W_block]  for a 2-D image or [dim_b1, dim_b2, â¦, dim_bN] for a N-D block.This is the block-shape before dilation is applied to it.",
            "Outputs":"output\n(heterogeneous) -\nT\n:\nOutput tensor produced by rearranging blocks into an image.",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(bool)\n,\ntensor(complex128)\n,\ntensor(complex64)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(string)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain input and output types to all numeric tensor types."
        }
    },
    {
        "name":"Compress",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Compress.html#l-onnx-doc-compress",
        "details":{
            "Summary":"Selects slices from an input tensor along a given axis where condition evaluates to True for each axis index.\nIn case axis is not provided, input is flattened before elements are selected.\nCompress behaves like numpy.compress:\nhttps:\/\/docs.scipy.org\/doc\/numpy\/reference\/generated\/numpy.compress.html",
            "Attributes":"axis - INT\n:\n(Optional) Axis along which to take slices. If not specified, input is flattened before elements being selected. Negative value means counting dimensions from the back. Accepted range is [-r, r-1] where r = rank(input).",
            "Inputs":"input\n(heterogeneous) -\nT\n:\nTensor of rank r >= 1.\ncondition\n(heterogeneous) -\nT1\n:\nRank 1 tensor of booleans to indicate which slices or data elements to be selected. Its length can be less than the input length along the axis or the flattened input size if axis is not specified. In such cases data slices or elements exceeding the condition length are discarded.",
            "Outputs":"output\n(heterogeneous) -\nT\n:\nTensor of rank r if axis is specified. Otherwise output is a Tensor of rank 1.",
            "Type constraints":"T\nin (\ntensor(bool)\n,\ntensor(complex128)\n,\ntensor(complex64)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(string)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain input and output types to all tensor types.\nT1\nin (\ntensor(bool)\n):\nConstrain to boolean tensors.\nCompress - 9 vs 11"
        }
    },
    {
        "name":"Concat",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Concat.html#l-onnx-doc-concat",
        "details":{
            "Summary":"Concatenate a list of tensors into a single tensor. All input tensors must have the same shape, except for the dimension size of the axis to concatenate on.",
            "Attributes":"axis - INT\n(required) :\nWhich axis to concat on. A negative value means counting dimensions from the back. Accepted range is [-r, r-1] where r = rank(inputs)â¦",
            "Inputs":"Between 1 and 2147483647 inputs.\ninputs\n(variadic, heterogeneous) -\nT\n:\nList of tensors for concatenation",
            "Outputs":"concat_result\n(heterogeneous) -\nT\n:\nConcatenated tensor",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(bool)\n,\ntensor(complex128)\n,\ntensor(complex64)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(string)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain output types to any tensor type.\nConcat - 11 vs 13"
        }
    },
    {
        "name":"ConcatFromSequence",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__ConcatFromSequence.html#l-onnx-doc-concatfromsequence",
        "details":{
            "Summary":"Concatenate a sequence of tensors into a single tensor.\nAll input tensors must have the same shape, except for the dimension size of the axis to concatenate on.\nBy default ânew_axisâ is 0, the behavior is similar to numpy.concatenate.\nWhen ânew_axisâ is 1, the behavior is similar to numpy.stack.",
            "Attributes":"axis - INT\n(required) :\nWhich axis to concat on. Accepted range in\n[-r,\nr\n-\n1]\n, where\nr\nis the rank of input tensors. When\nnew_axis\nis 1, accepted range is\n[-r\n-\n1,\nr]\n.\nnew_axis - INT\n(default is\n'0'\n):\nInsert and concatenate on a new axis or not, default 0 means do not insert new axis.",
            "Inputs":"input_sequence\n(heterogeneous) -\nS\n:\nSequence of tensors for concatenation",
            "Outputs":"concat_result\n(heterogeneous) -\nT\n:\nConcatenated tensor",
            "Type constraints":"S\nin (\nseq(tensor(bool))\n,\nseq(tensor(complex128))\n,\nseq(tensor(complex64))\n,\nseq(tensor(double))\n,\nseq(tensor(float))\n,\nseq(tensor(float16))\n,\nseq(tensor(int16))\n,\nseq(tensor(int32))\n,\nseq(tensor(int64))\n,\nseq(tensor(int8))\n,\nseq(tensor(string))\n,\nseq(tensor(uint16))\n,\nseq(tensor(uint32))\n,\nseq(tensor(uint64))\n,\nseq(tensor(uint8))\n):\nConstrain input types to any tensor type.\nT\nin (\ntensor(bool)\n,\ntensor(complex128)\n,\ntensor(complex64)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(string)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain output types to any tensor type."
        }
    },
    {
        "name":"Constant",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Constant.html#l-onnx-doc-constant",
        "details":{
            "Summary":"This operator produces a constant tensor. Exactly one of the provided attributes, either value, sparse_value,\nor value_* must be specified.",
            "Attributes":"sparse_value - SPARSE_TENSOR\n:\nThe value for the elements of the output tensor in sparse format.\nvalue - TENSOR\n:\nThe value for the elements of the output tensor.\nvalue_float - FLOAT\n:\nThe value for the sole element for the scalar, float32, output tensor.\nvalue_floats - FLOATS\n:\nThe values for the elements for the 1D, float32, output tensor.\nvalue_int - INT\n:\nThe value for the sole element for the scalar, int64, output tensor.\nvalue_ints - INTS\n:\nThe values for the elements for the 1D, int64, output tensor.\nvalue_string - STRING\n:\nThe value for the sole element for the scalar, UTF-8 string, output tensor.\nvalue_strings - STRINGS\n:\nThe values for the elements for the 1D, UTF-8 string, output tensor.",
            "Outputs":"output\n(heterogeneous) -\nT\n:\nOutput tensor containing the same value of the provided tensor.",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(bool)\n,\ntensor(complex128)\n,\ntensor(complex64)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(float4e2m1)\n,\ntensor(float8e4m3fn)\n,\ntensor(float8e4m3fnuz)\n,\ntensor(float8e5m2)\n,\ntensor(float8e5m2fnuz)\n,\ntensor(float8e8m0)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int4)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(string)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint4)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain input and output types to all tensor types.\nConstant - 23 vs 24"
        }
    },
    {
        "name":"ConstantOfShape",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__ConstantOfShape.html#l-onnx-doc-constantofshape",
        "details":{
            "Summary":"Generate a tensor with given value and shape.",
            "Attributes":"value - TENSOR\n:\n(Optional) The value of the output elements.Should be a one-element tensor. If not specified, it defaults to a tensor of value 0 and datatype float32",
            "Inputs":"input\n(heterogeneous) -\nT1\n:\n1D tensor. The shape of the expected output tensor. If empty tensor is given, the output would be a scalar. All values must be >= 0.",
            "Outputs":"output\n(heterogeneous) -\nT2\n:\nOutput tensor of shape specified by âinputâ.If attribute âvalueâ is specified, the value and datatype of the output tensor is taken from âvalueâ.If attribute âvalueâ is not specified, the value in the output defaults to 0, and the datatype defaults to float32.",
            "Type constraints":"T1\nin (\ntensor(int64)\n):\nConstrain input types.\nT2\nin (\ntensor(bfloat16)\n,\ntensor(bool)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(float4e2m1)\n,\ntensor(float8e4m3fn)\n,\ntensor(float8e4m3fnuz)\n,\ntensor(float8e5m2)\n,\ntensor(float8e5m2fnuz)\n,\ntensor(float8e8m0)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int4)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint4)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain output types to be numerics or boolean.\nConstantOfShape - 23 vs 24"
        }
    },
    {
        "name":"Conv",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Conv.html#l-onnx-doc-conv",
        "details":{
            "Summary":"The convolution operator consumes an input tensor and a filter, and\ncomputes the output.",
            "Attributes":"auto_pad - STRING\n(default is\n'NOTSET'\n):\nauto_pad must be either NOTSET, SAME_UPPER, SAME_LOWER or VALID. Where default value is NOTSET, which means explicit padding is used. SAME_UPPER or SAME_LOWER mean pad the input so that\noutput_shape[i]\n=\nceil(input_shape[i]\n\/\nstrides[i])\nfor each axis\ni\n. The padding is split between the two sides equally or almost equally (depending on whether it is even or odd). In case the padding is an odd number, the extra padding is added at the end for SAME_UPPER and at the beginning for SAME_LOWER.\ndilations - INTS\n:\ndilation value along each spatial axis of the filter. If not present, the dilation defaults is 1 along each spatial axis.\ngroup - INT\n(default is\n'1'\n):\nnumber of groups input channels and output channels are divided into.\nkernel_shape - INTS\n:\nThe shape of the convolution kernel. If not present, should be inferred from input W.\npads - INTS\n:\nPadding for the beginning and ending along each spatial axis, it can take any value greater than or equal to 0. The value represent the number of pixels added to the beginning and end part of the corresponding axis.\npads\nformat should be as follow [x1_begin, x2_beginâ¦x1_end, x2_end,â¦], where xi_begin the number of pixels added at the beginning of axis\ni\nand xi_end, the number of pixels added at the end of axis\ni\n. This attribute cannot be used simultaneously with auto_pad attribute. If not present, the padding defaults to 0 along start and end of each spatial axis.\nstrides - INTS\n:\nStride along each spatial axis. If not present, the stride defaults is 1 along each spatial axis.",
            "Inputs":"Between 2 and 3 inputs.\nX\n(heterogeneous) -\nT\n:\nInput data tensor from previous layer; has size (N x C x H x W), where N is the batch size, C is the number of channels, and H and W are the height and width. Note that this is for the 2D image. Otherwise the size is (N x C x D1 x D2 â¦ x Dn). Optionally, if dimension denotation is in effect, the operation expects input data tensor to arrive with the dimension denotation of [DATA_BATCH, DATA_CHANNEL, DATA_FEATURE, DATA_FEATURE â¦].\nW\n(heterogeneous) -\nT\n:\nThe weight tensor that will be used in the convolutions; has size (M x C\/group x kH x kW), where C is the number of channels, and kH and kW are the height and width of the kernel, and M is the number of feature maps. For more than 2 dimensions, the kernel shape will be (M x C\/group x k1 x k2 x â¦ x kn), where (k1 x k2 x â¦ kn) is the dimension of the kernel. Optionally, if dimension denotation is in effect, the operation expects the weight tensor to arrive with the dimension denotation of [FILTER_OUT_CHANNEL, FILTER_IN_CHANNEL, FILTER_SPATIAL, FILTER_SPATIAL â¦]. Assuming zero based indices for the shape array, X.shape[1] == (W.shape[1] * group) == C and W.shape[0] mod G == 0. Or in other words FILTER_IN_CHANNEL multiplied by the number of groups should be equal to DATA_CHANNEL and the number of feature maps M should be a multiple of the number of groups G.\nB\n(optional, heterogeneous) -\nT\n:\nOptional 1D bias to be added to the convolution, has size of M.",
            "Outputs":"Y\n(heterogeneous) -\nT\n:\nOutput data tensor that contains the result of the convolution. The output dimensions are functions of the kernel size, stride size, and pad lengths.",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n):\nConstrain input and output types to float tensors.\nConv - 11 vs 22"
        }
    },
    {
        "name":"ConvInteger",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__ConvInteger.html#l-onnx-doc-convinteger",
        "details":{
            "Summary":"The integer convolution operator consumes an input tensor, its zero-point, a filter, and its zero-point,\nand computes the output. The production MUST never overflow. The accumulation may overflow if and only if in 32 bits.",
            "Attributes":"auto_pad - STRING\n(default is\n'NOTSET'\n):\nauto_pad must be either NOTSET, SAME_UPPER, SAME_LOWER or VALID. Where default value is NOTSET, which means explicit padding is used. SAME_UPPER or SAME_LOWER mean pad the input so that\noutput_shape[i]\n=\nceil(input_shape[i]\n\/\nstrides[i])\nfor each axis\ni\n. The padding is split between the two sides equally or almost equally (depending on whether it is even or odd). In case the padding is an odd number, the extra padding is added at the end for SAME_UPPER and at the beginning for SAME_LOWER.\ndilations - INTS\n:\ndilation value along each spatial axis of the filter. If not present, the dilation defaults to 1 along each axis.\ngroup - INT\n(default is\n'1'\n):\nnumber of groups input channels and output channels are divided into. default is 1.\nkernel_shape - INTS\n:\nThe shape of the convolution kernel. If not present, should be inferred from input âwâ.\npads - INTS\n:\nPadding for the beginning and ending along each spatial axis, it can take any value greater than or equal to 0.The value represent the number of pixels added to the beginning and end part of the corresponding axis.\npads\nformat should be as follow [x1_begin, x2_beginâ¦x1_end, x2_end,â¦], where xi_begin the number ofpixels added at the beginning of axis\ni\nand xi_end, the number of pixels added at the end of axis\ni\n.This attribute cannot be used simultaneously with auto_pad attribute. If not present, the padding defaultsto 0 along start and end of each spatial axis.\nstrides - INTS\n:\nStride along each spatial axis. If not present, the stride defaults to 1 along each axis.",
            "Inputs":"Between 2 and 4 inputs.\nx\n(heterogeneous) -\nT1\n:\nInput data tensor from previous layer; has size (N x C x H x W), where N is the batch size, C is the number of channels, and H and W are the height and width. Note that this is for the 2D image. Otherwise the size is (N x C x D1 x D2 â¦ x Dn). Optionally, if dimension denotation is in effect, the operation expects input data tensor to arrive with the dimension denotation of [DATA_BATCH, DATA_CHANNEL, DATA_FEATURE, DATA_FEATURE â¦].\nw\n(heterogeneous) -\nT2\n:\nThe weight tensor that will be used in the convolutions; has size (M x C\/group x kH x kW), where C is the number of channels, and kH and kW are the height and width of the kernel, and M is the number of feature maps. For more than 2 dimensions, the kernel shape will be (M x C\/group x k1 x k2 x â¦ x kn), where (k1 x k2 x â¦ kn) is the dimension of the kernel. Optionally, if dimension denotation is in effect, the operation expects the weight tensor to arrive with the dimension denotation of [FILTER_OUT_CHANNEL, FILTER_IN_CHANNEL, FILTER_SPATIAL, FILTER_SPATIAL â¦]. X.shape[1] == (W.shape[1] * group) == C (assuming zero based indices for the shape array). Or in other words FILTER_IN_CHANNEL should be equal to DATA_CHANNEL.\nx_zero_point\n(optional, heterogeneous) -\nT1\n:\nZero point tensor for input âxâ. Itâs optional and default value is 0. Itâs a scalar, which means a per-tensor\/layer quantization.\nw_zero_point\n(optional, heterogeneous) -\nT2\n:\nZero point tensor for input âwâ. Itâs optional and default value is 0.  It could be a scalar or a 1-D tensor, which means a per-tensor\/layer or per output channel quantization. If itâs a 1-D tensor, its number of elements should be equal to the number of output channels (M)",
            "Outputs":"y\n(heterogeneous) -\nT3\n:\nOutput data tensor that contains the result of the convolution. The output dimensions are functions of the kernel size, stride size, and pad lengths.",
            "Type constraints":"T1\nin (\ntensor(int8)\n,\ntensor(uint8)\n):\nConstrain input x and its zero point data type to 8-bit integer tensor.\nT2\nin (\ntensor(int8)\n,\ntensor(uint8)\n):\nConstrain input w and its zero point data type to 8-bit integer tensor.\nT3\nin (\ntensor(int32)\n):\nConstrain output y data type to 32-bit integer tensor."
        }
    },
    {
        "name":"ConvTranspose",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__ConvTranspose.html#l-onnx-doc-convtranspose",
        "details":{
            "Summary":"The convolution transpose operator consumes an input tensor and a filter,\nand computes the output.\nIf the pads parameter is provided the shape of the output is calculated via the following equation:\noutput_shape[i] = stride[i] * (input_size[i] - 1) + output_padding[i] + ((kernel_shape[i] - 1) * dilations[i] + 1) - pads[start_i] - pads[end_i]\noutput_shape can also be explicitly specified in which case pads values are auto generated using these equations:\ntotal_padding[i] = stride[i] * (input_size[i] - 1) + output_padding[i] + ((kernel_shape[i] - 1) * dilations[i] + 1) - output_shape[i]\nIf (auto_pads == SAME_UPPER): pads[start_i] = total_padding[i]\/2; pads[end_i] = total_padding[i] - (total_padding[i]\/2)\nElse: pads[start_i] = total_padding[i] - (total_padding[i]\/2); pads[end_i] = (total_padding[i]\/2).",
            "Attributes":"auto_pad - STRING\n(default is\n'NOTSET'\n):\nauto_pad must be either NOTSET, SAME_UPPER, SAME_LOWER or VALID. Where default value is NOTSET, which means explicit padding is used. SAME_UPPER or SAME_LOWER mean pad the input so that\noutput_shape[i]\n=\ninput_shape[i]\n*\nstrides[i]\nfor each axis\ni\n. The padding is split between the two sides equally or almost equally (depending on whether it is even or odd). In case the padding is an odd number, the extra padding is added at the end for SAME_UPPER and at the beginning for SAME_LOWER.\ndilations - INTS\n:\ndilation value along each spatial axis of the filter. If not present, the dilation defaults to 1 along each spatial axis.\ngroup - INT\n(default is\n'1'\n):\nnumber of groups input channels and output channels are divided into.\nkernel_shape - INTS\n:\nThe shape of the convolution kernel. If not present, should be inferred from input W.\noutput_padding - INTS\n:\nAdditional elements added to the side with higher coordinate indices in the output. Each padding value in âoutput_paddingâ must be less than the corresponding stride\/dilation dimension. By default, this attribute is a zero vector. Note that this attribute doesnât directly affect the computed output values. It only controls the selection of the computed values, so changing this attribute only adds or removes output elements. If âoutput_shapeâ is explicitly provided, âoutput_paddingâ does not contribute additional size to âoutput_shapeâ but participates in the computation of the needed padding amount. This is also called adjs or adjustment in some frameworks.\noutput_shape - INTS\n:\nThe shape of the output can be explicitly set which will cause pads values to be auto generated. If output_shape is specified pads values are ignored. See doc for details for equations to generate pads. Note that the output_shape attribute value should not include dimensions for batch size and channels, which are automatically inferred.\npads - INTS\n:\nPadding for the beginning and ending along each spatial axis, it can take any value greater than or equal to 0. The value represent the number of pixels added to the beginning and end part of the corresponding axis.\npads\nformat should be as follow [x1_begin, x2_beginâ¦x1_end, x2_end,â¦], where xi_begin the number of pixels added at the beginning of axis\ni\nand xi_end, the number of pixels added at the end of axis\ni\n. This attribute cannot be used simultaneously with auto_pad attribute. If not present, the padding defaults to 0 along start and end of each spatial axis.\nstrides - INTS\n:\nStride along each spatial axis. If not present, the stride defaults to 1 along each spatial axis.",
            "Inputs":"Between 2 and 3 inputs.\nX\n(heterogeneous) -\nT\n:\nInput data tensor from previous layer; has size (N x C x H x W), where N is the batch size, C is the number of channels, and H and W are the height and width. Note that this is for the 2D image. Otherwise the size is (N x C x D1 x D2 â¦ x Dn)\nW\n(heterogeneous) -\nT\n:\nThe weight tensor that will be used in the convolutions; has size (C x M\/group x kH x kW), where C is the number of channels, and kH and kW are the height and width of the kernel, and M is the number of feature maps. For more than 2 dimensions, the weight shape will be (C x M\/group x k1 x k2 x â¦ x kn), where (k1 x k2 x â¦ x kn) is the dimension of the kernel. The number of channels in the output should be equal to W.shape[1] * group (assuming zero based indices of the shape array)\nB\n(optional, heterogeneous) -\nT\n:\nOptional 1D bias to be added to the convolution, has size of M.",
            "Outputs":"Y\n(heterogeneous) -\nT\n:\nOutput data tensor that contains the result of the convolution. The output dimensions are functions of the kernel size, stride size, pad lengths and group count. The number of channels in the output should be equal to W.shape[1] * group (assuming zero based indices of the shape array)",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n):\nConstrain input and output types to float tensors.\nConvTranspose - 11 vs 22"
        }
    },
    {
        "name":"Cos",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Cos.html#l-onnx-doc-cos",
        "details":{
            "Summary":"Calculates the cosine of the given input tensor, element-wise.",
            "Inputs":"input\n(heterogeneous) -\nT\n:\nInput tensor",
            "Outputs":"output\n(heterogeneous) -\nT\n:\nThe cosine of the input tensor computed element-wise",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n):\nConstrain input and output types to float tensors.\nCos - 7 vs 22"
        }
    },
    {
        "name":"Cosh",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Cosh.html#l-onnx-doc-cosh",
        "details":{
            "Summary":"Calculates the hyperbolic cosine of the given input tensor element-wise.",
            "Inputs":"input\n(heterogeneous) -\nT\n:\nInput tensor",
            "Outputs":"output\n(heterogeneous) -\nT\n:\nThe hyperbolic cosine values of the input tensor computed element-wise",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n):\nConstrain input and output types to float tensors.\nCosh - 9 vs 22"
        }
    },
    {
        "name":"CumSum",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__CumSum.html#l-onnx-doc-cumsum",
        "details":{
            "Summary":"Performs cumulative sum of the input elements along the given axis.\nBy default, it will do the sum inclusively meaning the first element is copied as is.\nThrough an\nexclusive\nattribute, this behavior can change to exclude the first element.\nIt can also perform summation in the opposite direction of the axis. For that, set\nreverse\nattribute to 1.\nExample:\ninput_x\n=\n[\n1\n,\n2\n,\n3\n]\naxis\n=\n0\noutput\n=\n[\n1\n,\n3\n,\n6\n]\nexclusive\n=\n1\noutput\n=\n[\n0\n,\n1\n,\n3\n]\nexclusive\n=\n0\nreverse\n=\n1\noutput\n=\n[\n6\n,\n5\n,\n3\n]\nexclusive\n=\n1\nreverse\n=\n1\noutput\n=\n[\n5\n,\n3\n,\n0\n]",
            "Attributes":"exclusive - INT\n(default is\n'0'\n):\nIf set to 1 will return exclusive sum in which the top element is not included. In other terms, if set to 1, the j-th output element would be the sum of the first (j-1) elements. Otherwise, it would be the sum of the first j elements.\nreverse - INT\n(default is\n'0'\n):\nIf set to 1 will perform the sums in reverse direction.",
            "Inputs":"x\n(heterogeneous) -\nT\n:\nAn input tensor that is to be processed.\naxis\n(heterogeneous) -\nT2\n:\nA 0-D tensor. Must be in the range [-rank(x), rank(x)-1]. Negative value means counting dimensions from the back.",
            "Outputs":"y\n(heterogeneous) -\nT\n:\nOutput tensor of the same type as âxâ with cumulative sums of the xâs elements",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(uint32)\n,\ntensor(uint64)\n):\nConstrain input and output types to high-precision numeric tensors.\nT2\nin (\ntensor(int32)\n,\ntensor(int64)\n):\naxis tensor can be int32 or int64 only\nCumSum - 11 vs 14"
        }
    },
    {
        "name":"DFT",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__DFT.html#l-onnx-doc-dft",
        "details":{
            "Summary":"Computes the discrete Fourier Transform (DFT) of the input.\nAssuming the input has shape\n[M,\nN]\n, where\nN\nis the dimension over which the\nDFT is computed and\nM\ndenotes the conceptual âall other dimensions,â\nthe DFT\ny[m,\nk]\nof shape\n[M,\nN]\nis defined as\n\\[y[m, k] = \\sum_{n=0}^{N-1} e^{-2 \\pi j \\frac{k n}{N} } x[m, n] ,\\]\nand the inverse transform is defined as\n\\[x[m, n] = \\frac{1}{N} \\sum_{k=0}^{N-1} e^{2 \\pi j \\frac{k n}{N} } y[m, k] ,\\]\nwhere\n\\(j\\)\nis the imaginary unit.\nThe actual shape of the output is specified in the âoutputâ section.\nReference:\nhttps:\/\/docs.scipy.org\/doc\/scipy\/tutorial\/fft.html",
            "Attributes":"inverse - INT\n(default is\n'0'\n):\nWhether to perform the inverse discrete Fourier Transform. Default is 0, which corresponds to\nfalse\n.\nonesided - INT\n(default is\n'0'\n):\nIf\nonesided\nis\n1\nand input is real, only values for\nk\nin\n[0,\n1,\n2,\n...,\nfloor(n_fft\/2)\n+\n1]\nare returned because the real-to-complex Fourier transform satisfies the conjugate symmetry, i.e.,\nX[m,\nk]\n=\nX[m,\nn_fft-k]*\n, where\nm\ndenotes âall other dimensionsâ DFT was not applied on. If the input tensor is complex, onesided output is not possible. Value can be\n0\nor\n1\n. Default is\n0\n.",
            "Inputs":"Between 1 and 3 inputs.\ninput\n(heterogeneous) -\nT1\n:\nFor real input, the following shape is expected:\n[signal_dim0][signal_dim1][signal_dim2]...[signal_dimN][1]\n. For complex input, the following shape is expected:\n[signal_dim0][signal_dim1][signal_dim2]...[signal_dimN][2]\n. The final dimension represents the real and imaginary parts of the value in that order.\ndft_length\n(optional, heterogeneous) -\nT2\n:\nThe length of the signal as a scalar. If greater than the axis dimension, the signal will be zero-padded up to\ndft_length\n. If less than the axis dimension, only the first\ndft_length\nvalues will be used as the signal.\naxis\n(optional, heterogeneous) -\ntensor(int64)\n:\nThe axis as a scalar on which to perform the DFT. Default is\n-2\n(last signal axis). Negative value means counting dimensions from the back. Accepted range is\n\\([-r, -2] \\cup [0, r-2]\\)\nwhere\nr\n=\nrank(input)\n. The last dimension is for representing complex numbers and thus is an invalid axis.",
            "Outputs":"output\n(heterogeneous) -\nT1\n:\nThe Fourier Transform of the input vector. If\nonesided\nis\n0\n, the following shape is expected:\n[signal_dim0][signal_dim1][signal_dim2]...[signal_dimN][2]\n. If\naxis=0\nand\nonesided\nis\n1\n, the following shape is expected:\n[floor(signal_dim0\/2)+1][signal_dim1][signal_dim2]...[signal_dimN][2]\n. If\naxis=1\nand\nonesided\nis\n1\n, the following shape is expected:\n[signal_dim0][floor(signal_dim1\/2)+1][signal_dim2]...[signal_dimN][2]\n. If\naxis=N\nand\nonesided\nis\n1\n, the following shape is expected:\n[signal_dim0][signal_dim1][signal_dim2]...[floor(signal_dimN\/2)+1][2]\n. The\nsignal_dim\nat the specified\naxis\nis equal to the\ndft_length\n.",
            "Type constraints":"T1\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n):\nConstrain input and output types to float tensors.\nT2\nin (\ntensor(int32)\n,\ntensor(int64)\n):\nConstrain scalar length types to integers.\nDFT - 17 vs 20"
        }
    },
    {
        "name":"DeformConv",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__DeformConv.html#l-onnx-doc-deformconv",
        "details":{
            "Summary":"Performs deformable convolution as described in\nhttps:\/\/arxiv.org\/abs\/1703.06211\nand\nhttps:\/\/arxiv.org\/abs\/1811.11168\n.\nThis operator specification supports the general N-D case. Note that most common use cases have 2D or 3D data.",
            "Attributes":"dilations - INTS\n:\nDilation value along each spatial axis of the kernel. Default is 1 along each axis.\ngroup - INT\n(default is\n'1'\n):\nNumber of groups the input and output channels, C and oC, are divided into. C and oC must both be divisible by group. Default is 1.\nkernel_shape - INTS\n:\nShape of the convolution kernel. If not present, it is inferred from the shape of input W.\noffset_group - INT\n(default is\n'1'\n):\nNumber of groups of offset. C must be divisible by offset_group. Default is 1.\npads - INTS\n:\nPadding for the beginning and end along each spatial axis. The values represent the number of pixels added to the beginning and end of the corresponding axis and can take any nonnegative value. The format should be as follows: [x1_begin, x2_begin, â¦, x1_end, x2_end, â¦], where xi_begin is the number of pixels added at the beginning of axis\ni\nand xi_end is the number of pixels added at the end of axis\ni\n. Default is 0 along each axis.\nstrides - INTS\n:\nStride along each spatial axis. Default is 1 along each axis.",
            "Inputs":"Between 3 and 5 inputs.\nX\n(heterogeneous) -\nT\n:\nInput data tensor. For 2D image data, it has shape (N, C, H, W) where N is the batch size, C is the number of input channels, and H and W are the height and width. In general, the shape is (N, C, D1, D2, â¦ , Dn) for n-dimensional data, where D1 to Dn are the spatial dimension sizes. Most common use cases have n = 2 or 3.\nW\n(heterogeneous) -\nT\n:\nWeight tensor that will be used in the convolutions. It has shape (oC, C\/group, kH, kW), where oC is the number of output channels and kH and kW are the kernel height and width. For more than 2 dimensions, it has shape (oC, C\/group, k1, k2, â¦ , kn).\noffset\n(heterogeneous) -\nT\n:\nOffset tensor denoting the offset for the sampling locations in the convolution kernel. It has shape (N, offset_group * kH * kW * 2, oH, oW) for 2D data or (N, offset_group * k1 * k2 * â¦ * kn * n, o1, o2, â¦ , on) for nD data. Use linear interpolationfor fractional offset values. Sampling locations outside of the padded input tensor gives zero.\nB\n(optional, heterogeneous) -\nT\n:\nOptional 1D bias of length oC to be added to the convolution. Default is a tensor of zeros.\nmask\n(optional, heterogeneous) -\nT\n:\nThe mask tensor to be applied to each position in the convolution kernel. It has shape (N, offset_group * kH * kW, oH, oW) for 2D data or (N, offset_group * k1 * k2 * â¦ * kn * n, o1, o2, â¦ , on) for nD data. Default is a tensor of ones.",
            "Outputs":"Y\n(heterogeneous) -\nT\n:\nOutput data tensor that contains the result of convolution. It has shape (N, oC, oH, oW) for 2D data or (N, oC, o1, o2, â¦, on) for nD data",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n):\nConstrain input and output types to float tensors.\nDeformConv - 19 vs 22"
        }
    },
    {
        "name":"DepthToSpace",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__DepthToSpace.html#l-onnx-doc-depthtospace",
        "details":{
            "Summary":"DepthToSpace rearranges (permutes) data from depth into blocks of spatial data.\nThis is the reverse transformation of SpaceToDepth. More specifically, this op outputs a copy of\nthe input tensor where values from the depth dimension are moved in spatial blocks to the height\nand width dimensions. By default,\nmode\n=\nDCR\n.\nIn the DCR mode, elements along the depth dimension from the input tensor are rearranged in the\nfollowing order: depth, column, and then row. The output y is computed from the input x as below:\nb\n,\nc\n,\nh\n,\nw\n=\nx\n.\nshape\ntmp\n=\nnp\n.\nreshape\n(\nx\n,\n[\nb\n,\nblocksize\n,\nblocksize\n,\nc\n\/\/\n(\nblocksize\n**\n2\n),\nh\n,\nw\n])\ntmp\n=\nnp\n.\ntranspose\n(\ntmp\n,\n[\n0\n,\n3\n,\n4\n,\n1\n,\n5\n,\n2\n])\ny\n=\nnp\n.\nreshape\n(\ntmp\n,\n[\nb\n,\nc\n\/\/\n(\nblocksize\n**\n2\n),\nh\n*\nblocksize\n,\nw\n*\nblocksize\n])\nIn the CRD mode, elements along the depth dimension from the input tensor are rearranged in the\nfollowing order: column, row, and the depth. The output y is computed from the input x as below:\nb\n,\nc\n,\nh\n,\nw\n=\nx\n.\nshape\ntmp\n=\nnp\n.\nreshape\n(\nx\n,\n[\nb\n,\nc\n\/\/\n(\nblocksize\n**\n2\n),\nblocksize\n,\nblocksize\n,\nh\n,\nw\n])\ntmp\n=\nnp\n.\ntranspose\n(\ntmp\n,\n[\n0\n,\n1\n,\n4\n,\n2\n,\n5\n,\n3\n])\ny\n=\nnp\n.\nreshape\n(\ntmp\n,\n[\nb\n,\nc\n\/\/\n(\nblocksize\n**\n2\n),\nh\n*\nblocksize\n,\nw\n*\nblocksize\n])",
            "Attributes":"blocksize - INT\n(required) :\nBlocks of [blocksize, blocksize] are moved.\nmode - STRING\n(default is\n'DCR'\n):\nDCR (default) for depth-column-row order re-arrangement. Use CRD for column-row-depth order.",
            "Inputs":"input\n(heterogeneous) -\nT\n:\nInput tensor of [N,C,H,W], where N is the batch axis, C is the channel or depth, H is the height and W is the width.",
            "Outputs":"output\n(heterogeneous) -\nT\n:\nOutput tensor of [N, C\/(blocksize * blocksize), H * blocksize, W * blocksize].",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(bool)\n,\ntensor(complex128)\n,\ntensor(complex64)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(string)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain input and output types to all tensor types.\nDepthToSpace - 11 vs 13"
        }
    },
    {
        "name":"DequantizeLinear",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__DequantizeLinear.html#l-onnx-doc-dequantizelinear",
        "details":{
            "Summary":"The linear dequantization operator. It consumes a quantized tensor, a scale, and a zero point to compute the\nfull-precision tensor. The dequantization formula is\ny\n=\n(x\n-\nx_zero_point)\n*\nx_scale\n.\nx_scale\nand\nx_zero_point\nmust have the same shape, determining the quantizationâs granularity: a scalar for per-tensor\/per-layer quantization,\na 1-D tensor for per-axis quantization, or have a rank identical to the input for blocked quantization.\nSee QuantizeLinear for details on quantization granularity.\nx_zero_point\nand\nx\nmust have the same type.\nx\nand\ny\nmust have the same shape. In the case of dequantizing\nint32\n, thereâs no zero point (zero point is supposed to be 0).\nzero-point\nis usually not used in the case of float8 and 4-bit types quantization, but the dequantization formula remains the same\nfor consistency. The output type is determined by the attribute\noutput_dtype\n. If\noutput_dtype\nis not supplied then the output type\nis the same as\nx_scale\n. The output type also determines the precision of the multiplication operation.",
            "Attributes":"axis - INT\n(default is\n'1'\n):\n(Optional) The axis of the dequantizing dimension of the input tensor. Used for per-axis and blocked quantization. Negative value means counting dimensions from the back. Accepted range is\n[-r,\nr-1]\nwhere\nr\n=\nrank(input)\n.\nblock_size - INT\n(default is\n'0'\n):\n(Optional) The size of the quantization block (number of times every scale is replicated). Used only for blocked quantization. The block size is a positive integer. Given\nx\nshape\n(D0,\n...,\nDi,\n...,\nDn)\n,\ny_scale\nshape\n(S0,\n...\nSi,\n...Sn)\nand\naxis=i\n, the accepted range is\n[ceil(Di\/Si),\nceil(Di\/(Si-1))-1]\noutput_dtype - INT\n(default is\n'0'\n):\n(Optional) The output data type. If not supplied, the output data type is inferred from\nx_scale\ndata type (\nT2\n)",
            "Inputs":"Between 2 and 3 inputs.\nx\n(heterogeneous) -\nT1\n:\nN-D quantized input tensor to be de-quantized.\nx_scale\n(heterogeneous) -\nT2\n:\nScale for input\nx\n. For per-tensor\/layer dequantization the scale is a scalar, for per per-axis dequantization it is a 1-D Tensor and for blocked dequantization it has the same shape as the input, except for one dimension in which blocking is performed.\nx_zero_point\n(optional, heterogeneous) -\nT1\n:\nZero point for input\nx\n. Shape must match x_scale. Itâs optional. Zero point is 0 when itâs not specified.",
            "Outputs":"y\n(heterogeneous) -\nT3\n:\nN-D full precision output tensor. It has the same shape as input\nx\n. The data type is specified by the\noutput_dtype\nattribute or, in its absence, the type of\nx_scale\n.",
            "Type constraints":"T1\nin (\ntensor(float4e2m1)\n,\ntensor(float8e4m3fn)\n,\ntensor(float8e4m3fnuz)\n,\ntensor(float8e5m2)\n,\ntensor(float8e5m2fnuz)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int4)\n,\ntensor(int8)\n,\ntensor(uint16)\n,\ntensor(uint4)\n,\ntensor(uint8)\n):\nThe type of the inputs âx_zero_pointâ and âxâ.\nT2\nin (\ntensor(bfloat16)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(float8e8m0)\n):\nThe type of the input âx_scaleâ.\nT3\nin (\ntensor(bfloat16)\n,\ntensor(float)\n,\ntensor(float16)\n):\nThe type of the output âyâ.\nDequantizeLinear - 23 vs 24"
        }
    },
    {
        "name":"Det",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Det.html#l-onnx-doc-det",
        "details":{
            "Summary":"Det calculates determinant of a square matrix or batches of square matrices.\nDet takes one input tensor of shape\n[*,\nM,\nM]\n, where\n*\nis zero or more batch dimensions,\nand the inner-most 2 dimensions form square matrices.\nThe output is a tensor of shape\n[*]\n, containing the determinants of all input submatrices.\ne.g., When the input is 2-D, the output is a scalar(shape is empty:\n[]\n).",
            "Inputs":"X\n(heterogeneous) -\nT\n:\nInput tensor",
            "Outputs":"Y\n(heterogeneous) -\nT\n:\nOutput tensor",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n):\nConstrain input and output types to floating-point tensors.\nDet - 11 vs 22"
        }
    },
    {
        "name":"Div",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Div.html#l-onnx-doc-div",
        "details":{
            "Summary":"Performs element-wise binary division (with Numpy-style broadcasting support).\nThis operator supports\nmultidirectional (i.e., Numpy-style) broadcasting\n; for more details please check\nBroadcasting in ONNX\n.\n(Opset 14 change): Extend supported types to include uint8, int8, uint16, and int16.",
            "Inputs":"A\n(heterogeneous) -\nT\n:\nFirst operand.\nB\n(heterogeneous) -\nT\n:\nSecond operand.",
            "Outputs":"C\n(heterogeneous) -\nT\n:\nResult, has same element type as two inputs",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain input and output types to all numeric tensors.\nDiv - 13 vs 14"
        }
    },
    {
        "name":"Dropout",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Dropout.html#l-onnx-doc-dropout",
        "details":{
            "Summary":"Dropout takes an input floating-point tensor, an optional input ratio (floating-point scalar) and an optional input training_mode (boolean scalar). It produces two tensor outputs,\noutput (floating-point tensor) and mask (optional\nTensor<bool>\n). If\ntraining_mode\nis true then the output Y will be a random dropout;\nNote that this Dropout scales the masked input data by the following equation, so to convert the trained model into inference mode,\nthe user can simply not pass\ntraining_mode\ninput or set it to false.\noutput\n=\nscale\n*\ndata\n*\nmask\n,\nwhere\nscale\n=\n1.\n\/\n(\n1.\n-\nratio\n)\n.\nThis operator has\noptional\ninputs\/outputs. See\nONNX IR\nfor more details about the representation of optional arguments. An empty string may be used in the place of an actual argumentâs name to indicate a missing argument. Trailing optional arguments (those not followed by an argument that is present) may also be simply omitted.",
            "Attributes":"seed - INT\n:\n(Optional) Seed to the random generator, if not specified we will auto generate one.",
            "Inputs":"Between 1 and 3 inputs.\ndata\n(heterogeneous) -\nT\n:\nThe input data as Tensor.\nratio\n(optional, heterogeneous) -\nT1\n:\nThe ratio of random dropout, with value in [0, 1). If set to 0, the output would be a simple copy of the input. If itâs non-zero, output will be a random dropout of the scaled input, which is typically the case during training. It is an optional value, if not specified it will default to 0.5.\ntraining_mode\n(optional, heterogeneous) -\nT2\n:\nIf set to true then it indicates dropout is being used for training. It is an optional value hence unless specified explicitly, it is false. If it is false, ratio is ignored and the operation mimics inference mode where nothing will be dropped from the input data and if mask is requested as output it will contain all ones.",
            "Outputs":"Between 1 and 2 outputs.\noutput\n(heterogeneous) -\nT\n:\nThe output.\nmask\n(optional, heterogeneous) -\nT2\n:\nThe output mask.",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(float8e4m3fn)\n,\ntensor(float8e4m3fnuz)\n,\ntensor(float8e5m2)\n,\ntensor(float8e5m2fnuz)\n):\nConstrain input and output types to float tensors.\nT1\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(float8e4m3fn)\n,\ntensor(float8e4m3fnuz)\n,\ntensor(float8e5m2)\n,\ntensor(float8e5m2fnuz)\n):\nConstrain input âratioâ types to float tensors.\nT2\nin (\ntensor(bool)\n):\nConstrain output âmaskâ types to boolean tensors.\nDropout - 13 vs 22"
        }
    },
    {
        "name":"DynamicQuantizeLinear",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__DynamicQuantizeLinear.html#l-onnx-doc-dynamicquantizelinear",
        "details":{
            "Summary":"A Function to fuse calculation for Scale, Zero Point and FP32->8Bit conversion of FP32 Input data.\nOutputs Scale, ZeroPoint and Quantized Input for a given FP32 Input.\nScale is calculated as:\ny_scale\n=\n(\nmaximum\n(\n0\n,\nmax\n(\nx\n))\n-\nminimum\n(\n0\n,\nmin\n(\nx\n)))\n\/\n(\nqmax\n-\nqmin\n)\nwhere qmax and qmin are max and min values for quantization range i.e. [0, 255] in case of uint8\ndata range is adjusted to include 0.\nZero point is calculated as:\nintermediate_zero_point\n=\nqmin\n-\nmin\n(\nx\n)\n\/\ny_scale\ny_zero_point\n=\ncast\n(\nround\n(\nsaturate\n(\nitermediate_zero_point\n)))\nwhere qmax and qmin are max and min values for quantization range .i.e [0, 255] in case of uint8\nfor saturation, it saturates to [0, 255] if itâs uint8, or [-127, 127] if itâs int8. Right now only uint8 is supported.\nrounding to nearest ties to even.\nData quantization formula is:\ny\n=\nsaturate\n(\nround\n(\nx\n\/\ny_scale\n)\n+\ny_zero_point\n)\nfor saturation, it saturates to [0, 255] if itâs uint8, or [-127, 127] if itâs int8. Right now only uint8 is supported.\nrounding to nearest ties to even.\nFunction Body\nÂ¶\nThe function definition for this operator.\n<\ndomain\n:\n\"\"\n,\nopset_import\n:\n[\n\"\"\n:\n11\n]\n>\nDynamicQuantizeLinear\n(\nx\n)\n=>\n(\ny\n,\ny_scale\n,\ny_zero_point\n)\n{\nQ_Min\n=\nConstant\n<\nvalue\n:\ntensor\n=\nfloat\n{\n0\n}\n>\n()\nQ_Max\n=\nConstant\n<\nvalue\n:\ntensor\n=\nfloat\n{\n255\n}\n>\n()\nX_Min\n=\nReduceMin\n<\nkeepdims\n:\nint\n=\n0\n>\n(\nx\n)\nX_Min_Adjusted\n=\nMin\n(\nX_Min\n,\nQ_Min\n)\nX_Max\n=\nReduceMax\n<\nkeepdims\n:\nint\n=\n0\n>\n(\nx\n)\nX_Max_Adjusted\n=\nMax\n(\nX_Max\n,\nQ_Min\n)\nX_Range\n=\nSub\n(\nX_Max_Adjusted\n,\nX_Min_Adjusted\n)\nScale\n=\nDiv\n(\nX_Range\n,\nQ_Max\n)\nMin_Scaled\n=\nDiv\n(\nX_Min_Adjusted\n,\nScale\n)\nInitial_ZeroPoint_FP\n=\nSub\n(\nQ_Min\n,\nMin_Scaled\n)\nClipped_ZeroPoint_FP\n=\nClip\n(\nInitial_ZeroPoint_FP\n,\nQ_Min\n,\nQ_Max\n)\nRounded_ZeroPoint_FP\n=\nRound\n(\nClipped_ZeroPoint_FP\n)\nZeropoint\n=\nCast\n<\nto\n:\nint\n=\n2\n>\n(\nRounded_ZeroPoint_FP\n)\ny_scale\n=\nIdentity\n(\nScale\n)\ny_zero_point\n=\nIdentity\n(\nZeropoint\n)\ny\n=\nQuantizeLinear\n(\nx\n,\nScale\n,\nZeropoint\n)\n}",
            "Inputs":"x\n(heterogeneous) -\nT1\n:\nInput tensor",
            "Outputs":"y\n(heterogeneous) -\nT2\n:\nQuantized output tensor\ny_scale\n(heterogeneous) -\ntensor(float)\n:\nOutput scale. Itâs a scalar, which means a per-tensor\/layer quantization.\ny_zero_point\n(heterogeneous) -\nT2\n:\nOutput zero point. Itâs a scalar, which means a per-tensor\/layer quantization.",
            "Type constraints":"T1\nin (\ntensor(float)\n):\nConstrain âxâ to float tensor.\nT2\nin (\ntensor(uint8)\n):\nConstrain ây_zero_pointâ and âyâ to 8-bit unsigned integer tensor."
        }
    },
    {
        "name":"Einsum",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Einsum.html#l-onnx-doc-einsum",
        "details":{
            "Summary":"An einsum of the form\nterm1,\nterm2\n->\noutput-term\nproduces an output tensor using the following equation\noutput\n[\noutput\n-\nterm\n]\n=\nreduce\n-\nsum\n(\ninput1\n[\nterm1\n]\n*\ninput2\n[\nterm2\n]\n)\nwhere the reduce-sum performs a summation over all the indices occurring in the input terms (term1, term2)\nthat do not occur in the output-term.\nThe Einsum operator evaluates algebraic tensor operations on a sequence of tensors, using the Einstein summation\nconvention. The equation string contains a comma-separated sequence of lower case letters. Each term corresponds to\nan operand tensor, and the characters within the terms correspond to operands dimensions.\nThis sequence may be followed by â->â to separate the left and right hand side of the equation.\nIf the equation contains â->â followed by the right-hand side, the explicit (not classical) form of the Einstein\nsummation is performed, and the right-hand side indices indicate output tensor dimensions. In other cases,\noutput indices are (implicitly) set to the alphabetically sorted sequence of indices appearing exactly once in the\nequation.\nWhen a dimension character is repeated in the left-hand side, it represents summation along the dimension.\nThe equation may contain ellipsis (ââ¦â) to enable broadcasting. Ellipsis must indicate a fixed number of dimensions.\nSpecifically, every occurrence of ellipsis in the equation must represent the same number of dimensions.\nThe right-hand side may contain exactly one ellipsis. In implicit mode, the ellipsis dimensions are set to the\nbeginning of the output. The equation string may contain space (U+0020) character.",
            "Attributes":"equation - STRING\n(required) :\nEinsum expression string.",
            "Inputs":"Between 1 and 2147483647 inputs.\nInputs\n(variadic, heterogeneous) -\nT\n:\nOperands",
            "Outputs":"Output\n(heterogeneous) -\nT\n:\nOutput tensor",
            "Type constraints":"T\nin (\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain input and output types to all numerical tensor types."
        }
    },
    {
        "name":"Elu",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Elu.html#l-onnx-doc-elu",
        "details":{
            "Summary":"Elu takes one input data (Tensor\n) and produces one output data\n(Tensor\n) where the function\nf(x)\n=\nalpha\n*\n(exp(x)\n-\n1.)\nfor\nx\n<\n0\n,\nf(x)\n=\nx\nfor\nx\n>=\n0\n., is applied to the tensor elementwise.\nFunction Body\nÂ¶\nThe function definition for this operator.\n<\ndomain\n:\n\"\"\n,\nopset_import\n:\n[\n\"\"\n:\n18\n]\n>\nElu\n<\nalpha\n>\n(\nX\n)\n=>\n(\nY\n)\n{\nAlpha\n=\nConstant\n<\nvalue_float\n:\nfloat\n=\n@alpha\n>\n()\nAlphaCast\n=\nCastLike\n(\nAlpha\n,\nX\n)\nZero\n=\nConstant\n<\nvalue\n:\ntensor\n=\nfloat\n{\n0\n}\n>\n()\nZeroCast\n=\nCastLike\n(\nZero\n,\nX\n)\nOne\n=\nConstant\n<\nvalue\n:\ntensor\n=\nfloat\n{\n1\n}\n>\n()\nOneCast\n=\nCastLike\n(\nOne\n,\nX\n)\nXLessThanZero\n=\nLess\n(\nX\n,\nZeroCast\n)\nExpX\n=\nExp\n(\nX\n)\nExpXSubOne\n=\nSub\n(\nExpX\n,\nOneCast\n)\nAlphaMulExpXSubOne\n=\nMul\n(\nAlphaCast\n,\nExpXSubOne\n)\nY\n=\nWhere\n(\nXLessThanZero\n,\nAlphaMulExpXSubOne\n,\nX\n)\n}",
            "Attributes":"alpha - FLOAT\n(default is\n'1.0'\n):\nCoefficient of ELU.",
            "Inputs":"X\n(heterogeneous) -\nT\n:\nInput tensor",
            "Outputs":"Y\n(heterogeneous) -\nT\n:\nOutput tensor",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n):\nConstrain input and output types to float tensors.\nElu - 6 vs 22"
        }
    },
    {
        "name":"Equal",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Equal.html#l-onnx-doc-equal",
        "details":{
            "Summary":"Returns the tensor resulted from performing the\nequal\nlogical operation\nelementwise on the input tensors\nA\nand\nB\n(with Numpy-style broadcasting support).\nThis operator supports\nmultidirectional (i.e., Numpy-style) broadcasting\n; for more details please check\nBroadcasting in ONNX\n.",
            "Inputs":"A\n(heterogeneous) -\nT\n:\nFirst input operand for the logical operator.\nB\n(heterogeneous) -\nT\n:\nSecond input operand for the logical operator.",
            "Outputs":"C\n(heterogeneous) -\nT1\n:\nResult tensor.",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(bool)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(string)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain input types to all (non-complex) tensors.\nT1\nin (\ntensor(bool)\n):\nConstrain output to boolean tensor.\nEqual - 13 vs 19"
        }
    },
    {
        "name":"Erf",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Erf.html#l-onnx-doc-erf",
        "details":{
            "Summary":"Computes the error function of the given input tensor element-wise.",
            "Inputs":"input\n(heterogeneous) -\nT\n:\nInput tensor",
            "Outputs":"output\n(heterogeneous) -\nT\n:\nThe error function of the input tensor computed element-wise. It has the same shape and type of the input.",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain input and output types to all numeric tensors.\nErf - 9 vs 13"
        }
    },
    {
        "name":"Exp",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Exp.html#l-onnx-doc-exp",
        "details":{
            "Summary":"Calculates the exponential of the given input tensor, element-wise.",
            "Inputs":"input\n(heterogeneous) -\nT\n:\nInput tensor",
            "Outputs":"output\n(heterogeneous) -\nT\n:\nThe exponential of the input tensor computed element-wise",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n):\nConstrain input and output types to float tensors.\nExp - 6 vs 13"
        }
    },
    {
        "name":"Expand",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Expand.html#l-onnx-doc-expand",
        "details":{
            "Summary":"Broadcast the input tensor following the given shape and the broadcast rule.\nThe broadcast rule is similar to numpy.array(input) * numpy.ones(shape):\nDimensions are right alignment;\nTwo corresponding dimensions must have the same value, or one of them is equal to 1.\nAlso, this operator is similar to numpy.broadcast_to(input, shape),\nbut the major difference is numpy.broadcast_to() does not allow shape to be smaller than input.size().\nIt is possible that the output.shape is not equal to shape, when some dimensions in shape is equal to 1,\nor the shape.ndim < input.shape.ndim.",
            "Inputs":"input\n(heterogeneous) -\nT\n:\nInput tensor\nshape\n(heterogeneous) -\ntensor(int64)\n:\nA 1-D tensor indicates the shape you want to expand to, following the broadcast rule",
            "Outputs":"output\n(heterogeneous) -\nT\n:\nOutput tensor",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(bool)\n,\ntensor(complex128)\n,\ntensor(complex64)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(string)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain input and output types to all tensors.\nExpand - 8 vs 13"
        }
    },
    {
        "name":"EyeLike",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__EyeLike.html#l-onnx-doc-eyelike",
        "details":{
            "Summary":"Generate a 2D tensor (matrix) with ones on the diagonal and zeros everywhere else. Only 2D\ntensors are supported, i.e. input T1 must be of rank 2. The shape of the output tensor is the\nsame as the input tensor. The data type can be specified by the âdtypeâ argument. If\nâdtypeâ is not specified, then the type of input tensor is used. By default, the main diagonal\nis populated with ones, but attribute âkâ can be used to populate upper or lower diagonals.\nThe âdtypeâ argument must be one of the data types specified in the âDataTypeâ enum field in the\nTensorProto message and be valid as an output type.",
            "Attributes":"dtype - INT\n:\n(Optional) The data type for the elements of the output tensor. If not specified, the data type of the input tensor T1 is used.\nk - INT\n(default is\n'0'\n):\n(Optional) Index of the diagonal to be populated with ones. Default is 0. If T2 is the output, this op sets T2[i, i+k] = 1. k = 0 populates the main diagonal, k > 0 populates an upper diagonal,  and k < 0 populates a lower diagonal.",
            "Inputs":"input\n(heterogeneous) -\nT1\n:\n2D input tensor to copy shape, and optionally, type information from.",
            "Outputs":"output\n(heterogeneous) -\nT2\n:\nOutput tensor, same shape as input tensor T1.",
            "Type constraints":"T1\nin (\ntensor(bfloat16)\n,\ntensor(bool)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain input types. Strings and complex are not supported.\nT2\nin (\ntensor(bfloat16)\n,\ntensor(bool)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain output types. Strings and complex are not supported.\nEyeLike - 9 vs 22"
        }
    },
    {
        "name":"Flatten",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Flatten.html#l-onnx-doc-flatten",
        "details":{
            "Summary":"Flattens the input tensor into a 2D matrix. If input tensor has shape\n(d_0, d_1, â¦ d_n) then the output will have shape\n(d_0 X d_1 â¦ d_(axis-1), d_axis X d_(axis+1) â¦ X dn).",
            "Attributes":"axis - INT\n(default is\n'1'\n):\nIndicate up to which input dimensions (exclusive) should be flattened to the outer dimension of the output. The value for axis must be in the range [-r, r], where r is the rank of the input tensor. Negative value means counting dimensions from the back. When axis = 0, the shape of the output tensor is (1, (d_0 X d_1 â¦ d_n), where the shape of the input tensor is (d_0, d_1, â¦ d_n).",
            "Inputs":"input\n(heterogeneous) -\nT\n:\nA tensor of rank >= axis.",
            "Outputs":"output\n(heterogeneous) -\nT\n:\nA 2D tensor with the contents of the input tensor, with input dimensions up to axis flattened to the outer dimension of the output and remaining input dimensions flattened into the inner dimension of the output.",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(bool)\n,\ntensor(complex128)\n,\ntensor(complex64)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(float4e2m1)\n,\ntensor(float8e4m3fn)\n,\ntensor(float8e4m3fnuz)\n,\ntensor(float8e5m2)\n,\ntensor(float8e5m2fnuz)\n,\ntensor(float8e8m0)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int4)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(string)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint4)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain input and output to all tensor types up to IRv12.\nFlatten - 23 vs 24"
        }
    },
    {
        "name":"Floor",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Floor.html#l-onnx-doc-floor",
        "details":{
            "Summary":"Floor takes one input data (Tensor\n) and produces one output data\n(Tensor\n) where the floor is, y = floor(x), is applied to\nthe tensor elementwise. If x is integral, +0, -0, NaN,  or infinite, x itself is returned.",
            "Inputs":"X\n(heterogeneous) -\nT\n:\nInput tensor",
            "Outputs":"Y\n(heterogeneous) -\nT\n:\nOutput tensor",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n):\nConstrain input and output types to float tensors.\nFloor - 6 vs 13"
        }
    },
    {
        "name":"GRU",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__GRU.html#l-onnx-doc-gru",
        "details":{
            "Summary":"Computes an one-layer GRU. This operator is usually supported via some custom\nimplementation such as CuDNN.\nNotations:\nX\n- input tensor\nz\n- update gate\nr\n- reset gate\nh\n- hidden gate\nt\n- time step (t-1 means previous time step)\nW[zrh]\n- W parameter weight matrix for update, reset, and hidden gates\nR[zrh]\n- R recurrence weight matrix for update, reset, and hidden gates\nWb[zrh]\n- W bias vectors for update, reset, and hidden gates\nRb[zrh]\n- R bias vectors for update, reset, and hidden gates\nWB[zrh]\n- W parameter weight matrix for backward update, reset, and hidden gates\nRB[zrh]\n- R recurrence weight matrix for backward update, reset, and hidden gates\nWBb[zrh]\n- W bias vectors for backward update, reset, and hidden gates\nRBb[zrh]\n- R bias vectors for backward update, reset, and hidden gates\nH\n- Hidden state\nnum_directions\n- 2 if direction == bidirectional else 1\nActivation functions:\nRelu(x)                - max(0, x)\nTanh(x)                - (1 - e^{-2x})\/(1 + e^{-2x})\nSigmoid(x)             - 1\/(1 + e^{-x})\nNOTE:\nBelow are optional\nAffine(x)              - alpha * x + beta\nLeakyRelu(x)           - x if x >= 0 else alpha * x\nThresholdedRelu(x)     - x if x >= alpha else 0\nScaledTanh(x)          - alpha * Tanh(beta * x)\nHardSigmoid(x)         - min(max(alpha * x + beta, 0), 1)\nElu(x)                 - x if x >= 0 else alpha * (e^x - 1)\nSoftsign(x)            - x\/(1 + |x|)\nSoftplus(x)            - log(1 + e^x)\nEquations (Default: f=Sigmoid, g=Tanh):\nzt = f(Xt*(Wz^T) + Ht-1*(Rz^T) + Wbz + Rbz)\nrt = f(Xt*(Wr^T) + Ht-1*(Rr^T) + Wbr + Rbr)\nht = g(Xt*(Wh^T) + (rt (.) Ht-1)*(Rh^T) + Rbh + Wbh) # default, when linear_before_reset = 0\nht = g(Xt*(Wh^T) + (rt (.) (Ht-1*(Rh^T) + Rbh)) + Wbh) # when linear_before_reset != 0\nHt = (1 - zt) (.) ht + zt (.) Ht-1\nThis operator has\noptional\ninputs\/outputs. See\nONNX IR\nfor more details about the representation of optional arguments. An empty string may be used in the place of an actual argumentâs name to indicate a missing argument. Trailing optional arguments (those not followed by an argument that is present) may also be simply omitted.",
            "Attributes":"activation_alpha - FLOATS\n:\nOptional scaling values used by some activation functions. The values are consumed in the order of activation functions, for example (f, g, h) in LSTM. Default values are the same as of corresponding ONNX operators.For example with LeakyRelu, the default alpha is 0.01.\nactivation_beta - FLOATS\n:\nOptional scaling values used by some activation functions. The values are consumed in the order of activation functions, for example (f, g, h) in LSTM. Default values are the same as of corresponding ONNX operators.\nactivations - STRINGS\n:\nA list of 2 (or 4 if bidirectional) activation functions for update, reset, and hidden gates. The activation functions must be one of the activation functions specified above. Optional: See the equations for default if not specified.\nclip - FLOAT\n:\nCell clip threshold. Clipping bounds the elements of a tensor in the range of [-threshold, +threshold] and is applied to the input of activations. No clip if not specified.\ndirection - STRING\n(default is\n'forward'\n):\nSpecify if the RNN is forward, reverse, or bidirectional. Must be one of forward (default), reverse, or bidirectional.\nhidden_size - INT\n:\nNumber of neurons in the hidden layer\nlayout - INT\n(default is\n'0'\n):\nThe shape format of inputs X, initial_h and outputs Y, Y_h. If 0, the following shapes are expected: X.shape = [seq_length, batch_size, input_size], Y.shape = [seq_length, num_directions, batch_size, hidden_size], initial_h.shape = Y_h.shape = [num_directions, batch_size, hidden_size]. If 1, the following shapes are expected: X.shape = [batch_size, seq_length, input_size], Y.shape = [batch_size, seq_length, num_directions, hidden_size], initial_h.shape = Y_h.shape = [batch_size, num_directions, hidden_size].\nlinear_before_reset - INT\n(default is\n'0'\n):\nWhen computing the output of the hidden gate, apply the linear transformation before multiplying by the output of the reset gate.",
            "Inputs":"Between 3 and 6 inputs.\nX\n(heterogeneous) -\nT\n:\nThe input sequences packed (and potentially padded) into one 3-D tensor with the shape of\n[seq_length,\nbatch_size,\ninput_size]\n.\nW\n(heterogeneous) -\nT\n:\nThe weight tensor for the gates. Concatenation of\nW[zrh]\nand\nWB[zrh]\n(if bidirectional) along dimension 0. This tensor has shape\n[num_directions,\n3*hidden_size,\ninput_size]\n.\nR\n(heterogeneous) -\nT\n:\nThe recurrence weight tensor. Concatenation of\nR[zrh]\nand\nRB[zrh]\n(if bidirectional) along dimension 0. This tensor has shape\n[num_directions,\n3*hidden_size,\nhidden_size]\n.\nB\n(optional, heterogeneous) -\nT\n:\nThe bias tensor for the gates. Concatenation of\n[Wb[zrh],\nRb[zrh]]\nand\n[WBb[zrh],\nRBb[zrh]]\n(if bidirectional) along dimension 0. This tensor has shape\n[num_directions,\n6*hidden_size]\n. Optional: If not specified - assumed to be 0\nsequence_lens\n(optional, heterogeneous) -\nT1\n:\nOptional tensor specifying lengths of the sequences in a batch. If not specified - assumed all sequences in the batch to have length\nseq_length\n. It has shape\n[batch_size]\n.\ninitial_h\n(optional, heterogeneous) -\nT\n:\nOptional initial value of the hidden. If not specified - assumed to be 0. It has shape\n[num_directions,\nbatch_size,\nhidden_size]\n.",
            "Outputs":"Between 0 and 2 outputs.\nY\n(optional, heterogeneous) -\nT\n:\nA tensor that concats all the intermediate output values of the hidden. It has shape\n[seq_length,\nnum_directions,\nbatch_size,\nhidden_size]\n.\nY_h\n(optional, heterogeneous) -\nT\n:\nThe last output value of the hidden. It has shape\n[num_directions,\nbatch_size,\nhidden_size]\n.",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n):\nConstrain input and output types to float tensors.\nT1\nin (\ntensor(int32)\n):\nConstrain seq_lens to integer tensor.\nGRU - 14 vs 22"
        }
    },
    {
        "name":"Gather",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Gather.html#l-onnx-doc-gather",
        "details":{
            "Summary":"Given\ndata\ntensor of rank r >= 1, and\nindices\ntensor of rank q, gather\nentries of the axis dimension of\ndata\n(by default outer-most one as axis=0) indexed by\nindices\n, and concatenates\nthem in an output tensor of rank q + (r - 1).\nIt is an indexing operation that indexes into the input\ndata\nalong a single (specified) axis.\nEach entry in\nindices\nproduces a\nr-1\ndimensional slice of the input tensor.\nThe entire operation produces, conceptually, a\nq\n-dimensional tensor of\nr-1\ndimensional slices,\nwhich is arranged into a\nq\n+\n(r-1)\n-dimensional tensor, with the\nq\ndimensions taking the\nplace of the original\naxis\nthat is being indexed into.\nThe following few examples illustrate how\nGather\nworks for specific shapes of\ndata\n,\nindices\n, and given value of\naxis\n:\ndata shape\nindices shape\naxis\noutput shape\noutput equation\n(P, Q)\n( )  (a scalar)\n0\n(Q)\noutput[q] = data[indices, q]\n(P, Q, R)\n( )  (a scalar)\n1\n(P, R)\noutput[p, r] = data[p, indices, r]\n(P, Q)\n(R, S)\n0\n(R, S, Q)\noutput[r, s, q] = data[ [indices[r, s], q]\n(P, Q)\n(R, S)\n1\n(P, R, S)\noutput[p, r, s] = data[ p, indices[r, s]]\nMore generally, if\naxis\n=\n0\n, let\nk\n=\nindices[i_{0},\n...,\ni_{q-1}]\nthen\noutput[i_{0},\n...,\ni_{q-1},\nj_{0},\n...,\nj_{r-2}]\n=\ninput[k\n,\nj_{0},\n...,\nj_{r-2}]\n:\ndata\n=\n[\n[\n1.0\n,\n1.2\n],\n[\n2.3\n,\n3.4\n],\n[\n4.5\n,\n5.7\n],\n]\nindices\n=\n[\n[\n0\n,\n1\n],\n[\n1\n,\n2\n],\n]\noutput\n=\n[\n[\n[\n1.0\n,\n1.2\n],\n[\n2.3\n,\n3.4\n],\n],\n[\n[\n2.3\n,\n3.4\n],\n[\n4.5\n,\n5.7\n],\n],\n]\nIf\naxis\n=\n1\n, let\nk\n=\nindices[i_{0},\n...,\ni_{q-1}]\nthen\noutput[j_{0},\ni_{0},\n...,\ni_{q-1},\nj_{1},\n...,\nj_{r-2}]\n=\ninput[j_{0},\nk,\nj_{1},\n...,\nj_{r-2}]\n:\ndata\n=\n[\n[\n1.0\n,\n1.2\n,\n1.9\n],\n[\n2.3\n,\n3.4\n,\n3.9\n],\n[\n4.5\n,\n5.7\n,\n5.9\n],\n]\nindices\n=\n[\n[\n0\n,\n2\n],\n]\naxis\n=\n1\n,\noutput\n=\n[\n[[\n1.0\n,\n1.9\n]],\n[[\n2.3\n,\n3.9\n]],\n[[\n4.5\n,\n5.9\n]],\n]",
            "Attributes":"axis - INT\n(default is\n'0'\n):\nWhich axis to gather on. Negative value means counting dimensions from the back. Accepted range is [-r, r-1] where r = rank(data).",
            "Inputs":"data\n(heterogeneous) -\nT\n:\nTensor of rank r >= 1.\nindices\n(heterogeneous) -\nTind\n:\nTensor of int32\/int64 indices, of any rank q. All index values are expected to be within bounds [-s, s-1] along axis of size s. It is an error if any of the index values are out of bounds.",
            "Outputs":"output\n(heterogeneous) -\nT\n:\nTensor of rank q + (r - 1).",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(bool)\n,\ntensor(complex128)\n,\ntensor(complex64)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(string)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain input and output types to any tensor type.\nTind\nin (\ntensor(int32)\n,\ntensor(int64)\n):\nConstrain indices to integer types\nGather - 11 vs 13"
        }
    },
    {
        "name":"GatherElements",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__GatherElements.html#l-onnx-doc-gatherelements",
        "details":{
            "Summary":"GatherElements takes two inputs\ndata\nand\nindices\nof the same rank r >= 1\nand an optional attribute\naxis\nthat identifies an axis of\ndata\n(by default, the outer-most axis, that is axis 0). It is an indexing operation\nthat produces its output by indexing into the input data tensor at index\npositions determined by elements of the\nindices\ntensor.\nIts output shape is the same as the shape of\nindices\nand consists of one value\n(gathered from the\ndata\n) for each element in\nindices\n.\nFor instance, in the 3-D case (r = 3), the output produced is determined\nby the following equations:\nout\n[\ni\n][\nj\n][\nk\n]\n=\ninput\n[\nindex\n[\ni\n][\nj\n][\nk\n]][\nj\n][\nk\n]\nif\naxis\n=\n0\n,\nout\n[\ni\n][\nj\n][\nk\n]\n=\ninput\n[\ni\n][\nindex\n[\ni\n][\nj\n][\nk\n]][\nk\n]\nif\naxis\n=\n1\n,\nout\n[\ni\n][\nj\n][\nk\n]\n=\ninput\n[\ni\n][\nj\n][\nindex\n[\ni\n][\nj\n][\nk\n]]\nif\naxis\n=\n2\n,\nThis operator is also the inverse of ScatterElements. It is similar to Torchâs gather operation.\nExample 1:\ndata\n=\n[\n[\n1\n,\n2\n],\n[\n3\n,\n4\n],\n]\nindices\n=\n[\n[\n0\n,\n0\n],\n[\n1\n,\n0\n],\n]\naxis\n=\n1\noutput\n=\n[\n[\n1\n,\n1\n],\n[\n4\n,\n3\n],\n]\nExample 2:\ndata\n=\n[\n[\n1\n,\n2\n,\n3\n],\n[\n4\n,\n5\n,\n6\n],\n[\n7\n,\n8\n,\n9\n],\n]\nindices\n=\n[\n[\n1\n,\n2\n,\n0\n],\n[\n2\n,\n0\n,\n0\n],\n]\naxis\n=\n0\noutput\n=\n[\n[\n4\n,\n8\n,\n3\n],\n[\n7\n,\n2\n,\n3\n],\n]",
            "Attributes":"axis - INT\n(default is\n'0'\n):\nWhich axis to gather on. Negative value means counting dimensions from the back. Accepted range is [-r, r-1] where r = rank(data).",
            "Inputs":"data\n(heterogeneous) -\nT\n:\nTensor of rank r >= 1.\nindices\n(heterogeneous) -\nTind\n:\nTensor of int32\/int64 indices, with the same rank r as the input. All index values are expected to be within bounds [-s, s-1] along axis of size s. It is an error if any of the index values are out of bounds.",
            "Outputs":"output\n(heterogeneous) -\nT\n:\nTensor of the same shape as indices.",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(bool)\n,\ntensor(complex128)\n,\ntensor(complex64)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(string)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain input and output types to any tensor type.\nTind\nin (\ntensor(int32)\n,\ntensor(int64)\n):\nConstrain indices to integer types\nGatherElements - 11 vs 13"
        }
    },
    {
        "name":"GatherND",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__GatherND.html#l-onnx-doc-gathernd",
        "details":{
            "Summary":"Given\ndata\ntensor of rank\nr\n>= 1,\nindices\ntensor of rank\nq\n>= 1, and\nbatch_dims\ninteger\nb\n, this operator gathers\nslices of\ndata\ninto an output tensor of rank\nq\n+\nr\n-\nindices_shape[-1]\n-\n1\n-\nb\n.\nindices\nis an q-dimensional integer tensor, best thought of as a\n(q-1)\n-dimensional tensor of index-tuples into\ndata\n,\nwhere each element defines a slice of\ndata\nbatch_dims\n(denoted as\nb\n) is an integer indicating the number of batch dimensions, i.e the leading\nb\nnumber of dimensions of\ndata\ntensor and\nindices\nare representing the batches, and the gather starts from the\nb+1\ndimension.\nSome salient points about the inputsâ rank and shape:\nr >= 1 and q >= 1 are to be honored. There is no dependency condition to be met between ranks\nr\nand\nq\nThe first\nb\ndimensions of the shape of\nindices\ntensor and\ndata\ntensor must be equal.\nb < min(q, r) is to be honored.\nThe\nindices_shape[-1]\nshould have a value between 1 (inclusive) and rank\nr-b\n(inclusive)\nAll values in\nindices\nare expected to be within bounds [-s, s-1] along axis of size\ns\n(i.e.)\n-data_shape[i]\n<=\nindices[...,i]\n<=\ndata_shape[i]\n-\n1\n.\nIt is an error if any of the index values are out of bounds.\nThe output is computed as follows:\nThe output tensor is obtained by mapping each index-tuple in the\nindices\ntensor to the corresponding slice of the input\ndata\n.\nIf\nindices_shape[-1]\n>\nr-b\n=> error condition\nIf\nindices_shape[-1]\n==\nr-b\n, since the rank of\nindices\nis\nq\n,\nindices\ncan be thought of as\nN\n(q-b-1)\n-dimensional tensors\ncontaining 1-D tensors of dimension\nr-b\n, where\nN\nis an integer equals to the product of 1 and all the elements in the batch dimensions\nof the indices_shape. Let us think of each such\nr-b\nranked tensor as\nindices_slice\n. Each\nscalar value\ncorresponding to\ndata[0:b-1,indices_slice]\nis filled into the corresponding location of the\n(q-b-1)\n-dimensional tensor to form the\noutput\ntensor (Example 1 below)\nIf\nindices_shape[-1]\n<\nr-b\n, since the rank of\nindices\nis\nq\n,\nindices\ncan be thought of as\nN\n(q-b-1)\n-dimensional tensor\ncontaining 1-D tensors of dimension\n<\nr-b\n. Let us think of each such tensors as\nindices_slice\n. Each\ntensor slice\ncorresponding\nto\ndata[0:b-1,\nindices_slice\n,\n:]\nis filled into the corresponding location of the\n(q-b-1)\n-dimensional tensor\nto form the\noutput\ntensor (Examples 2, 3, 4 and 5 below)\nThis operator is the inverse of\nScatterND\n.\nExample 1\nbatch_dims\n=\n0\ndata\n=\n[[\n0\n,\n1\n],[\n2\n,\n3\n]]\n# data_shape    = [2, 2]\nindices\n=\n[[\n0\n,\n0\n],[\n1\n,\n1\n]]\n# indices_shape = [2, 2]\noutput\n=\n[\n0\n,\n3\n]\n# output_shape  = [2]\nExample 2\nbatch_dims\n=\n0\ndata\n=\n[[\n0\n,\n1\n],[\n2\n,\n3\n]]\n# data_shape    = [2, 2]\nindices\n=\n[[\n1\n],[\n0\n]]\n# indices_shape = [2, 1]\noutput\n=\n[[\n2\n,\n3\n],[\n0\n,\n1\n]]\n# output_shape  = [2, 2]\nExample 3\nbatch_dims\n=\n0\ndata\n=\n[[[\n0\n,\n1\n],[\n2\n,\n3\n]],[[\n4\n,\n5\n],[\n6\n,\n7\n]]]\n# data_shape    = [2, 2, 2]\nindices\n=\n[[\n0\n,\n1\n],[\n1\n,\n0\n]]\n# indices_shape = [2, 2]\noutput\n=\n[[\n2\n,\n3\n],[\n4\n,\n5\n]]\n# output_shape  = [2, 2]\nExample 4\nbatch_dims\n=\n0\ndata\n=\n[[[\n0\n,\n1\n],[\n2\n,\n3\n]],[[\n4\n,\n5\n],[\n6\n,\n7\n]]]\n# data_shape    = [2, 2, 2]\nindices\n=\n[[[\n0\n,\n1\n]],[[\n1\n,\n0\n]]]\n# indices_shape = [2, 1, 2]\noutput\n=\n[[[\n2\n,\n3\n]],[[\n4\n,\n5\n]]]\n# output_shape  = [2, 1, 2]\nExample 5\nbatch_dims\n=\n1\ndata\n=\n[[[\n0\n,\n1\n],[\n2\n,\n3\n]],[[\n4\n,\n5\n],[\n6\n,\n7\n]]]\n# data_shape    = [2, 2, 2]\nindices\n=\n[[\n1\n],[\n0\n]]\n# indices_shape = [2, 1]\noutput\n=\n[[\n2\n,\n3\n],[\n4\n,\n5\n]]\n# output_shape  = [2, 2]",
            "Attributes":"batch_dims - INT\n(default is\n'0'\n):\nThe number of batch dimensions. The gather of indexing starts from dimension of data[batch_dims:]",
            "Inputs":"data\n(heterogeneous) -\nT\n:\nTensor of rank r >= 1.\nindices\n(heterogeneous) -\ntensor(int64)\n:\nTensor of rank q >= 1. All index values are expected to be within bounds [-s, s-1] along axis of size s. It is an error if any of the index values are out of bounds.",
            "Outputs":"output\n(heterogeneous) -\nT\n:\nTensor of rank q + r - indices_shape[-1] - 1.",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(bool)\n,\ntensor(complex128)\n,\ntensor(complex64)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(string)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain input and output types to any tensor type.\nGatherND - 12 vs 13"
        }
    },
    {
        "name":"Gelu",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Gelu.html#l-onnx-doc-gelu",
        "details":{
            "Summary":"Gelu takes one input data (Tensor\n) and produces one\noutput data (Tensor\n) where the gaussian error linear units function,\n\\(y = 0.5 * x * (1 + erf(x\/sqrt(2)))\\)\nis applied to the tensor elementwise.\nIf the attribute âapproximateâ is set to âtanhâ, the function estimation,\n\\(y = 0.5 * x * (1 + Tanh(sqrt(2\/\\pi) * (x + 0.044715 * x^3)))\\)\nis used and applied\nto the tensor elementwise.",
            "Attributes":"approximate - STRING\n(default is\n'none'\n):\nGelu approximation algorithm:\n\"tanh\"\n,\n\"none\"\n(default).\n\"none\"\n: do not use approximation.\n\"tanh\"\n: use tanh approximation.",
            "Inputs":"X\n(heterogeneous) -\nT\n:\nInput tensor",
            "Outputs":"Y\n(heterogeneous) -\nT\n:\nOutput tensor",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n):\nConstrain input and output types to float tensors."
        }
    },
    {
        "name":"Gemm",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Gemm.html#l-onnx-doc-gemm",
        "details":{
            "Summary":"General Matrix multiplication:\nhttps:\/\/en.wikipedia.org\/wiki\/Basic_Linear_Algebra_Subprograms#Level_3\nAâ = transpose(A) if transA else A\nBâ = transpose(B) if transB else B\nCompute Y = alpha * Aâ * Bâ + beta * C, where input tensor A has shape (M, K) or (K, M),\ninput tensor B has shape (K, N) or (N, K), input tensor C is broadcastable to shape (M, N),\nand output tensor Y has shape (M, N). A will be transposed before doing the\ncomputation if attribute transA is non-zero, same for B and transB.\nThis operator supports\nunidirectional broadcasting\n(tensor C should be unidirectional broadcastable to tensor A * B); for more details please check\nBroadcasting in ONNX\n.\nThis operator has\noptional\ninputs\/outputs. See\nONNX IR\nfor more details about the representation of optional arguments. An empty string may be used in the place of an actual argumentâs name to indicate a missing argument. Trailing optional arguments (those not followed by an argument that is present) may also be simply omitted.",
            "Attributes":"alpha - FLOAT\n(default is\n'1.0'\n):\nScalar multiplier for the product of input tensors A * B.\nbeta - FLOAT\n(default is\n'1.0'\n):\nScalar multiplier for input tensor C.\ntransA - INT\n(default is\n'0'\n):\nWhether A should be transposed\ntransB - INT\n(default is\n'0'\n):\nWhether B should be transposed",
            "Inputs":"Between 2 and 3 inputs.\nA\n(heterogeneous) -\nT\n:\nInput tensor A. The shape of A should be (M, K) if transA is 0, or (K, M) if transA is non-zero.\nB\n(heterogeneous) -\nT\n:\nInput tensor B. The shape of B should be (K, N) if transB is 0, or (N, K) if transB is non-zero.\nC\n(optional, heterogeneous) -\nT\n:\nOptional input tensor C. If not specified, the computation is done as if C is a scalar 0. The shape of C should be unidirectional broadcastable to (M, N).",
            "Outputs":"Y\n(heterogeneous) -\nT\n:\nOutput tensor of shape (M, N).",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(uint32)\n,\ntensor(uint64)\n):\nConstrain input and output types to float\/int tensors.\nGemm - 11 vs 13"
        }
    },
    {
        "name":"GlobalAveragePool",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__GlobalAveragePool.html#l-onnx-doc-globalaveragepool",
        "details":{
            "Summary":"GlobalAveragePool consumes an input tensor X and applies average pooling across\nthe values in the same channel. This is equivalent to AveragePool with kernel size\nequal to the spatial dimension of input tensor.",
            "Inputs":"X\n(heterogeneous) -\nT\n:\nInput data tensor from the previous operator; dimensions for image case are (N x C x H x W), where N is the batch size, C is the number of channels, and H and W are the height and the width of the data. For non image case, the dimensions are in the form of (N x C x D1 x D2 â¦ Dn), where N is the batch size.",
            "Outputs":"Y\n(heterogeneous) -\nT\n:\nOutput data tensor from pooling across the input tensor. The output tensor has the same rank as the input. The first two dimensions of output shape are the same as the input (N x C), while the other dimensions are all 1.",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n):\nConstrain input and output types to float tensors.\nGlobalAveragePool - 1 vs 22"
        }
    },
    {
        "name":"GlobalLpPool",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__GlobalLpPool.html#l-onnx-doc-globallppool",
        "details":{
            "Summary":"GlobalLpPool consumes an input tensor X and applies lp pool pooling across\nthe values in the same channel. This is equivalent to LpPool with kernel size\nequal to the spatial dimension of input tensor.",
            "Attributes":"p - INT\n(default is\n'2'\n):\np value of the Lp norm used to pool over the input data.",
            "Inputs":"X\n(heterogeneous) -\nT\n:\nInput data tensor from the previous operator; dimensions for image case are (N x C x H x W), where N is the batch size, C is the number of channels, and H and W are the height and the width of the data. For non image case, the dimensions are in the form of (N x C x D1 x D2 â¦ Dn), where N is the batch size.",
            "Outputs":"Y\n(heterogeneous) -\nT\n:\nOutput data tensor from pooling across the input tensor. The output tensor has the same rank as the input. The first two dimensions of output shape are the same as the input (N x C), while the other dimensions are all 1.",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n):\nConstrain input and output types to float tensors.\nGlobalLpPool - 2 vs 22"
        }
    },
    {
        "name":"GlobalMaxPool",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__GlobalMaxPool.html#l-onnx-doc-globalmaxpool",
        "details":{
            "Summary":"GlobalMaxPool consumes an input tensor X and applies max pooling across\nthe values in the same channel. This is equivalent to MaxPool with kernel size\nequal to the spatial dimension of input tensor.",
            "Inputs":"X\n(heterogeneous) -\nT\n:\nInput data tensor from the previous operator; dimensions for image case are (N x C x H x W), where N is the batch size, C is the number of channels, and H and W are the height and the width of the data. For non image case, the dimensions are in the form of (N x C x D1 x D2 â¦ Dn), where N is the batch size.",
            "Outputs":"Y\n(heterogeneous) -\nT\n:\nOutput data tensor from pooling across the input tensor. The output tensor has the same rank as the input. The first two dimensions of output shape are the same as the input (N x C), while the other dimensions are all 1.",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n):\nConstrain input and output types to float tensors.\nGlobalMaxPool - 1 vs 22"
        }
    },
    {
        "name":"Greater",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Greater.html#l-onnx-doc-greater",
        "details":{
            "Summary":"Returns the tensor resulted from performing the\ngreater\nlogical operation\nelementwise on the input tensors\nA\nand\nB\n(with Numpy-style broadcasting support).\nThis operator supports\nmultidirectional (i.e., Numpy-style) broadcasting\n; for more details please check\nBroadcasting in ONNX\n.",
            "Inputs":"A\n(heterogeneous) -\nT\n:\nFirst input operand for the logical operator.\nB\n(heterogeneous) -\nT\n:\nSecond input operand for the logical operator.",
            "Outputs":"C\n(heterogeneous) -\nT1\n:\nResult tensor.",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain input types to all numeric tensors.\nT1\nin (\ntensor(bool)\n):\nConstrain output to boolean tensor.\nGreater - 9 vs 13"
        }
    },
    {
        "name":"GreaterOrEqual",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__GreaterOrEqual.html#l-onnx-doc-greaterorequal",
        "details":{
            "Summary":"Returns the tensor resulted from performing the\ngreater_equal\nlogical operation\nelementwise on the input tensors\nA\nand\nB\n(with Numpy-style broadcasting support).\nThis operator supports\nmultidirectional (i.e., Numpy-style) broadcasting\n; for more details please check\nBroadcasting in ONNX\n.\nFunction Body\nÂ¶\nThe function definition for this operator.\n<\ndomain\n:\n\"\"\n,\nopset_import\n:\n[\n\"\"\n:\n16\n]\n>\nGreaterOrEqual\n(\nA\n,\nB\n)\n=>\n(\nC\n)\n{\nO1\n=\nGreater\n(\nA\n,\nB\n)\nO2\n=\nEqual\n(\nA\n,\nB\n)\nC\n=\nOr\n(\nO1\n,\nO2\n)\n}",
            "Inputs":"A\n(heterogeneous) -\nT\n:\nFirst input operand for the logical operator.\nB\n(heterogeneous) -\nT\n:\nSecond input operand for the logical operator.",
            "Outputs":"C\n(heterogeneous) -\nT1\n:\nResult tensor.",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain input types to all numeric tensors.\nT1\nin (\ntensor(bool)\n):\nConstrain output to boolean tensor.\nGreaterOrEqual - 12 vs 16"
        }
    },
    {
        "name":"GridSample",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__GridSample.html#l-onnx-doc-gridsample",
        "details":{
            "Summary":"Given an input\nX\nand a flow-field\ngrid\n, computes the output\nY\nusing\nX\nvalues and pixel locations from the\ngrid\n.\nFor spatial input\nX\nwith shape (N, C, H, W), the\ngrid\nwill have shape (N, H_out, W_out, 2),\nthe output\nY\nwill have shape (N, C, H_out, W_out). For volumetric input\nX\nwith shape (N, C, D, H, W),\nthe\ngrid\nwill have shape (N, D_out, H_out, W_out, 3), the output\nY\nwill have shape (N, C, D_out, H_out, W_out).\nMore generally, for an input\nX\nof rank r+2 with shape (N, C, d1, d2, â¦, dr),\nthe\ngrid\nwill have shape (N, D1_out, D2_out, â¦, Dr_out, r), the output\nY\nwill have shape (N, C, D1_out, D2_out, â¦, Dr_out).\nThe tensor\nX\ncontains values at centers of square pixels (voxels, etc) locations such as (n, c, d1_in, d2_in, â¦, dr_in).\nThe (n, d1_out, d2_out, â¦, dr_out, :) values from the tensor\ngrid\nare the normalized positions for interpolating the values\nat the (n, c, d1_out, d2_out, â¦, dr_out) locations from the output tensor\nY\nusing a specified interpolation method (the mode)\nand a padding mode (for\ngrid\npositions falling outside the 2-dimensional image).\nFor example, the values in\ngrid[n,\nh_out,\nw_out,\n:]\nare size-2 vectors specifying normalized positions in the 2-dimensional space of\nX\n.\nThey are used to interpolate output values of\nY[n,\nc,\nh_out,\nw_out]\n.\nThe GridSample operator is often used in doing grid generator and sampler in the\nSpatial Transformer Networks\n.\nSee also in\ntorch.nn.functional.grid_sample\n.",
            "Attributes":"align_corners - INT\n(default is\n'0'\n):\nIf align_corners=1, the extrema (-1 and 1) are considered as referring to the center points of the inputâs corner pixels (voxels, etc.). If align_corners=0, they are instead considered as referring to the corner points of the inputâs corner pixels (voxels, etc.), making the sampling more resolution agnostic.\nmode - STRING\n(default is\n'linear'\n):\nThree interpolation modes: linear (default), nearest and cubic. The âlinearâ mode includes linear and N-linear interpolation modes depending on the number of spatial dimensions of the input tensor (i.e. linear for 1 spatial dimension, bilinear for 2 spatial dimensions, etc.). The âcubicâ mode also includes N-cubic interpolation modes following the same rules. The ânearestâ mode rounds to the nearest even index when the sampling point falls halfway between two indices.\npadding_mode - STRING\n(default is\n'zeros'\n):\nSupport padding modes for outside grid values:\nzeros\n(default),\nborder\n,\nreflection\n. zeros: use 0 for out-of-bound grid locations, border: use border values for out-of-bound grid locations, reflection: use values at locations reflected by the border for out-of-bound grid locations. If index 0 represents the margin pixel, the reflected value at index -1 will be the same as the value at index 1. For location far away from the border, it will keep being reflected until becoming in bound. If pixel location x = -3.5 reflects by border -1 and becomes xâ = 1.5, then reflects by border 1 and becomes xââ = 0.5.",
            "Inputs":"X\n(heterogeneous) -\nT1\n:\nInput tensor of rank r+2 that has shape (N, C, D1, D2, â¦, Dr), where N is the batch size, C is the number of channels, D1, D2, â¦, Dr are the spatial dimensions.\ngrid\n(heterogeneous) -\nT2\n:\nInput offset of shape (N, D1_out, D2_out, â¦, Dr_out, r), where D1_out, D2_out, â¦, Dr_out are the spatial dimensions of the grid and output, and r is the number of spatial dimensions. Grid specifies the sampling locations normalized by the input spatial dimensions. Therefore, it should have most values in the range of [-1, 1]. If the grid has values outside the range of [-1, 1], the corresponding outputs will be handled as defined by padding_mode. Following computer vision convention, the coordinates in the length-r location vector are listed from the innermost tensor dimension to the outermost, the opposite of regular tensor indexing.",
            "Outputs":"Y\n(heterogeneous) -\nT1\n:\nOutput tensor of rank r+2 that has shape (N, C, D1_out, D2_out, â¦, Dr_out) of the sampled values. For integer input types, intermediate values are computed as floating point and cast to integer at the end.",
            "Type constraints":"T1\nin (\ntensor(bfloat16)\n,\ntensor(bool)\n,\ntensor(complex128)\n,\ntensor(complex64)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(string)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain input\nX\nand output\nY\ntypes to all tensor types.\nT2\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n):\nConstrain grid types to float tensors.\nGridSample - 20 vs 22"
        }
    },
    {
        "name":"GroupNormalization",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__GroupNormalization.html#l-onnx-doc-groupnormalization",
        "details":{
            "Summary":"A GroupNormalization function. Carries out group normalization as described in\nthe paper\nhttps:\/\/arxiv.org\/abs\/1803.08494\nThis operator transforms input according to\ny\n=\nscale\n*\n(\nx\n-\nmean\n)\n\/\nsqrt\n(\nvariance\n+\nepsilon\n)\n+\nbias\n,\nwhere the mean and variance are computed per instance per group of channels, and\nscale\nand\nbias\nshould be specified for each channel. The number of\ngroups\nnum_groups\nshould be divisible by the number of channels so that there are\nan equal number of channels per group.\nThe overall computation has two stages: the first stage normalizes the elements to\nhave zero mean and unit variance for each instance in each group, and the second\nstage scales and shifts the results of the first stage. The floating-point precision\nused in the first stage is determined by the\nstash_type\nattribute. For example,\nif\nstash_type\nis 1, the operator casts all input variables to 32-bit float,\nperforms the computation, and finally casts the normalized results back to the\noriginal type of\nX\n. The second stage does not depend on\nstash_type\n.\nWhen the number of groups is the same as the number of channels, this operator is\nequivalent to InstanceNormalization. When there is only one group, this operator\nis equivalent to LayerNormalization.",
            "Attributes":"epsilon - FLOAT\n(default is\n'1e-05'\n):\nThe epsilon value to use to avoid division by zero.\nnum_groups - INT\n(required) :\nThe number of groups of channels. It should be a divisor of the number of channels\nC\n.\nstash_type - INT\n(default is\n'1'\n):\nThe floating-point precision used in stage one of the computation.",
            "Inputs":"X\n(heterogeneous) -\nT\n:\nInput data tensor. Dimensions for image cases are\n(N\nx\nC\nx\nH\nx\nW)\n, where\nN\nis the batch size,\nC\nis the number of channels, and\nH\nand\nW\nare the height and width of the data. Statistics are computed for every group of channels over\nC\n,\nH\n, and\nW\n. For non-image cases, the dimensions are in the form of\n(N\nx\nC\nx\nD1\nx\nD2\n...\nDn)\n.\nscale\n(heterogeneous) -\nT\n:\nScale tensor of shape\n(C)\n.\nbias\n(heterogeneous) -\nT\n:\nBias tensor of shape\n(C)\n.",
            "Outputs":"Y\n(heterogeneous) -\nT\n:\nThe output tensor of the same shape as\nX\n.",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n):\nConstrain input and output types to float tensors.\nGroupNormalization - 18 vs 21"
        }
    },
    {
        "name":"HammingWindow",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__HammingWindow.html#l-onnx-doc-hammingwindow",
        "details":{
            "Summary":"Generates a Hamming window as described in the paper\nhttps:\/\/ieeexplore.ieee.org\/document\/1455106\n.\nFunction Body\nÂ¶\nThe function definition for this operator.\n<\ndomain\n:\n\"\"\n,\nopset_import\n:\n[\n\"\"\n:\n17\n]\n>\nHammingWindow\n<\nperiodic\n,\noutput_datatype\n>\n(\nsize\n)\n=>\n(\noutput\n)\n{\nA0\n=\nConstant\n<\nvalue\n:\ntensor\n=\nfloat\n{\n0.543478\n}\n>\n()\nA1\n=\nConstant\n<\nvalue\n:\ntensor\n=\nfloat\n{\n0.456522\n}\n>\n()\nA2\n=\nConstant\n<\nvalue\n:\ntensor\n=\nfloat\n{\n0\n}\n>\n()\nZero\n=\nConstant\n<\nvalue\n:\ntensor\n=\nfloat\n{\n0\n}\n>\n()\nOne\n=\nConstant\n<\nvalue\n:\ntensor\n=\nfloat\n{\n1\n}\n>\n()\nTwo\n=\nConstant\n<\nvalue\n:\ntensor\n=\nfloat\n{\n2\n}\n>\n()\nTau\n=\nConstant\n<\nvalue\n:\ntensor\n=\nfloat\n{\n6.28319\n}\n>\n()\nPeriodic_Size_FP\n=\nCast\n<\nto\n:\nint\n=\n1\n>\n(\nsize\n)\nSymmetric_Size_FP\n=\nSub\n(\nPeriodic_Size_FP\n,\nOne\n)\nIsPeriodic\n=\nConstant\n<\nvalue_int\n:\nint\n=\n@periodic\n>\n()\nIsPeriodic_FP\n=\nCast\n<\nto\n:\nint\n=\n1\n>\n(\nIsPeriodic\n)\nIsSymmetric_FP\n=\nSub\n(\nOne\n,\nIsPeriodic_FP\n)\nPeriodic_Component\n=\nMul\n(\nPeriodic_Size_FP\n,\nIsPeriodic_FP\n)\nSymmetric_Component\n=\nMul\n(\nSymmetric_Size_FP\n,\nIsSymmetric_FP\n)\nSize_FP\n=\nAdd\n(\nPeriodic_Component\n,\nSymmetric_Component\n)\nAngularIncrement\n=\nDiv\n(\nTau\n,\nSize_FP\n)\nRange\n=\nRange\n(\nZero\n,\nPeriodic_Size_FP\n,\nOne\n)\nRangeAngular\n=\nMul\n(\nRange\n,\nAngularIncrement\n)\nTwoRangeAngular\n=\nMul\n(\nRangeAngular\n,\nTwo\n)\nCosTwoRangeAngular\n=\nCos\n(\nTwoRangeAngular\n)\nA2_Component\n=\nMul\n(\nA2\n,\nCosTwoRangeAngular\n)\nCosRangeAngular\n=\nCos\n(\nRangeAngular\n)\nA1_Component\n=\nMul\n(\nA1\n,\nCosRangeAngular\n)\nTemp0\n=\nSub\n(\nA0\n,\nA1_Component\n)\nTemp1\n=\nAdd\n(\nTemp0\n,\nA2_Component\n)\noutput\n=\nCast\n<\nto\n:\nint\n=\n@output_datatype\n>\n(\nTemp1\n)\n}",
            "Attributes":"output_datatype - INT\n(default is\n'1'\n):\nThe data type of the output tensor. Strictly must be one of the values from DataType enum in TensorProto whose values correspond to T2. The default value is 1 = FLOAT.\nperiodic - INT\n(default is\n'1'\n):\nIf 1, returns a window to be used as periodic function. If 0, return a symmetric window. When âperiodicâ is specified, hann computes a window of length size + 1 and returns the first size points. The default value is 1.",
            "Inputs":"size\n(heterogeneous) -\nT1\n:\nA scalar value indicating the length of the window.",
            "Outputs":"output\n(heterogeneous) -\nT2\n:\nA Hamming window with length: size. The output has the shape: [size].",
            "Type constraints":"T1\nin (\ntensor(int32)\n,\ntensor(int64)\n):\nConstrain the input size to int64_t.\nT2\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain output types to numeric tensors."
        }
    },
    {
        "name":"HannWindow",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__HannWindow.html#l-onnx-doc-hannwindow",
        "details":{
            "Summary":"Generates a Hann window as described in the paper\nhttps:\/\/ieeexplore.ieee.org\/document\/1455106\n.\nFunction Body\nÂ¶\nThe function definition for this operator.\n<\ndomain\n:\n\"\"\n,\nopset_import\n:\n[\n\"\"\n:\n17\n]\n>\nHannWindow\n<\nperiodic\n,\noutput_datatype\n>\n(\nsize\n)\n=>\n(\noutput\n)\n{\nA0\n=\nConstant\n<\nvalue\n:\ntensor\n=\nfloat\n{\n0.5\n}\n>\n()\nA1\n=\nConstant\n<\nvalue\n:\ntensor\n=\nfloat\n{\n0.5\n}\n>\n()\nA2\n=\nConstant\n<\nvalue\n:\ntensor\n=\nfloat\n{\n0\n}\n>\n()\nZero\n=\nConstant\n<\nvalue\n:\ntensor\n=\nfloat\n{\n0\n}\n>\n()\nOne\n=\nConstant\n<\nvalue\n:\ntensor\n=\nfloat\n{\n1\n}\n>\n()\nTwo\n=\nConstant\n<\nvalue\n:\ntensor\n=\nfloat\n{\n2\n}\n>\n()\nTau\n=\nConstant\n<\nvalue\n:\ntensor\n=\nfloat\n{\n6.28319\n}\n>\n()\nPeriodic_Size_FP\n=\nCast\n<\nto\n:\nint\n=\n1\n>\n(\nsize\n)\nSymmetric_Size_FP\n=\nSub\n(\nPeriodic_Size_FP\n,\nOne\n)\nIsPeriodic\n=\nConstant\n<\nvalue_int\n:\nint\n=\n@periodic\n>\n()\nIsPeriodic_FP\n=\nCast\n<\nto\n:\nint\n=\n1\n>\n(\nIsPeriodic\n)\nIsSymmetric_FP\n=\nSub\n(\nOne\n,\nIsPeriodic_FP\n)\nPeriodic_Component\n=\nMul\n(\nPeriodic_Size_FP\n,\nIsPeriodic_FP\n)\nSymmetric_Component\n=\nMul\n(\nSymmetric_Size_FP\n,\nIsSymmetric_FP\n)\nSize_FP\n=\nAdd\n(\nPeriodic_Component\n,\nSymmetric_Component\n)\nAngularIncrement\n=\nDiv\n(\nTau\n,\nSize_FP\n)\nRange\n=\nRange\n(\nZero\n,\nPeriodic_Size_FP\n,\nOne\n)\nRangeAngular\n=\nMul\n(\nRange\n,\nAngularIncrement\n)\nTwoRangeAngular\n=\nMul\n(\nRangeAngular\n,\nTwo\n)\nCosTwoRangeAngular\n=\nCos\n(\nTwoRangeAngular\n)\nA2_Component\n=\nMul\n(\nA2\n,\nCosTwoRangeAngular\n)\nCosRangeAngular\n=\nCos\n(\nRangeAngular\n)\nA1_Component\n=\nMul\n(\nA1\n,\nCosRangeAngular\n)\nTemp0\n=\nSub\n(\nA0\n,\nA1_Component\n)\nTemp1\n=\nAdd\n(\nTemp0\n,\nA2_Component\n)\noutput\n=\nCast\n<\nto\n:\nint\n=\n@output_datatype\n>\n(\nTemp1\n)\n}",
            "Attributes":"output_datatype - INT\n(default is\n'1'\n):\nThe data type of the output tensor. Strictly must be one of the values from DataType enum in TensorProto whose values correspond to T2. The default value is 1 = FLOAT.\nperiodic - INT\n(default is\n'1'\n):\nIf 1, returns a window to be used as periodic function. If 0, return a symmetric window. When âperiodicâ is specified, hann computes a window of length size + 1 and returns the first size points. The default value is 1.",
            "Inputs":"size\n(heterogeneous) -\nT1\n:\nA scalar value indicating the length of the window.",
            "Outputs":"output\n(heterogeneous) -\nT2\n:\nA Hann window with length: size. The output has the shape: [size].",
            "Type constraints":"T1\nin (\ntensor(int32)\n,\ntensor(int64)\n):\nConstrain the input size to int64_t.\nT2\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain output types to numeric tensors."
        }
    },
    {
        "name":"HardSigmoid",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__HardSigmoid.html#l-onnx-doc-hardsigmoid",
        "details":{
            "Summary":"HardSigmoid takes one input data (Tensor\n) and produces one output data\n(Tensor\n) where the HardSigmoid function, y = max(0, min(1, alpha * x + beta)),\nis applied to the tensor elementwise.\nFunction Body\nÂ¶\nThe function definition for this operator.\n<\ndomain\n:\n\"\"\n,\nopset_import\n:\n[\n\"\"\n:\n18\n]\n>\nHardSigmoid\n<\nbeta\n,\nalpha\n>\n(\nX\n)\n=>\n(\nY\n)\n{\nAlpha\n=\nConstant\n<\nvalue_float\n:\nfloat\n=\n@alpha\n>\n()\nAlphaCast\n=\nCastLike\n(\nAlpha\n,\nX\n)\nBeta\n=\nConstant\n<\nvalue_float\n:\nfloat\n=\n@beta\n>\n()\nBetaCast\n=\nCastLike\n(\nBeta\n,\nX\n)\nZero\n=\nConstant\n<\nvalue\n:\ntensor\n=\nfloat\n{\n0\n}\n>\n()\nZeroCast\n=\nCastLike\n(\nZero\n,\nX\n)\nOne\n=\nConstant\n<\nvalue\n:\ntensor\n=\nfloat\n{\n1\n}\n>\n()\nOneCast\n=\nCastLike\n(\nOne\n,\nX\n)\nAlphaMulX\n=\nMul\n(\nX\n,\nAlphaCast\n)\nAlphaMulXAddBeta\n=\nAdd\n(\nAlphaMulX\n,\nBetaCast\n)\nMinOneOrAlphaMulXAddBeta\n=\nMin\n(\nAlphaMulXAddBeta\n,\nOneCast\n)\nY\n=\nMax\n(\nMinOneOrAlphaMulXAddBeta\n,\nZeroCast\n)\n}",
            "Attributes":"alpha - FLOAT\n(default is\n'0.2'\n):\nValue of alpha.\nbeta - FLOAT\n(default is\n'0.5'\n):\nValue of beta.",
            "Inputs":"X\n(heterogeneous) -\nT\n:\nInput tensor",
            "Outputs":"Y\n(heterogeneous) -\nT\n:\nOutput tensor",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n):\nConstrain input and output types to float tensors.\nHardSigmoid - 6 vs 22"
        }
    },
    {
        "name":"HardSwish",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__HardSwish.html#l-onnx-doc-hardswish",
        "details":{
            "Summary":"HardSwish takes one input data (Tensor\n) and produces one output data (Tensor\n) where\nthe HardSwish function, y = x * max(0, min(1, alpha * x + beta)) = x * HardSigmoid<alpha, beta>(x),\nwhere alpha = 1\/6 and beta = 0.5, is applied to the tensor elementwise.\nFunction Body\nÂ¶\nThe function definition for this operator.\n<\ndomain\n:\n\"\"\n,\nopset_import\n:\n[\n\"\"\n:\n22\n]\n>\nHardSwish\n(\nX\n)\n=>\n(\nY\n)\n{\nHS_X\n=\nHardSigmoid\n<\nalpha\n:\nfloat\n=\n0.166667\n,\nbeta\n:\nfloat\n=\n0.5\n>\n(\nX\n)\nY\n=\nMul\n(\nX\n,\nHS_X\n)\n}",
            "Inputs":"X\n(heterogeneous) -\nT\n:\nInput tensor",
            "Outputs":"Y\n(heterogeneous) -\nT\n:\nOutput tensor",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n):\nConstrain input and output types to float tensors.\nHardSwish - 14 vs 22"
        }
    },
    {
        "name":"Hardmax",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Hardmax.html#l-onnx-doc-hardmax",
        "details":{
            "Summary":"The operator computes the hardmax values for the given input:\nHardmax(element in input, axis) = 1 if the element is the first maximum value along the specified axis, 0 otherwise\nThe âaxisâ attribute indicates the dimension along which Hardmax\nwill be performed. The output tensor has the same shape\nand contains the Hardmax values of the corresponding input.",
            "Attributes":"axis - INT\n(default is\n'-1'\n):\nDescribes the dimension Hardmax will be performed on.\nNegative value means counting dimensions\nfrom the back. Accepted range is [-r, r-1] where r = rank(input).",
            "Inputs":"input\n(heterogeneous) -\nT\n:\nThe input tensor of rank >= axis.",
            "Outputs":"output\n(heterogeneous) -\nT\n:\nThe output values with the same shape as the input tensor.",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n):\nConstrain input and output types to float tensors.\nHardmax - 11 vs 13"
        }
    },
    {
        "name":"Identity",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Identity.html#l-onnx-doc-identity",
        "details":{
            "Summary":"Identity operator",
            "Inputs":"input\n(heterogeneous) -\nV\n:\nInput tensor",
            "Outputs":"output\n(heterogeneous) -\nV\n:\nTensor to copy input into.",
            "Type constraints":"V\nin (\noptional(seq(tensor(bool)))\n,\noptional(seq(tensor(complex128)))\n,\noptional(seq(tensor(complex64)))\n,\noptional(seq(tensor(double)))\n,\noptional(seq(tensor(float)))\n,\noptional(seq(tensor(float16)))\n,\noptional(seq(tensor(int16)))\n,\noptional(seq(tensor(int32)))\n,\noptional(seq(tensor(int64)))\n,\noptional(seq(tensor(int8)))\n,\noptional(seq(tensor(string)))\n,\noptional(seq(tensor(uint16)))\n,\noptional(seq(tensor(uint32)))\n,\noptional(seq(tensor(uint64)))\n,\noptional(seq(tensor(uint8)))\n,\noptional(tensor(bool))\n,\noptional(tensor(complex128))\n,\noptional(tensor(complex64))\n,\noptional(tensor(double))\n,\noptional(tensor(float))\n,\noptional(tensor(float16))\n,\noptional(tensor(int16))\n,\noptional(tensor(int32))\n,\noptional(tensor(int64))\n,\noptional(tensor(int8))\n,\noptional(tensor(string))\n,\noptional(tensor(uint16))\n,\noptional(tensor(uint32))\n,\noptional(tensor(uint64))\n,\noptional(tensor(uint8))\n,\nseq(tensor(bool))\n,\nseq(tensor(complex128))\n,\nseq(tensor(complex64))\n,\nseq(tensor(double))\n,\nseq(tensor(float))\n,\nseq(tensor(float16))\n,\nseq(tensor(int16))\n,\nseq(tensor(int32))\n,\nseq(tensor(int64))\n,\nseq(tensor(int8))\n,\nseq(tensor(string))\n,\nseq(tensor(uint16))\n,\nseq(tensor(uint32))\n,\nseq(tensor(uint64))\n,\nseq(tensor(uint8))\n,\ntensor(bfloat16)\n,\ntensor(bool)\n,\ntensor(complex128)\n,\ntensor(complex64)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(float4e2m1)\n,\ntensor(float8e4m3fn)\n,\ntensor(float8e4m3fnuz)\n,\ntensor(float8e5m2)\n,\ntensor(float8e5m2fnuz)\n,\ntensor(float8e8m0)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int4)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(string)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint4)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain input and output types to all tensor, sequence, and optional types.\nIdentity - 23 vs 24"
        }
    },
    {
        "name":"If",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__If.html#l-onnx-doc-if",
        "details":{
            "Summary":"If conditional",
            "Attributes":"else_branch - GRAPH\n(required) :\nGraph to run if condition is false. Has N outputs: values you wish to be live-out to the enclosing scope. The number of outputs must match the number of outputs in the then_branch.\nthen_branch - GRAPH\n(required) :\nGraph to run if condition is true. Has N outputs: values you wish to be live-out to the enclosing scope. The number of outputs must match the number of outputs in the else_branch.",
            "Inputs":"cond\n(heterogeneous) -\nB\n:\nCondition for the if. The tensor must contain a single element.",
            "Outputs":"Between 1 and 2147483647 outputs.\noutputs\n(variadic) -\nV\n:\nValues that are live-out to the enclosing scope. The return values in the\nthen_branch\nand\nelse_branch\nmust be of the same data type. The\nthen_branch\nand\nelse_branch\nmay produce tensors with the same element type and different shapes. If corresponding outputs from the then-branch and the else-branch have static shapes S1 and S2, then the shape of the corresponding output variable of the if-node (if present) must be compatible with both S1 and S2 as it represents the union of both possible shapes.For example, if in a model file, the first output of\nthen_branch\nis typed float tensor with shape [2] and the first output of\nelse_branch\nis another float tensor with shape [3], Ifâs first output should have (a) no shape set, or (b) a shape of rank 1 with neither\ndim_value\nnor\ndim_param\nset, or Â© a shape of rank 1 with a unique\ndim_param\n. In contrast, the first output cannot have the shape [2] since [2] and [3] are not compatible.",
            "Type constraints":"V\nin (\noptional(seq(tensor(bfloat16)))\n,\noptional(seq(tensor(bool)))\n,\noptional(seq(tensor(complex128)))\n,\noptional(seq(tensor(complex64)))\n,\noptional(seq(tensor(double)))\n,\noptional(seq(tensor(float)))\n,\noptional(seq(tensor(float16)))\n,\noptional(seq(tensor(int16)))\n,\noptional(seq(tensor(int32)))\n,\noptional(seq(tensor(int64)))\n,\noptional(seq(tensor(int8)))\n,\noptional(seq(tensor(string)))\n,\noptional(seq(tensor(uint16)))\n,\noptional(seq(tensor(uint32)))\n,\noptional(seq(tensor(uint64)))\n,\noptional(seq(tensor(uint8)))\n,\noptional(tensor(bfloat16))\n,\noptional(tensor(bool))\n,\noptional(tensor(complex128))\n,\noptional(tensor(complex64))\n,\noptional(tensor(double))\n,\noptional(tensor(float))\n,\noptional(tensor(float16))\n,\noptional(tensor(float4e2m1))\n,\noptional(tensor(float8e4m3fn))\n,\noptional(tensor(float8e4m3fnuz))\n,\noptional(tensor(float8e5m2))\n,\noptional(tensor(float8e5m2fnuz))\n,\noptional(tensor(float8e8m0))\n,\noptional(tensor(int16))\n,\noptional(tensor(int32))\n,\noptional(tensor(int4))\n,\noptional(tensor(int64))\n,\noptional(tensor(int8))\n,\noptional(tensor(string))\n,\noptional(tensor(uint16))\n,\noptional(tensor(uint32))\n,\noptional(tensor(uint4))\n,\noptional(tensor(uint64))\n,\noptional(tensor(uint8))\n,\nseq(tensor(bfloat16))\n,\nseq(tensor(bool))\n,\nseq(tensor(complex128))\n,\nseq(tensor(complex64))\n,\nseq(tensor(double))\n,\nseq(tensor(float))\n,\nseq(tensor(float16))\n,\nseq(tensor(float4e2m1))\n,\nseq(tensor(float8e4m3fn))\n,\nseq(tensor(float8e4m3fnuz))\n,\nseq(tensor(float8e5m2))\n,\nseq(tensor(float8e5m2fnuz))\n,\nseq(tensor(float8e8m0))\n,\nseq(tensor(int16))\n,\nseq(tensor(int32))\n,\nseq(tensor(int4))\n,\nseq(tensor(int64))\n,\nseq(tensor(int8))\n,\nseq(tensor(string))\n,\nseq(tensor(uint16))\n,\nseq(tensor(uint32))\n,\nseq(tensor(uint4))\n,\nseq(tensor(uint64))\n,\nseq(tensor(uint8))\n,\ntensor(bfloat16)\n,\ntensor(bool)\n,\ntensor(complex128)\n,\ntensor(complex64)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(float4e2m1)\n,\ntensor(float8e4m3fn)\n,\ntensor(float8e4m3fnuz)\n,\ntensor(float8e5m2)\n,\ntensor(float8e5m2fnuz)\n,\ntensor(float8e8m0)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int4)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(string)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint4)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nAll Tensor, Sequence(Tensor), Optional(Tensor), and Optional(Sequence(Tensor)) types up to IRv11.\nB\nin (\ntensor(bool)\n):\nOnly bool\nIf - 23 vs 24"
        }
    },
    {
        "name":"ImageDecoder",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__ImageDecoder.html#l-onnx-doc-imagedecoder",
        "details":{
            "Summary":"Loads and decodes and image from a file. If it canât decode for any reason (e.g. corrupted encoded\nstream, invalid format, it will return an empty matrix).\nThe following image formats are supported:\nBMP\nJPEG (note: Lossless JPEG support is optional)\nJPEG2000\nTIFF\nPNG\nWebP\nPortable image format (PBM, PGM, PPM, PXM, PNM)\nDecoded images follow a channel-last layout: (Height, Width, Channels).\nJPEG chroma upsampling method:\nWhen upsampling the chroma components by a factor of 2, the pixels are linearly interpolated so that the\ncenters of the output pixels are 1\/4 and 3\/4 of the way between input pixel centers.\nWhen rounding, 0.5 is rounded down and up at alternative pixels locations to prevent bias towards\nlarger values (ordered dither pattern).\nConsidering adjacent input pixels A, B, and C, B is upsampled to pixels B0 and B1 so that\nB0\n=\nround_half_down\n((\n1\n\/\n4\n)\n*\nA\n+\n(\n3\n\/\n4\n)\n*\nB\n)\nB1\n=\nround_half_up\n((\n3\n\/\n4\n)\n*\nB\n+\n(\n1\n\/\n4\n)\n*\nC\n)\nThis method,  is the default chroma upsampling method in the well-established libjpeg-turbo library,\nalso referred as âsmoothâ or âfancyâ upsampling.",
            "Attributes":"pixel_format - STRING\n(default is\n'RGB'\n):\nPixel format. Can be one of âRGBâ, âBGRâ, or âGrayscaleâ.",
            "Inputs":"encoded_stream\n(heterogeneous) -\nT1\n:\nEncoded stream",
            "Outputs":"image\n(heterogeneous) -\nT2\n:\nDecoded image",
            "Type constraints":"T1\nin (\ntensor(uint8)\n):\nConstrain input types to 8-bit unsigned integer tensor.\nT2\nin (\ntensor(uint8)\n):\nConstrain output types to 8-bit unsigned integer tensor."
        }
    },
    {
        "name":"InstanceNormalization",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__InstanceNormalization.html#l-onnx-doc-instancenormalization",
        "details":{
            "Summary":"Carries out instance normalization as described in the paper\nhttps:\/\/arxiv.org\/abs\/1607.08022\n.\ny = scale * (x - mean) \/ sqrt(variance + epsilon) + B,\nwhere mean and variance are computed per instance per channel.",
            "Attributes":"epsilon - FLOAT\n(default is\n'1e-05'\n):\nThe epsilon value to use to avoid division by zero.",
            "Inputs":"input\n(heterogeneous) -\nT\n:\nInput data tensor from the previous operator; dimensions for image case are (N x C x H x W), where N is the batch size, C is the number of channels, and H and W are the height and the width of the data. For non image case, the dimensions are in the form of (N x C x D1 x D2 â¦ Dn), where N is the batch size.\nscale\n(heterogeneous) -\nT\n:\nThe input 1-dimensional scale tensor of size C.\nB\n(heterogeneous) -\nT\n:\nThe input 1-dimensional bias tensor of size C.",
            "Outputs":"output\n(heterogeneous) -\nT\n:\nThe output tensor of the same shape as input.",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n):\nConstrain input and output types to float tensors.\nInstanceNormalization - 6 vs 22"
        }
    },
    {
        "name":"IsInf",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__IsInf.html#l-onnx-doc-isinf",
        "details":{
            "Summary":"Map infinity to true and other values to false.",
            "Attributes":"detect_negative - INT\n(default is\n'1'\n):\n(Optional) Whether map negative infinity to true. Default to 1 so that negative infinity induces true. Set this attribute to 0 if negative infinity should be mapped to false.\ndetect_positive - INT\n(default is\n'1'\n):\n(Optional) Whether map positive infinity to true. Default to 1 so that positive infinity induces true. Set this attribute to 0 if positive infinity should be mapped to false.",
            "Inputs":"X\n(heterogeneous) -\nT1\n:\ninput",
            "Outputs":"Y\n(heterogeneous) -\nT2\n:\noutput",
            "Type constraints":"T1\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(float8e4m3fn)\n,\ntensor(float8e4m3fnuz)\n,\ntensor(float8e5m2)\n,\ntensor(float8e5m2fnuz)\n):\nConstrain input types to float tensors.\nT2\nin (\ntensor(bool)\n):\nConstrain output types to boolean tensors.\nIsInf - 10 vs 20"
        }
    },
    {
        "name":"IsNaN",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__IsNaN.html#l-onnx-doc-isnan",
        "details":{
            "Summary":"Returns which elements of the input are NaN.",
            "Inputs":"X\n(heterogeneous) -\nT1\n:\ninput",
            "Outputs":"Y\n(heterogeneous) -\nT2\n:\noutput",
            "Type constraints":"T1\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(float8e4m3fn)\n,\ntensor(float8e4m3fnuz)\n,\ntensor(float8e5m2)\n,\ntensor(float8e5m2fnuz)\n):\nConstrain input types to float tensors.\nT2\nin (\ntensor(bool)\n):\nConstrain output types to boolean tensors.\nIsNaN - 13 vs 20"
        }
    },
    {
        "name":"LRN",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__LRN.html#l-onnx-doc-lrn",
        "details":{
            "Summary":"Local Response Normalization proposed in the\nAlexNet paper\n.\nIt normalizes over local input regions.\nThe local region is defined across the channels. For an element\nX[n,\nc,\nd1,\n...,\ndk]\nin a tensor\nof shape\n(N\nx\nC\nx\nD1\nx\nD2,\n...,\nDk)\n, its region is\n{X[n,\ni,\nd1,\n...,\ndk]\n|\nmax(0,\nc\n-\nfloor((size\n-\n1)\n\/\n2))\n<=\ni\n<=\nmin(C\n-\n1,\nc\n+\nceil((size\n-\n1)\n\/\n2))}\n.\nsquare_sum[n,\nc,\nd1,\n...,\ndk]\n=\nsum(X[n,\ni,\nd1,\n...,\ndk]\n^\n2)\n,\nwhere\nmax(0,\nc\n-\nfloor((size\n-\n1)\n\/\n2))\n<=\ni\n<=\nmin(C\n-\n1,\nc\n+\nceil((size\n-\n1)\n\/\n2))\n.\nY[n,\nc,\nd1,\n...,\ndk]\n=\nX[n,\nc,\nd1,\n...,\ndk]\n\/\n(bias\n+\nalpha\n\/\nsize\n*\nsquare_sum[n,\nc,\nd1,\n...,\ndk]\n)\n^\nbeta",
            "Attributes":"alpha - FLOAT\n(default is\n'0.0001'\n):\nScaling parameter.\nbeta - FLOAT\n(default is\n'0.75'\n):\nThe exponent.\nbias - FLOAT\n(default is\n'1.0'\n):\nsize - INT\n(required) :\nThe number of channels to sum over",
            "Inputs":"X\n(heterogeneous) -\nT\n:\nInput data tensor from the previous operator; dimensions for image case are (N x C x H x W), where N is the batch size, C is the number of channels, and H and W are the height and the width of the data. For non image case, the dimensions are in the form of (N x C x D1 x D2 â¦ Dn), where N is the batch size. Optionally, if dimension denotation is in effect, the operation expects the input data tensor to arrive with the dimension denotation of [DATA_BATCH, DATA_CHANNEL, DATA_FEATURE, DATA_FEATURE â¦].",
            "Outputs":"Y\n(heterogeneous) -\nT\n:\nOutput tensor, which has the shape and type as input tensor",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n):\nConstrain input and output  types to float tensors.\nLRN - 1 vs 13"
        }
    },
    {
        "name":"LSTM",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__LSTM.html#l-onnx-doc-lstm",
        "details":{
            "Summary":"Computes an one-layer LSTM. This operator is usually supported via some\ncustom implementation such as CuDNN.\nNotations:\nX\n- input tensor\ni\n- input gate\no\n- output gate\nf\n- forget gate\nc\n- cell gate\nt\n- time step (t-1 means previous time step)\nW[iofc]\n- W parameter weight matrix for input, output, forget, and cell gates\nR[iofc]\n- R recurrence weight matrix for input, output, forget, and cell gates\nWb[iofc]\n- W bias vectors for input, output, forget, and cell gates\nRb[iofc]\n- R bias vectors for input, output, forget, and cell gates\nP[iof]\n- P peephole weight vector for input, output, and forget gates\nWB[iofc]\n- W parameter weight matrix for backward input, output, forget, and cell gates\nRB[iofc]\n- R recurrence weight matrix for backward input, output, forget, and cell gates\nWBb[iofc]\n- W bias vectors for backward input, output, forget, and cell gates\nRBb[iofc]\n- R bias vectors for backward input, output, forget, and cell gates\nPB[iof]\n- P peephole weight vector for backward input, output, and forget gates\nH\n- Hidden state\nnum_directions\n- 2 if direction == bidirectional else 1\nActivation functions:\nRelu(x)                - max(0, x)\nTanh(x)                - (1 - e^{-2x})\/(1 + e^{-2x})\nSigmoid(x)             - 1\/(1 + e^{-x})\nNOTE: Below are optional\nAffine(x)              - alpha*x + beta\nLeakyRelu(x)           - x if x >= 0 else alpha * x\nThresholdedRelu(x)     - x if x >= alpha else 0\nScaledTanh(x)          - alpha\nTanh(beta\nx)\nHardSigmoid(x)         - min(max(alpha*x + beta, 0), 1)\nElu(x)                 - x if x >= 0 else alpha*(e^x - 1)\nSoftsign(x)            - x\/(1 + |x|)\nSoftplus(x)            - log(1 + e^x)\nEquations (Default: f=Sigmoid, g=Tanh, h=Tanh):\nit = f(Xt*(Wi^T) + Ht-1*(Ri^T) + Pi (.) Ct-1 + Wbi + Rbi)\nft = f(Xt*(Wf^T) + Ht-1*(Rf^T) + Pf (.) Ct-1 + Wbf + Rbf)\nct = g(Xt*(Wc^T) + Ht-1*(Rc^T) + Wbc + Rbc)\nCt = ft (.) Ct-1 + it (.) ct\not = f(Xt*(Wo^T) + Ht-1*(Ro^T) + Po (.) Ct + Wbo + Rbo)\nHt = ot (.) h(Ct)\nThis operator has\noptional\ninputs\/outputs. See\nONNX IR\nfor more details about the representation of optional arguments. An empty string may be used in the place of an actual argumentâs name to indicate a missing argument. Trailing optional arguments (those not followed by an argument that is present) may also be simply omitted.",
            "Attributes":"activation_alpha - FLOATS\n:\nOptional scaling values used by some activation functions. The values are consumed in the order of activation functions, for example (f, g, h) in LSTM. Default values are the same as of corresponding ONNX operators.For example with LeakyRelu, the default alpha is 0.01.\nactivation_beta - FLOATS\n:\nOptional scaling values used by some activation functions. The values are consumed in the order of activation functions, for example (f, g, h) in LSTM. Default values are the same as of corresponding ONNX operators.\nactivations - STRINGS\n:\nA list of 3 (or 6 if bidirectional) activation functions for input, output, forget, cell, and hidden. The activation functions must be one of the activation functions specified above. Optional: See the equations for default if not specified.\nclip - FLOAT\n:\nCell clip threshold. Clipping bounds the elements of a tensor in the range of [-threshold, +threshold] and is applied to the input of activations. No clip if not specified.\ndirection - STRING\n(default is\n'forward'\n):\nSpecify if the RNN is forward, reverse, or bidirectional. Must be one of forward (default), reverse, or bidirectional.\nhidden_size - INT\n:\nNumber of neurons in the hidden layer\ninput_forget - INT\n(default is\n'0'\n):\nCouple the input and forget gates if 1.\nlayout - INT\n(default is\n'0'\n):\nThe shape format of inputs X, initial_h, initial_c and outputs Y, Y_h, Y_c. If 0, the following shapes are expected: X.shape = [seq_length, batch_size, input_size], Y.shape = [seq_length, num_directions, batch_size, hidden_size], initial_h.shape = Y_h.shape = initial_c.shape = Y_c.shape = [num_directions, batch_size, hidden_size]. If 1, the following shapes are expected: X.shape = [batch_size, seq_length, input_size], Y.shape = [batch_size, seq_length, num_directions, hidden_size], initial_h.shape = Y_h.shape = initial_c.shape = Y_c.shape = [batch_size, num_directions, hidden_size].",
            "Inputs":"Between 3 and 8 inputs.\nX\n(heterogeneous) -\nT\n:\nThe input sequences packed (and potentially padded) into one 3-D tensor with the shape of\n[seq_length,\nbatch_size,\ninput_size]\n.\nW\n(heterogeneous) -\nT\n:\nThe weight tensor for the gates. Concatenation of\nW[iofc]\nand\nWB[iofc]\n(if bidirectional) along dimension 0. The tensor has shape\n[num_directions,\n4*hidden_size,\ninput_size]\n.\nR\n(heterogeneous) -\nT\n:\nThe recurrence weight tensor. Concatenation of\nR[iofc]\nand\nRB[iofc]\n(if bidirectional) along dimension 0. This tensor has shape\n[num_directions,\n4*hidden_size,\nhidden_size]\n.\nB\n(optional, heterogeneous) -\nT\n:\nThe bias tensor for input gate. Concatenation of\n[Wb[iofc],\nRb[iofc]]\n, and\n[WBb[iofc],\nRBb[iofc]]\n(if bidirectional) along dimension 0. This tensor has shape\n[num_directions,\n8*hidden_size]\n. Optional: If not specified - assumed to be 0.\nsequence_lens\n(optional, heterogeneous) -\nT1\n:\nOptional tensor specifying lengths of the sequences in a batch. If not specified - assumed all sequences in the batch to have length\nseq_length\n. It has shape\n[batch_size]\n.\ninitial_h\n(optional, heterogeneous) -\nT\n:\nOptional initial value of the hidden. If not specified - assumed to be 0. It has shape\n[num_directions,\nbatch_size,\nhidden_size]\n.\ninitial_c\n(optional, heterogeneous) -\nT\n:\nOptional initial value of the cell. If not specified - assumed to be 0. It has shape\n[num_directions,\nbatch_size,\nhidden_size]\n.\nP\n(optional, heterogeneous) -\nT\n:\nThe weight tensor for peepholes. Concatenation of\nP[iof]\nand\nPB[iof]\n(if bidirectional) along dimension 0. It has shape\n[num_directions,\n3*hidde_size]\n. Optional: If not specified - assumed to be 0.",
            "Outputs":"Between 0 and 3 outputs.\nY\n(optional, heterogeneous) -\nT\n:\nA tensor that concats all the intermediate output values of the hidden. It has shape\n[seq_length,\nnum_directions,\nbatch_size,\nhidden_size]\n.\nY_h\n(optional, heterogeneous) -\nT\n:\nThe last output value of the hidden. It has shape\n[num_directions,\nbatch_size,\nhidden_size]\n.\nY_c\n(optional, heterogeneous) -\nT\n:\nThe last output value of the cell. It has shape\n[num_directions,\nbatch_size,\nhidden_size]\n.",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n):\nConstrain input and output types to float tensors.\nT1\nin (\ntensor(int32)\n):\nConstrain seq_lens to integer tensor.\nLSTM - 14 vs 22"
        }
    },
    {
        "name":"LayerNormalization",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__LayerNormalization.html#l-onnx-doc-layernormalization",
        "details":{
            "Summary":"This is layer normalization defined in ONNX as function.\nThe overall computation can be split into two stages.\nThe first stage is standardization, which makes the\nnormalized elements have zero mean and unit variances.\nThe computation required by standardization can be\ndescribed by the following equations.\nMean\n=\nReduceMean\n<\naxes\n=\nnormalized_axes\n>\n(\nX\n)\nD\n=\nSub\n(\nX\n,\nMean\n)\nDD\n=\nMul\n(\nD\n,\nD\n)\nVar\n=\nReduceMean\n<\naxes\n=\nnormalized_axes\n>\n(\nDD\n)\nVarEps\n=\nAdd\n(\nVar\n,\nepsilon\n)\nStdDev\n=\nSqrt\n(\nVarEps\n)\nInvStdDev\n=\nReciprocal\n(\nStdDev\n)\nNormalized\n=\nMul\n(\nD\n,\nInvStdDev\n)\nwhere\nnormalized_axes\nis\n[axis,\n...,\nrank\nof\nX\n-\n1]\n.\nThe variables\nVar\nand\nStdDev\nstand for variance and\nstandard deviation, respectively. The second output is\nMean\nand the last one is\nInvStdDev\n.\nDepending on\nstash_type\nattribute, the actual computation\nmust happen in different floating-point precision.\nFor example, if\nstash_type\nis 1, this operator casts\nall input variables to 32-bit float, perform the computation, and\nfinally cast\nNormalized\nback to the original type of\nX\n.\nThe second stage then scales and shifts the outcome of the\nfirst stage using\nNormalizedScaled\n=\nMul\n(\nNormalized\n,\nScale\n)\nY\n=\nAdd\n(\nNormalizedScaled\n,\nB\n)\nThe second stage doesnât depends on\nstash_type\n.\nAll equations are in\nthis syntax\n.\nThe same variable (i.e., input, output, and attribute) uses\nthe same name in the equations above and this operatorâs definition.\nLet\nd[i]\nindicate the i-th dimension of\nX\n.\nIf\nX\nâs shape is\n[d[0],\n...,\nd[axis-1],\nd[axis],\n...,\nd[rank-1]]\n,\nthe shape of\nMean\nand\nInvStdDev\nis\n[d[0],\n...,\nd[axis-1],\n1,\n...,\n1]\n.\nY\nand\nX\nhave the same shape. This operator supports unidirectional broadcasting\n(tensors\nScale\nand\nB\nshould be unidirectional broadcastable to tensor\nX\n);\nfor more details please check\nBroadcasting in ONNX\n.",
            "Attributes":"axis - INT\n(default is\n'-1'\n):\nThe first normalization dimension. If rank(X) is r, axisâ allowed range is [-r, r). Negative value means counting dimensions from the back.\nepsilon - FLOAT\n(default is\n'1e-05'\n):\nThe epsilon value to use to avoid division by zero.\nstash_type - INT\n(default is\n'1'\n):\nType of Mean and InvStdDev. This also specifies stage oneâs computation precision.",
            "Inputs":"Between 2 and 3 inputs.\nX\n(heterogeneous) -\nT\n:\nTensor to be normalized.\nScale\n(heterogeneous) -\nT\n:\nScale tensor.\nB\n(optional, heterogeneous) -\nT\n:\nBias tensor.",
            "Outputs":"Between 1 and 3 outputs.\nY\n(heterogeneous) -\nT\n:\nNormalized tensor.\nMean\n(optional, heterogeneous) -\nU\n:\nSaved mean used during training to speed up gradient computation\nInvStdDev\n(optional, heterogeneous) -\nU\n:\nSaved inverse standard deviation used during training to speed up gradient computation.",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n):\nConstrain input types and output Y type to float tensors.\nU\nin (\ntensor(bfloat16)\n,\ntensor(float)\n):\nType of Mean and InvStdDev tensors."
        }
    },
    {
        "name":"LeakyRelu",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__LeakyRelu.html#l-onnx-doc-leakyrelu",
        "details":{
            "Summary":"LeakyRelu takes input data (Tensor\n) and an argument alpha, and produces one\noutput data (Tensor\n) where the function\nf(x)\n=\nalpha\n*\nx\nfor\nx\n<\n0\n,\nf(x)\n=\nx\nfor\nx\n>=\n0\n, is applied to the data tensor elementwise.\nFunction Body\nÂ¶\nThe function definition for this operator.\n<\ndomain\n:\n\"\"\n,\nopset_import\n:\n[\n\"\"\n:\n16\n]\n>\nLeakyRelu\n<\nalpha\n>\n(\nX\n)\n=>\n(\nY\n)\n{\nAlpha\n=\nConstant\n<\nvalue_float\n:\nfloat\n=\n@alpha\n>\n()\nAlphaCast\n=\nCastLike\n(\nAlpha\n,\nX\n)\nZero\n=\nConstant\n<\nvalue\n:\ntensor\n=\nfloat\n{\n0\n}\n>\n()\nZeroCast\n=\nCastLike\n(\nZero\n,\nX\n)\nXLessThanZero\n=\nLess\n(\nX\n,\nZeroCast\n)\nAlphaMulX\n=\nMul\n(\nAlphaCast\n,\nX\n)\nY\n=\nWhere\n(\nXLessThanZero\n,\nAlphaMulX\n,\nX\n)\n}",
            "Attributes":"alpha - FLOAT\n(default is\n'0.01'\n):\nCoefficient of leakage.",
            "Inputs":"X\n(heterogeneous) -\nT\n:\nInput tensor",
            "Outputs":"Y\n(heterogeneous) -\nT\n:\nOutput tensor",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n):\nConstrain input and output types to float tensors.\nLeakyRelu - 6 vs 16"
        }
    },
    {
        "name":"Less",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Less.html#l-onnx-doc-less",
        "details":{
            "Summary":"Returns the tensor resulted from performing the\nless\nlogical operation\nelementwise on the input tensors\nA\nand\nB\n(with Numpy-style broadcasting support).\nThis operator supports\nmultidirectional (i.e., Numpy-style) broadcasting\n; for more details please check\nBroadcasting in ONNX\n.",
            "Inputs":"A\n(heterogeneous) -\nT\n:\nFirst input operand for the logical operator.\nB\n(heterogeneous) -\nT\n:\nSecond input operand for the logical operator.",
            "Outputs":"C\n(heterogeneous) -\nT1\n:\nResult tensor.",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain input types to all numeric tensors.\nT1\nin (\ntensor(bool)\n):\nConstrain output to boolean tensor.\nLess - 9 vs 13"
        }
    },
    {
        "name":"LessOrEqual",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__LessOrEqual.html#l-onnx-doc-lessorequal",
        "details":{
            "Summary":"Returns the tensor resulted from performing the\nless_equal\nlogical operation\nelementwise on the input tensors\nA\nand\nB\n(with Numpy-style broadcasting support).\nThis operator supports\nmultidirectional (i.e., Numpy-style) broadcasting\n; for more details please check\nBroadcasting in ONNX\n.\nFunction Body\nÂ¶\nThe function definition for this operator.\n<\ndomain\n:\n\"\"\n,\nopset_import\n:\n[\n\"\"\n:\n16\n]\n>\nLessOrEqual\n(\nA\n,\nB\n)\n=>\n(\nC\n)\n{\nO1\n=\nLess\n(\nA\n,\nB\n)\nO2\n=\nEqual\n(\nA\n,\nB\n)\nC\n=\nOr\n(\nO1\n,\nO2\n)\n}",
            "Inputs":"A\n(heterogeneous) -\nT\n:\nFirst input operand for the logical operator.\nB\n(heterogeneous) -\nT\n:\nSecond input operand for the logical operator.",
            "Outputs":"C\n(heterogeneous) -\nT1\n:\nResult tensor.",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain input types to all numeric tensors.\nT1\nin (\ntensor(bool)\n):\nConstrain output to boolean tensor.\nLessOrEqual - 12 vs 16"
        }
    },
    {
        "name":"Log",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Log.html#l-onnx-doc-log",
        "details":{
            "Summary":"Calculates the natural log of the given input tensor, element-wise.",
            "Inputs":"input\n(heterogeneous) -\nT\n:\nInput tensor",
            "Outputs":"output\n(heterogeneous) -\nT\n:\nThe natural log of the input tensor computed element-wise",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n):\nConstrain input and output types to float tensors.\nLog - 6 vs 13"
        }
    },
    {
        "name":"LogSoftmax",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__LogSoftmax.html#l-onnx-doc-logsoftmax",
        "details":{
            "Summary":"The operator computes the log of softmax values for the given input:\nLogSoftmax(input, axis) = Log(Softmax(input, axis=axis))\nThe âaxisâ attribute indicates the dimension along which LogSoftmax\nwill be performed. The output tensor has the same shape\nand contains the LogSoftmax values of the corresponding input.",
            "Attributes":"axis - INT\n(default is\n'-1'\n):\nDescribes the dimension LogSoftmax will be performed on.\nNegative value means counting dimensions\nfrom the back. Accepted range is [-r, r-1] where r = rank(input).",
            "Inputs":"input\n(heterogeneous) -\nT\n:\nThe input tensor of rank >= axis.",
            "Outputs":"output\n(heterogeneous) -\nT\n:\nThe output values with the same shape as the input tensor.",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n):\nConstrain input and output types to float tensors.\nLogSoftmax - 11 vs 13"
        }
    },
    {
        "name":"Loop",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Loop.html#l-onnx-doc-loop",
        "details":{
            "Summary":"Generic Looping construct. This loop has multiple termination conditions:\nTrip count. Iteration count specified at runtime. Set by\nspecifying the input M. Optional. Set to empty string to omit.\nNote that a static trip count (specified at graph construction time) can be\nspecified by passing in a constant node for input M.\nLoop termination condition. This is an input to the op that determines\nwhether to run the first iteration and also a loop-carried dependency for\nthe body graph. The body graph must yield a value for the condition variable,\nwhether this input is provided or not.\nThis table summarizes the operating modes of this operator with equivalent\nC-style code:\nOperator inputs defined as (max_trip_count, condition_var).\ninput (ââ, ââ):\nfor (int i=0; ; ++i) {\ncond = â¦ \/\/ Note this value is ignored, but is required in the body\n}\ninput (ââ, cond) \/\/ Note this is analogous to a while loop\nbool cond = â¦;\nfor (int i=0; cond; ++i) {\ncond = â¦;\n}\ninput (ââ, 1) \/\/ Note this is analogous to a do-while loop\nbool cond = true\nfor (int i=0; cond; ++i) {\ncond = â¦;\n}\ninput (trip_count, ââ) \/\/ Note this is analogous to a for loop\nint trip_count = â¦\nfor (int i=0; i < trip_count; ++i) {\ncond = â¦; \/\/ ignored\n}\ninput (trip_count, cond)\nint trip_count = â¦;\nbool cond = â¦;\nfor (int i=0; i < trip_count && cond; ++i) {\ncond = â¦;\n}\nSample usage - cond as well as trip count\ngraph predict-net {\n  %a = Constant[value = <Scalar Tensor [3]>]()\n  %b = Constant[value = <Scalar Tensor [6]>]()\n  %keepgoing = Constant[value = <Scalar Tensor [1]>]()\n  %max_trip_count = Constant[value = <Scalar Tensor [10]>]()\n  %keepgoing_out, %b_out, %user_defined_vals = Loop[body = <graph body-net>](%max_trip_count, %keepgoing, %b)\n  return\n}\n\ngraph body-net (\n  %i[INT32, scalar]           \/\/ iteration number\n  %keepgoing_in[BOOL, scalar] \/\/ incoming loop-termination-condition; not used\n  %b_in[INT32, scalar]        \/\/ incoming value of loop-carried-dependency b\n) {\n  %my_local = Add(%a, %b_in)\n  %b_out = Sub(%a, %b_in) \/\/ outgoing value of loop-carried-dependency b\n  %keepgoing_out = Greater(%my_local, %b_out) \/\/ outgoing loop-termination-condition\n  %user_defined_val = Add(%b_in, %b_in) \/\/ scan-output value to be accumulated\n  return %keepgoing_out, %b_out, %user_defined_val\n}\nSample equivalent C code\n{\n  \/* User-defined code (enclosing scope) *\/\n  int a = 3, b = 6;\n  bool keepgoing = true; \/\/ Analogous to input cond\n  \/* End user-defined code *\/\n\n  \/* Implicitly-defined code *\/\n  const int max_trip_count = 10; \/\/ Analogous to input M\n  int user_defined_vals[]; \/\/ Imagine this is resizable\n  \/* End implicitly-defined code *\/\n  \/* initialize loop-carried variables and scan-output variables *\/\n  bool keepgoing_out = keepgoing\n  int b_out = b\n\n  for (int i=0; i < max_trip_count && keepgoing_out; ++i) {\n    \/* Implicitly-defined code: bind actual parameter values\n       to formal parameter variables of loop-body *\/\n    bool keepgoing_in = keepgoing_out;\n    bool b_in = b_out;\n\n    \/* User-defined code (loop body) *\/\n    int my_local = a + b_in; \/\/ Reading value \"a\" from the enclosing scope is fine\n    b_out = a - b_in;\n    keepgoing_out = my_local > b_out;\n    user_defined_val = b_in + b_in; \/\/ b_in and b_out are different variables\n    \/* End user-defined code *\/\n\n    \/* Implicitly defined-code *\/\n    user_defined_vals[i] = user_defined_val \/\/ accumulate scan-output values\n  }\n  \/\/ int t = my_local; \/\/ Can't do this. my_local is not accessible here.\n\n  \/\/ The values below are bound to the output variables of the loop and therefore accessible\n  \/\/ b_out; user_defined_vals; keepgoing_out;\n}\nThere are several things of note in this code snippet:\nValues from the enclosing scope (i.e. variable âaâ here) are in scope and can\nbe referenced in the inputs of the loop.\nAny values computed in the loop body that needs to be used in a subsequent\niteration or after the loop are modelled using a pair of variables in the loop-body,\nconsisting of an input variable (eg., b_in) and an output variable (eg., b_out).\nThese are referred to as loop-carried dependences. The loop operation node\nsupplies the input value of the input variable for the first iteration, and\nreturns the output value of the output variable produced by the final\niteration.\nScan_output variables are used to implicitly concatenate values computed across\nall the iterations. In the above example, the value of user_defined_val computed\nover all iterations are concatenated and returned as the value of user_defined_vals\nafter the loop.\nValues created in the body cannot be accessed in the enclosing scope,\nexcept using the mechanism described above.\nNote that the semantics of this op support âdiagonalâ or âwavefrontâ execution.\n(See Step 3 here for an example:\nhttps:\/\/devblogs.nvidia.com\/optimizing-recurrent-neural-networks-cudnn-5\/\n).\nFrontends should emit multi-layer RNNs as a series of While operators (with\ntime being the inner looping dimension), with each successive layer consuming\nthe scan_outputs from the previous layer, possibly going through several\npoint-wise operators (e.g. dropout, residual connections, linear layer).\nThe input\/output of subgraph (produced by loop node) matching is based on order instead of name. The implementation will figure out the names based on this order.",
            "Attributes":"body - GRAPH\n(required) :\nThe graph run each iteration. It has 2+N inputs: (iteration_num, condition, loop carried dependenciesâ¦). It has 1+N+K outputs: (condition, loop carried dependenciesâ¦, scan_outputsâ¦). Each scan_output is created by concatenating the value of the specified output value at the end of each iteration of the loop. It is an error if the dimensions or data type of these scan_outputs change across loop iterations.",
            "Inputs":"Between 2 and 2147483647 inputs.\nM\n(optional, heterogeneous) -\nI\n:\nA maximum trip-count for the loop specified at runtime. Optional. Pass empty string to skip.\ncond\n(optional, heterogeneous) -\nB\n:\nA boolean termination condition. Optional. Pass empty string to skip.\nv_initial\n(variadic) -\nV\n:\nThe initial values of any loop-carried dependencies (values that change across loop iterations)",
            "Outputs":"Between 1 and 2147483647 outputs.\nv_final_and_scan_outputs\n(variadic) -\nV\n:\nFinal N loop carried dependency values then K scan_outputs. Scan outputs must be Tensors.",
            "Type constraints":"V\nin (\noptional(seq(tensor(bfloat16)))\n,\noptional(seq(tensor(bool)))\n,\noptional(seq(tensor(complex128)))\n,\noptional(seq(tensor(complex64)))\n,\noptional(seq(tensor(double)))\n,\noptional(seq(tensor(float)))\n,\noptional(seq(tensor(float16)))\n,\noptional(seq(tensor(int16)))\n,\noptional(seq(tensor(int32)))\n,\noptional(seq(tensor(int64)))\n,\noptional(seq(tensor(int8)))\n,\noptional(seq(tensor(string)))\n,\noptional(seq(tensor(uint16)))\n,\noptional(seq(tensor(uint32)))\n,\noptional(seq(tensor(uint64)))\n,\noptional(seq(tensor(uint8)))\n,\noptional(tensor(bfloat16))\n,\noptional(tensor(bool))\n,\noptional(tensor(complex128))\n,\noptional(tensor(complex64))\n,\noptional(tensor(double))\n,\noptional(tensor(float))\n,\noptional(tensor(float16))\n,\noptional(tensor(float4e2m1))\n,\noptional(tensor(float8e4m3fn))\n,\noptional(tensor(float8e4m3fnuz))\n,\noptional(tensor(float8e5m2))\n,\noptional(tensor(float8e5m2fnuz))\n,\noptional(tensor(float8e8m0))\n,\noptional(tensor(int16))\n,\noptional(tensor(int32))\n,\noptional(tensor(int4))\n,\noptional(tensor(int64))\n,\noptional(tensor(int8))\n,\noptional(tensor(string))\n,\noptional(tensor(uint16))\n,\noptional(tensor(uint32))\n,\noptional(tensor(uint4))\n,\noptional(tensor(uint64))\n,\noptional(tensor(uint8))\n,\nseq(tensor(bfloat16))\n,\nseq(tensor(bool))\n,\nseq(tensor(complex128))\n,\nseq(tensor(complex64))\n,\nseq(tensor(double))\n,\nseq(tensor(float))\n,\nseq(tensor(float16))\n,\nseq(tensor(float4e2m1))\n,\nseq(tensor(float8e4m3fn))\n,\nseq(tensor(float8e4m3fnuz))\n,\nseq(tensor(float8e5m2))\n,\nseq(tensor(float8e5m2fnuz))\n,\nseq(tensor(float8e8m0))\n,\nseq(tensor(int16))\n,\nseq(tensor(int32))\n,\nseq(tensor(int4))\n,\nseq(tensor(int64))\n,\nseq(tensor(int8))\n,\nseq(tensor(string))\n,\nseq(tensor(uint16))\n,\nseq(tensor(uint32))\n,\nseq(tensor(uint4))\n,\nseq(tensor(uint64))\n,\nseq(tensor(uint8))\n,\ntensor(bfloat16)\n,\ntensor(bool)\n,\ntensor(complex128)\n,\ntensor(complex64)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(float4e2m1)\n,\ntensor(float8e4m3fn)\n,\ntensor(float8e4m3fnuz)\n,\ntensor(float8e5m2)\n,\ntensor(float8e5m2fnuz)\n,\ntensor(float8e8m0)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int4)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(string)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint4)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nAll Tensor, Sequence(Tensor), Optional(Tensor), and Optional(Sequence(Tensor)) types up to IRv11.\nI\nin (\ntensor(int64)\n):\ntensor of int64, which should be a scalar.\nB\nin (\ntensor(bool)\n):\ntensor of bool, which should be a scalar.\nLoop - 23 vs 24"
        }
    },
    {
        "name":"LpNormalization",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__LpNormalization.html#l-onnx-doc-lpnormalization",
        "details":{
            "Summary":"Given a matrix, apply Lp-normalization along the provided axis.",
            "Attributes":"axis - INT\n(default is\n'-1'\n):\nThe axis on which to apply normalization, -1 mean last axis.\np - INT\n(default is\n'2'\n):\nThe order of the normalization, only 1 or 2 are supported.",
            "Inputs":"input\n(heterogeneous) -\nT\n:\nInput matrix",
            "Outputs":"output\n(heterogeneous) -\nT\n:\nMatrix after normalization",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n):\nConstrain input and output types to float tensors.\nLpNormalization - 1 vs 22"
        }
    },
    {
        "name":"LpPool",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__LpPool.html#l-onnx-doc-lppool",
        "details":{
            "Summary":"LpPool consumes an input tensor X and applies Lp pooling across\nthe tensor according to kernel sizes, stride sizes, and pad lengths.\nLp pooling consisting of computing the Lp norm on all values of a subset\nof the input tensor according to the kernel size and downsampling the\ndata into the output tensor Y for further processing. The output spatial shape will be following:\noutput_spatial_shape\n[\ni\n]\n=\nfloor\n((\ninput_spatial_shape\n[\ni\n]\n+\npad_shape\n[\ni\n]\n-\n{\nkernelSpatialShape\n})\n\/\nstrides_spatial_shape\n[\ni\n]\n+\n1\n)\nor\noutput_spatial_shape\n[\ni\n]\n=\nceil\n((\ninput_spatial_shape\n[\ni\n]\n+\npad_shape\n[\ni\n]\n-\n{\nkernelSpatialShape\n})\n\/\nstrides_spatial_shape\n[\ni\n]\n+\n1\n)\nif ceil_mode is enabled\npad_shape[i]\nis the sum of pads along axis\ni\n.\nauto_pad\nis a DEPRECATED attribute. If you are using them currently, the output spatial shape will be following:\nVALID\n:\noutput_spatial_shape\n[\ni\n]\n=\nceil\n((\ninput_spatial_shape\n[\ni\n]\n-\n{\nkernelSpatialShape\n}\n+\n1\n)\n\/\nstrides_spatial_shape\n[\ni\n])\nSAME_UPPER\nor\nSAME_LOWER\n:\noutput_spatial_shape\n[\ni\n]\n=\nceil\n(\ninput_spatial_shape\n[\ni\n]\n\/\nstrides_spatial_shape\n[\ni\n])\nAnd pad shape will be following if\nSAME_UPPER\nor\nSAME_LOWER\n:\npad_shape\n[\ni\n]\n=\n(\noutput_spatial_shape\n[\ni\n]\n-\n1\n)\n*\nstrides_spatial_shape\n[\ni\n]\n+\n{\nkernelSpatialShape\n}\n-\ninput_spatial_shape\n[\ni\n]",
            "Attributes":"auto_pad - STRING\n(default is\n'NOTSET'\n):\nauto_pad must be either NOTSET, SAME_UPPER, SAME_LOWER or VALID. Where default value is NOTSET, which means explicit padding is used. SAME_UPPER or SAME_LOWER mean pad the input so that\noutput_shape[i]\n=\nceil(input_shape[i]\n\/\nstrides[i])\nfor each axis\ni\n. The padding is split between the two sides equally or almost equally (depending on whether it is even or odd). In case the padding is an odd number, the extra padding is added at the end for SAME_UPPER and at the beginning for SAME_LOWER.\nceil_mode - INT\n(default is\n'0'\n):\nWhether to use ceil or floor (default) to compute the output shape.\ndilations - INTS\n:\ndilation value along each spatial axis of the filter. If not present, the dilation defaults is 1 along each spatial axis.\nkernel_shape - INTS\n(required) :\nThe size of the kernel along each axis.\np - INT\n(default is\n'2'\n):\np value of the Lp norm used to pool over the input data.\npads - INTS\n:\nPadding for the beginning and ending along each spatial axis, it can take any value greater than or equal to 0. The value represent the number of pixels added to the beginning and end part of the corresponding axis.\npads\nformat should be as follow [x1_begin, x2_beginâ¦x1_end, x2_end,â¦], where xi_begin the number of pixels added at the beginning of axis\ni\nand xi_end, the number of pixels added at the end of axis\ni\n. This attribute cannot be used simultaneously with auto_pad attribute. If not present, the padding defaults to 0 along start and end of each spatial axis.\nstrides - INTS\n:\nStride along each spatial axis. If not present, the stride defaults to 1 along each spatial axis.",
            "Inputs":"X\n(heterogeneous) -\nT\n:\nInput data tensor from the previous operator; dimensions for image case are (N x C x H x W), where N is the batch size, C is the number of channels, and H and W are the height and the width of the data. For non image case, the dimensions are in the form of (N x C x D1 x D2 â¦ Dn), where N is the batch size.",
            "Outputs":"Y\n(heterogeneous) -\nT\n:\nOutput data tensor from Lp pooling across the input tensor. Dimensions will vary based on various kernel, stride, and pad sizes.",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n):\nConstrain input and output types to float tensors.\nLpPool - 18 vs 22"
        }
    },
    {
        "name":"MatMul",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__MatMul.html#l-onnx-doc-matmul",
        "details":{
            "Summary":"Matrix product that behaves like\nnumpy.matmul\n.",
            "Inputs":"A\n(heterogeneous) -\nT\n:\nN-dimensional matrix A\nB\n(heterogeneous) -\nT\n:\nN-dimensional matrix B",
            "Outputs":"Y\n(heterogeneous) -\nT\n:\nMatrix multiply results from A * B",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(uint32)\n,\ntensor(uint64)\n):\nConstrain input and output types to float\/int tensors.\nMatMul - 9 vs 13"
        }
    },
    {
        "name":"MatMulInteger",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__MatMulInteger.html#l-onnx-doc-matmulinteger",
        "details":{
            "Summary":"Matrix product that behaves like\nnumpy.matmul\n.\nThe production MUST never overflow. The accumulation may overflow if and only if in 32 bits.",
            "Inputs":"Between 2 and 4 inputs.\nA\n(heterogeneous) -\nT1\n:\nN-dimensional matrix A\nB\n(heterogeneous) -\nT2\n:\nN-dimensional matrix B\na_zero_point\n(optional, heterogeneous) -\nT1\n:\nZero point tensor for input âAâ. Itâs optional and default value is 0. It could be a scalar or N-D tensor. Scalar refers to per tensor quantization whereas N-D refers to per row quantization. If the input is 2D of shape [M, K] then zero point tensor may be an M element vector [zp_1, zp_2, â¦, zp_M]. If the input is N-D tensor with shape [D1, D2, M, K] then zero point tensor may have shape [D1, D2, M, 1].\nb_zero_point\n(optional, heterogeneous) -\nT2\n:\nZero point tensor for input âBâ. Itâs optional and default value is 0. It could be a scalar or a N-D tensor, Scalar refers to per tensor quantization whereas N-D refers to per col quantization. If the input is 2D of shape [K, N] then zero point tensor may be an N element vector [zp_1, zp_2, â¦, zp_N]. If the input is N-D tensor with shape [D1, D2, K, N] then zero point tensor may have shape [D1, D2, 1, N].",
            "Outputs":"Y\n(heterogeneous) -\nT3\n:\nMatrix multiply results from A * B",
            "Type constraints":"T1\nin (\ntensor(int8)\n,\ntensor(uint8)\n):\nConstrain input A data type to 8-bit integer tensor.\nT2\nin (\ntensor(int8)\n,\ntensor(uint8)\n):\nConstrain input B data type to 8-bit integer tensor.\nT3\nin (\ntensor(int32)\n):\nConstrain output Y data type as 32-bit integer tensor."
        }
    },
    {
        "name":"Max",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Max.html#l-onnx-doc-max",
        "details":{
            "Summary":"Element-wise max of each of the input tensors (with Numpy-style broadcasting support).\nAll inputs and outputs must have the same data type.\nThis operator supports\nmultidirectional (i.e., Numpy-style) broadcasting\n; for more details please check\nBroadcasting in ONNX\n.",
            "Inputs":"Between 1 and 2147483647 inputs.\ndata_0\n(variadic, heterogeneous) -\nT\n:\nList of tensors for max.",
            "Outputs":"max\n(heterogeneous) -\nT\n:\nOutput tensor.",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain input and output types to numeric tensors.\nMax - 12 vs 13"
        }
    },
    {
        "name":"MaxPool",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__MaxPool.html#l-onnx-doc-maxpool",
        "details":{
            "Summary":"MaxPool consumes an input tensor X and applies max pooling across\nthe tensor according to kernel sizes, stride sizes, and pad lengths.\nmax pooling consisting of computing the max on all values of a\nsubset of the input tensor according to the kernel size and downsampling the\ndata into the output tensor Y for further processing. The output spatial shape is calculated differently\ndepending on whether explicit padding is used, where pads is employed, or auto padding is used, where auto_pad is utilized.\nWith explicit padding (\nhttps:\/\/pytorch.org\/docs\/stable\/generated\/torch.nn.MaxPool2d.html?highlight=maxpool#torch.nn.MaxPool2d\n):\noutput_spatial_shape\n[\ni\n]\n=\nfloor\n((\ninput_spatial_shape\n[\ni\n]\n+\npad_shape\n[\ni\n]\n-\ndilation\n[\ni\n]\n*\n(\nkernel_shape\n[\ni\n]\n-\n1\n)\n-\n1\n)\n\/\nstrides_spatial_shape\n[\ni\n]\n+\n1\n)\nor\noutput_spatial_shape\n[\ni\n]\n=\nceil\n((\ninput_spatial_shape\n[\ni\n]\n+\npad_shape\n[\ni\n]\n-\ndilation\n[\ni\n]\n*\n(\nkernel_shape\n[\ni\n]\n-\n1\n)\n-\n1\n)\n\/\nstrides_spatial_shape\n[\ni\n]\n+\n1\n)\nif ceil_mode is enabled.\npad_shape[i]\nis the sum of pads along axis\ni\n. Sliding windows that would start in the right padded region are ignored.\nauto_pad\nis a DEPRECATED attribute. If you are using them currently, the output spatial shape will be following when ceil_mode is enabled:\nVALID\n:\noutput_spatial_shape\n[\ni\n]\n=\nceil\n((\ninput_spatial_shape\n[\ni\n]\n-\n((\nkernel_spatial_shape\n[\ni\n]\n-\n1\n)\n*\ndilations\n[\ni\n]\n+\n1\n)\n+\n1\n)\n\/\nstrides_spatial_shape\n[\ni\n])\nSAME_UPPER\nor\nSAME_LOWER\n:\noutput_spatial_shape\n[\ni\n]\n=\nceil\n(\ninput_spatial_shape\n[\ni\n]\n\/\nstrides_spatial_shape\n[\ni\n])\nor when ceil_mode is disabled (\nhttps:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/layers\/AveragePooling2D\n):\nVALID\n:\noutput_spatial_shape\n[\ni\n]\n=\nfloor\n((\ninput_spatial_shape\n[\ni\n]\n-\n((\nkernel_spatial_shape\n[\ni\n]\n-\n1\n)\n*\ndilations\n[\ni\n]\n+\n1\n))\n\/\nstrides_spatial_shape\n[\ni\n])\n+\n1\nSAME_UPPER\nor\nSAME_LOWER\n:\noutput_spatial_shape\n[\ni\n]\n=\nfloor\n((\ninput_spatial_shape\n[\ni\n]\n-\n1\n)\n\/\nstrides_spatial_shape\n[\ni\n])\n+\n1\nAnd pad shape will be following if\nSAME_UPPER\nor\nSAME_LOWER\n:\npad_shape\n[\ni\n]\n=\n(\noutput_spatial_shape\n[\ni\n]\n-\n1\n)\n*\nstrides_spatial_shape\n[\ni\n]\n+\n((\nkernel_spatial_shape\n[\ni\n]\n-\n1\n)\n*\ndilations\n[\ni\n]\n+\n1\n)\n-\ninput_spatial_shape\n[\ni\n]\nThe output of each pooling window is maximum number of elements exclude pad.",
            "Attributes":"auto_pad - STRING\n(default is\n'NOTSET'\n):\nauto_pad must be either NOTSET, SAME_UPPER, SAME_LOWER or VALID. Where default value is NOTSET, which means explicit padding is used. SAME_UPPER or SAME_LOWER mean pad the input so that\noutput_shape[i]\n=\nceil(input_shape[i]\n\/\nstrides[i])\nfor each axis\ni\n. The padding is split between the two sides equally or almost equally (depending on whether it is even or odd). In case the padding is an odd number, the extra padding is added at the end for SAME_UPPER and at the beginning for SAME_LOWER.\nceil_mode - INT\n(default is\n'0'\n):\nWhether to use ceil or floor (default) to compute the output shape.\ndilations - INTS\n:\nDilation value along each spatial axis of filter. If not present, the dilation defaults to 1 along each spatial axis.\nkernel_shape - INTS\n(required) :\nThe size of the kernel along each axis.\npads - INTS\n:\nPadding for the beginning and ending along each spatial axis, it can take any value greater than or equal to 0. The value represent the number of pixels added to the beginning and end part of the corresponding axis.\npads\nformat should be as follow [x1_begin, x2_beginâ¦x1_end, x2_end,â¦], where xi_begin the number of pixels added at the beginning of axis\ni\nand xi_end, the number of pixels added at the end of axis\ni\n. This attribute cannot be used simultaneously with auto_pad attribute. If not present, the padding defaults to 0 along start and end of each spatial axis.\nstorage_order - INT\n(default is\n'0'\n):\nThe storage order of the tensor. 0 is row major, and 1 is column major. This attribute is used only to convert an n-tuple index value into a single integer value for producing the second output.\nstrides - INTS\n:\nStride along each spatial axis. If not present, the stride defaults to 1 along each spatial axis.",
            "Inputs":"X\n(heterogeneous) -\nT\n:\nInput data tensor from the previous operator; dimensions for image case are (N x C x H x W), where N is the batch size, C is the number of channels, and H and W are the height and the width of the data. For non image case, the dimensions are in the form of (N x C x D1 x D2 â¦ Dn), where N is the batch size. Optionally, if dimension denotation is in effect, the operation expects the input data tensor to arrive with the dimension denotation of [DATA_BATCH, DATA_CHANNEL, DATA_FEATURE, DATA_FEATURE â¦].",
            "Outputs":"Between 1 and 2 outputs.\nY\n(heterogeneous) -\nT\n:\nOutput data tensor from average or max pooling across the input tensor. Dimensions will vary based on various kernel, stride, and pad sizes. Floor value of the dimension is used\nIndices\n(optional, heterogeneous) -\nI\n:\nIndices tensor from max pooling across the input tensor. The dimensions of indices are the same as output tensor. The values in indices of are the indices of the selected values during pooling. The indices are computed as flatten 1-D tensor, and the indices do not consider padding. So the values in indices are in [0, N x C x D1 x â¦ x Dn).",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int8)\n,\ntensor(uint8)\n):\nConstrain input and output types to float and 8 bit tensors.\nI\nin (\ntensor(int64)\n):\nConstrain index tensor to int64\nMaxPool - 12 vs 22"
        }
    },
    {
        "name":"MaxRoiPool",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__MaxRoiPool.html#l-onnx-doc-maxroipool",
        "details":{
            "Summary":"ROI max pool consumes an input tensor X and region of interests (RoIs) to\napply max pooling across each RoI, to produce output 4-D tensor of shape\n(num_rois, channels, pooled_shape[0], pooled_shape[1]).",
            "Attributes":"pooled_shape - INTS\n(required) :\nROI pool output shape (height, width).\nspatial_scale - FLOAT\n(default is\n'1.0'\n):\nMultiplicative spatial scale factor to translate ROI coordinates from their input scale to the scale used when pooling.",
            "Inputs":"X\n(heterogeneous) -\nT\n:\nInput data tensor from the previous operator; dimensions for image case are (N x C x H x W), where N is the batch size, C is the number of channels, and H and W are the height and the width of the data.\nrois\n(heterogeneous) -\nT\n:\nRoIs (Regions of Interest) to pool over. Should be a 2-D tensor of shape (num_rois, 5) given as [[batch_id, x1, y1, x2, y2], â¦].",
            "Outputs":"Y\n(heterogeneous) -\nT\n:\nRoI pooled output 4-D tensor of shape (num_rois, channels, pooled_shape[0], pooled_shape[1]).",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n):\nConstrain input and output types to float tensors.\nMaxRoiPool - 1 vs 22"
        }
    },
    {
        "name":"MaxUnpool",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__MaxUnpool.html#l-onnx-doc-maxunpool",
        "details":{
            "Summary":"MaxUnpool essentially computes the partial inverse of the MaxPool op.\nThe input information to this op is typically the output information from a MaxPool op. The first\ninput tensor X is the tensor that needs to be unpooled, which is typically the pooled tensor (first output)\nfrom MaxPool. The second input tensor, I, contains the indices to the (locally maximal) elements corresponding\nto the elements in the first input tensor X. Input tensor I is typically the second output of the MaxPool op.\nThe third (optional) input is a tensor that specifies the output size of the unpooling operation.\nMaxUnpool is intended to do âpartialâ inverse of the MaxPool op. âPartialâ because all the non-maximal\nvalues from the original input to MaxPool are set to zero in the output of the MaxUnpool op. Pooling\nthe result of an unpooling operation should give back the original input to the unpooling op.\nMaxUnpool can produce the same output size for several input sizes, which makes unpooling op ambiguous.\nThe third input argument, output_size, is meant to disambiguate the op and produce output tensor of\nknown\/predictable size.\nIn addition to the inputs, MaxUnpool takes three attributes, namely kernel_shape, strides, and pads,\nwhich define the exact unpooling op. The attributes typically have the same values as the corresponding\npooling op that the unpooling op is trying to invert.",
            "Attributes":"kernel_shape - INTS\n(required) :\nThe size of the kernel along each axis.\npads - INTS\n:\nPadding for the beginning and ending along each spatial axis, it can take any value greater than or equal to 0. The value represent the number of pixels added to the beginning and end part of the corresponding axis.\npads\nformat should be as follow [x1_begin, x2_beginâ¦x1_end, x2_end,â¦], where xi_begin the number of pixels added at the beginning of axis\ni\nand xi_end, the number of pixels added at the end of axis\ni\n. This attribute cannot be used simultaneously with auto_pad attribute. If not present, the padding defaults to 0 along start and end of each spatial axis.\nstrides - INTS\n:\nStride along each spatial axis. If not present, the stride defaults to 1 along each spatial axis.",
            "Inputs":"Between 2 and 3 inputs.\nX\n(heterogeneous) -\nT1\n:\nInput data tensor that has to be unpooled. This tensor is typically the first output of the MaxPool op.Dimensions for image case are (N x C x H x W), where N is the batch size, C is the number of channels, and H and W are the height and the width of the data. For non-image case, the dimensions are in the form of (N x C x D1 x D2 â¦ Dn), where N is the batch size. Optionally, if dimension denotation is in effect, the operation expects the input data tensor to arrive with the dimension denotation of [DATA_BATCH, DATA_CHANNEL, DATA_FEATURE, DATA_FEATURE â¦].\nI\n(heterogeneous) -\nT2\n:\nInput data tensor containing the indices corresponding to elements in the first input tensor X.This tensor is typically the second output of the MaxPool op.Dimensions must be the same as input tensor X. The indices are linear, i.e. computed considering the tensor as flattened 1-D tensor, assuming row-major storage. Also, the linear indices should not consider padding. So the values in indices are in the range [0, N x C x D1 x â¦ x Dn).\noutput_shape\n(optional, heterogeneous) -\nT2\n:\nThe shape of the output can be explicitly set which will cause pads values to be auto generated. If âoutput_shapeâ is specified, âpadsâ values are ignored.",
            "Outputs":"output\n(heterogeneous) -\nT1\n:\nOutput data tensor that contains the result of the unpooling.",
            "Type constraints":"T1\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n):\nConstrain input and output types to float tensors.\nT2\nin (\ntensor(int64)\n):\nConstrain index tensor to int64\nMaxUnpool - 11 vs 22"
        }
    },
    {
        "name":"Mean",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Mean.html#l-onnx-doc-mean",
        "details":{
            "Summary":"Element-wise mean of each of the input tensors (with Numpy-style broadcasting support).\nAll inputs and outputs must have the same data type.\nThis operator supports\nmultidirectional (i.e., Numpy-style) broadcasting\n; for more details please check\nBroadcasting in ONNX\n.",
            "Inputs":"Between 1 and 2147483647 inputs.\ndata_0\n(variadic, heterogeneous) -\nT\n:\nList of tensors for mean.",
            "Outputs":"mean\n(heterogeneous) -\nT\n:\nOutput tensor.",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n):\nConstrain input and output types to float tensors.\nMean - 8 vs 13"
        }
    },
    {
        "name":"MeanVarianceNormalization",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__MeanVarianceNormalization.html#l-onnx-doc-meanvariancenormalization",
        "details":{
            "Summary":"A MeanVarianceNormalization Function: Perform mean variance normalization\non the input tensor X using formula:\n(X-EX)\/sqrt(E(X-EX)^2)\nFunction Body\nÂ¶\nThe function definition for this operator.\n<\ndomain\n:\n\"\"\n,\nopset_import\n:\n[\n\"\"\n:\n18\n]\n>\nMeanVarianceNormalization\n<\naxes\n>\n(\nX\n)\n=>\n(\nY\n)\n{\nExponent\n=\nConstant\n<\nvalue\n:\ntensor\n=\nfloat\n{\n2\n}\n>\n()\nEpsilon\n=\nConstant\n<\nvalue\n:\ntensor\n=\nfloat\n{\n1e-09\n}\n>\n()\naxes\n=\nConstant\n<\nvalue_ints\n:\nints\n=\n@axes\n>\n()\nX_RM\n=\nReduceMean\n(\nX\n,\naxes\n)\nEX_squared\n=\nPow\n(\nX_RM\n,\nExponent\n)\nX_squared\n=\nPow\n(\nX\n,\nExponent\n)\nE_Xsquared\n=\nReduceMean\n(\nX_squared\n,\naxes\n)\nVariance\n=\nSub\n(\nE_Xsquared\n,\nEX_squared\n)\nSTD\n=\nSqrt\n(\nVariance\n)\nX_variance\n=\nSub\n(\nX\n,\nX_RM\n)\nProcessed_STD\n=\nAdd\n(\nSTD\n,\nEpsilon\n)\nY\n=\nDiv\n(\nX_variance\n,\nProcessed_STD\n)\n}",
            "Attributes":"axes - INTS\n(default is\n['0',\n'2',\n'3']\n):\nA list of integers, along which to reduce. The default is to calculate along axes [0,2,3] for calculating mean and variance along each channel. Two variables with the same C-coordinate are associated with the same mean and variance.",
            "Inputs":"X\n(heterogeneous) -\nT\n:\nInput tensor",
            "Outputs":"Y\n(heterogeneous) -\nT\n:\nOutput tensor",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n):\nConstrain input and output types to all numeric tensors.\nMeanVarianceNormalization - 9 vs 13"
        }
    },
    {
        "name":"MelWeightMatrix",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__MelWeightMatrix.html#l-onnx-doc-melweightmatrix",
        "details":{
            "Summary":"Generate a MelWeightMatrix that can be used to re-weight a Tensor containing a linearly sampled frequency spectra (from DFT or STFT) into num_mel_bins frequency information based on the [lower_edge_hertz, upper_edge_hertz] range on the mel scale.\nThis function defines the mel scale in terms of a frequency in hertz according to the following formula:\nmel(f) = 2595 * log10(1 + f\/700)\nIn the returned matrix, all the triangles (filterbanks) have a peak value of 1.0.\nThe returned MelWeightMatrix can be used to right-multiply a spectrogram S of shape [frames, num_spectrogram_bins] of linear scale spectrum values (e.g. STFT magnitudes) to generate a âmel spectrogramâ M of shape [frames, num_mel_bins].",
            "Attributes":"output_datatype - INT\n(default is\n'1'\n):\nThe data type of the output tensor. Strictly must be one of the values from DataType enum in TensorProto whose values correspond to T3. The default value is 1 = FLOAT.",
            "Inputs":"num_mel_bins\n(heterogeneous) -\nT1\n:\nThe number of bands in the mel spectrum.\ndft_length\n(heterogeneous) -\nT1\n:\nThe size of the original DFT. The size of the original DFT is used to infer the size of the onesided DFT, which is understood to be floor(dft_length\/2) + 1, i.e. the spectrogram only contains the nonredundant DFT bins.\nsample_rate\n(heterogeneous) -\nT1\n:\nSamples per second of the input signal used to create the spectrogram. Used to figure out the frequencies corresponding to each spectrogram bin, which dictates how they are mapped into the mel scale.\nlower_edge_hertz\n(heterogeneous) -\nT2\n:\nLower bound on the frequencies to be included in the mel spectrum. This corresponds to the lower edge of the lowest triangular band.\nupper_edge_hertz\n(heterogeneous) -\nT2\n:\nThe desired top edge of the highest frequency band.",
            "Outputs":"output\n(heterogeneous) -\nT3\n:\nThe Mel Weight Matrix. The output has the shape: [floor(dft_length\/2) + 1][num_mel_bins].",
            "Type constraints":"T1\nin (\ntensor(int32)\n,\ntensor(int64)\n):\nConstrain to integer tensors.\nT2\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n):\nConstrain to float tensors\nT3\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain to any numerical types."
        }
    },
    {
        "name":"Min",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Min.html#l-onnx-doc-min",
        "details":{
            "Summary":"Element-wise min of each of the input tensors (with Numpy-style broadcasting support).\nAll inputs and outputs must have the same data type.\nThis operator supports\nmultidirectional (i.e., Numpy-style) broadcasting\n; for more details please check\nBroadcasting in ONNX\n.",
            "Inputs":"Between 1 and 2147483647 inputs.\ndata_0\n(variadic, heterogeneous) -\nT\n:\nList of tensors for min.",
            "Outputs":"min\n(heterogeneous) -\nT\n:\nOutput tensor.",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain input and output types to numeric tensors.\nMin - 12 vs 13"
        }
    },
    {
        "name":"Mish",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Mish.html#l-onnx-doc-mish",
        "details":{
            "Summary":"Mish: A Self Regularized Non-Monotonic Neural Activation Function.\nPerform the linear unit element-wise on the input tensor X using formula:\nmish\n(\nx\n)\n=\nx\n*\ntanh\n(\nsoftplus\n(\nx\n))\n=\nx\n*\ntanh\n(\nln\n(\n1\n+\ne\n^\n{\nx\n}))\nFunction Body\nÂ¶\nThe function definition for this operator.\n<\ndomain\n:\n\"\"\n,\nopset_import\n:\n[\n\"\"\n:\n22\n]\n>\nMish\n(\nX\n)\n=>\n(\nY\n)\n{\nSoftplus_X\n=\nSoftplus\n(\nX\n)\nTanHSoftplusX\n=\nTanh\n(\nSoftplus_X\n)\nY\n=\nMul\n(\nX\n,\nTanHSoftplusX\n)\n}",
            "Inputs":"X\n(heterogeneous) -\nT\n:\nInput tensor",
            "Outputs":"Y\n(heterogeneous) -\nT\n:\nOutput tensor",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n):\nConstrain input X and output types to float tensors.\nMish - 18 vs 22"
        }
    },
    {
        "name":"Mod",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Mod.html#l-onnx-doc-mod",
        "details":{
            "Summary":"Performs an element-wise binary modulo operation.\nThe semantics and supported data types depend on the value of the\nfmod\nattribute which must be\n0\n(default), or\n1\n.\nIf the\nfmod\nattribute is set to\n0\n,\nT\nis constrained to integer data types and the semantics follow that of the Python\n%\n-operator.\nThe sign of the result is that of the divisor.\nIf\nfmod\nis set to\n1\n, the behavior of this operator follows that of the\nfmod\nfunction in C and\nT\nis constrained to floating point data types.\nThe result of this operator is the remainder of the division operation\nx\n\/\ny\nwhere\nx\nand\ny\nare respective elements of\nA\nand\nB\n. The result is exactly the value\nx\n-\nn\n*\ny\n, where\nn\nis\nx\n\/\ny\nwith its fractional part truncated.\nThe returned value has the same sign as\nx\n(except if\nx\nis\n-0\n) and is less or equal to\n|y|\nin magnitude.\nThe following special cases apply when\nfmod\nis set to\n1\n:\nIf\nx\nis\n-0\nand\ny\nis greater than zero, either\n+0\nor\n-0\nmay be returned.\nIf\nx\nis\nÂ±â\nand\ny\nis not\nNaN\n,\nNaN\nis returned.\nIf\ny\nis\nÂ±0\nand\nx\nis not\nNaN\n,\nNaN\nshould be returned.\nIf\ny\nis\nÂ±â\nand\nx\nis finite,\nx\nis returned.\nIf either argument is\nNaN\n,\nNaN\nis returned.\nThis operator supports\nmultidirectional (i.e., NumPy-style) broadcasting\n; for more details please check\nBroadcasting in ONNX\n.",
            "Attributes":"fmod - INT\n(default is\n'0'\n):\nWhether the operator should behave like fmod (default=0 meaning it will do integer mods); Set this to 1 to force fmod treatment",
            "Inputs":"A\n(heterogeneous) -\nT\n:\nDividend tensor\nB\n(heterogeneous) -\nT\n:\nDivisor tensor",
            "Outputs":"C\n(heterogeneous) -\nT\n:\nRemainder tensor",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain input and output types to high-precision numeric tensors.\nMod - 10 vs 13"
        }
    },
    {
        "name":"Mul",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Mul.html#l-onnx-doc-mul",
        "details":{
            "Summary":"Performs element-wise binary multiplication (with Numpy-style broadcasting support).\nThis operator supports\nmultidirectional (i.e., Numpy-style) broadcasting\n; for more details please check\nBroadcasting in ONNX\n.\n(Opset 14 change): Extend supported types to include uint8, int8, uint16, and int16.",
            "Inputs":"A\n(heterogeneous) -\nT\n:\nFirst operand.\nB\n(heterogeneous) -\nT\n:\nSecond operand.",
            "Outputs":"C\n(heterogeneous) -\nT\n:\nResult, has same element type as two inputs",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain input and output types to all numeric tensors.\nMul - 13 vs 14"
        }
    },
    {
        "name":"Multinomial",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Multinomial.html#l-onnx-doc-multinomial",
        "details":{
            "Summary":"Generate a tensor of samples from a multinomial distribution according to the probabilities\nof each of the possible outcomes.",
            "Attributes":"dtype - INT\n(default is\n'6'\n):\n(Optional) The data type for the elements of the output tensor, if not specified, we will use int32.\nsample_size - INT\n(default is\n'1'\n):\nNumber of times to sample.\nseed - FLOAT\n:\n(Optional) Seed to the random generator, if not specified we will auto generate one.",
            "Inputs":"input\n(heterogeneous) -\nT1\n:\nInput tensor with shape [batch_size, class_size], where class_size is the number of all possible outcomes. Each value along the axis zero represents the unnormalized log-probability of each corresponding outcome in a batch.",
            "Outputs":"output\n(heterogeneous) -\nT2\n:\nOutput tensor with shape [batch_size, sample_size], where sample_size is the number of times to sample. Each value along the axis zero represents the outcome of the corresponding sample in a batch.",
            "Type constraints":"T1\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n):\nConstrain input types to float tensors.\nT2\nin (\ntensor(int32)\n,\ntensor(int64)\n):\nConstrain output types to integral tensors.\nMultinomial - 7 vs 22"
        }
    },
    {
        "name":"Neg",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Neg.html#l-onnx-doc-neg",
        "details":{
            "Summary":"Neg takes one input data (Tensor\n) and produces one output data\n(Tensor\n) where each element flipped sign, y = -x, is applied to\nthe tensor elementwise.",
            "Inputs":"X\n(heterogeneous) -\nT\n:\nInput tensor",
            "Outputs":"Y\n(heterogeneous) -\nT\n:\nOutput tensor",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(int8)\n):\nConstrain input and output types to signed numeric tensors.\nNeg - 6 vs 13"
        }
    },
    {
        "name":"NegativeLogLikelihoodLoss",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__NegativeLogLikelihoodLoss.html#l-onnx-doc-negativeloglikelihoodloss",
        "details":{
            "Summary":"A NegativeLogLikelihoodLoss operator computes (weighted) negative log likelihood loss.\nIts âinputâ tensor has the shape of (N, C, d1, d2, â¦, dk) where k >= 0.\nThe âinputâ tensor contains log-probabilities for input[n, :, d_1, d_2,â¦, d_k] being in a class of [0, C).\nThe operatorâs âtargetâ input tensor has the shape of (N, d1, d2, â¦, dk). It encodes class labels (one of C classes)\nor it may contain a special value (indicated by an attribute ignore_index) for N x d1 x d2 x â¦ x dk samples.\nThe loss value for input[n, :, d_1, d_2,â¦d_k] being classified as class c = target[n][d_1][d_2]â¦[d_k] is computed as:\nloss\n[\nn\n][\nd_1\n][\nd_2\n]\n...\n[\nd_k\n]\n=\n-\ninput\n[\nn\n][\nc\n][\nd_1\n][\nd_2\n]\n...\n[\nd_k\n]\n.\nWhen an optional âweightâ is provided, the sample loss is calculated as:\nloss\n[\nn\n][\nd_1\n][\nd_2\n]\n...\n[\nd_k\n]\n=\n-\ninput\n[\nn\n][\nc\n][\nd_1\n][\nd_2\n]\n...\n[\nd_k\n]\n*\nweight\n[\nc\n]\n.\nloss is zero for the case when target-value equals ignore_index.\nloss\n[\nn\n][\nd_1\n][\nd_2\n]\n...\n[\nd_k\n]\n=\n0\n,\nwhen\ntarget\n[\nn\n][\nd_1\n][\nd_2\n]\n...\n[\nd_k\n]\n=\nignore_index\nIf âreductionâ attribute is set to ânoneâ, the operatorâs output will be the above loss with shape (N, d1, d2, â¦, dk).\nIf âreductionâ attribute is set to âmeanâ (the default attribute value), the output loss is (weight) averaged:\nmean\n(\nloss\n),\nif\n\"weight\"\nis\nnot\nprovided\n,\nor if weight is provided,\nsum\n(\nloss\n)\n\/\nsum\n(\nweight\n[\ntarget\n[\nn\n][\nd_1\n][\nd_2\n]\n...\n[\nd_k\n]]]),\nfor\nall\nsamples\n.\nIf âreductionâ attribute is set to âsumâ, the output is a scalar:\nsum(loss)\n.\nSee also\nhttps:\/\/pytorch.org\/docs\/stable\/nn.html#torch.nn.NLLLoss\n.\nExample 1:\n\/\/\nnegative\nlog\nlikelihood\nloss\n,\n\"none\"\nreduction\nN\n,\nC\n,\nd1\n=\n2\n,\n3\n,\n2\ninput\n=\n[[[\n1.0\n,\n2.0\n],\n[\n2.0\n,\n2.0\n],\n[\n3.0\n,\n2.0\n]],\n[[\n0.0\n,\n1.0\n],\n[\n2.0\n,\n2.0\n],\n[\n1.0\n,\n2\n]]]\ntarget\n=\n[[\n2\n,\n1\n],\n[\n0\n,\n2\n]]\nloss\n=\nnp\n.\nzeros\n((\nN\n,\nd1\n))\nfor\nn\nin\nrange\n(\nN\n):\nfor\nd_1\nin\nrange\n(\nd1\n):\nc\n=\ntarget\n[\nn\n][\nd_1\n]\nloss\n[\nn\n][\nd_1\n]\n=\n-\ninput\n[\nn\n][\nc\n][\nd_1\n]\n\/\/\nprint\n(\nloss\n)\n\/\/\n[[\n-\n3.\n-\n2.\n]\n\/\/\n[\n-\n0.\n-\n2.\n]]\nExample 2:\n\/\/\nweighted\nnegative\nlog\nlikelihood\nloss\n,\nsum\nreduction\nN\n,\nC\n,\nd1\n=\n2\n,\n3\n,\n2\ninput\n=\n[[[\n1.0\n,\n2.0\n],\n[\n2.0\n,\n2.0\n],\n[\n3.0\n,\n2.0\n]],\n[[\n0.0\n,\n1.0\n],\n[\n2.0\n,\n2.0\n],\n[\n1.0\n,\n2\n]]]\ntarget\n=\n[[\n2\n,\n1\n],\n[\n0\n,\n2\n]]\nweight\n=\n[\n0.2\n,\n0.3\n,\n0.1\n]\nloss\n=\nnp\n.\nzeros\n((\nN\n,\nd1\n))\nfor\nn\nin\nrange\n(\nN\n):\nfor\nd_1\nin\nrange\n(\nd1\n):\nc\n=\ntarget\n[\nn\n][\nd_1\n]\nloss\n[\nn\n][\nd_1\n]\n=\n-\ninput\n[\nn\n][\nc\n][\nd_1\n]\n*\nweight\n[\nc\n]\nloss\n=\nnp\n.\nsum\n(\nloss\n)\n\/\/\nprint\n(\nloss\n)\n\/\/\n-\n1.1\nExample 3:\n\/\/\nweighted\nnegative\nlog\nlikelihood\nloss\n,\nmean\nreduction\nN\n,\nC\n,\nd1\n=\n2\n,\n3\n,\n2\ninput\n=\n[[[\n1.0\n,\n2.0\n],\n[\n2.0\n,\n2.0\n],\n[\n3.0\n,\n2.0\n]],\n[[\n0.0\n,\n1.0\n],\n[\n2.0\n,\n2.0\n],\n[\n1.0\n,\n2\n]]]\ntarget\n=\n[[\n2\n,\n1\n],\n[\n0\n,\n2\n]]\nweight\n=\n[\n0.2\n,\n0.3\n,\n0.1\n]\nloss\n=\nnp\n.\nzeros\n((\nN\n,\nd1\n))\nweight_total\n=\n0\nfor\nn\nin\nrange\n(\nN\n):\nfor\nd_1\nin\nrange\n(\nd1\n):\nc\n=\ntarget\n[\nn\n][\nd_1\n]\nloss\n[\nn\n][\nd_1\n]\n=\n-\ninput\n[\nn\n][\nc\n][\nd_1\n]\n*\nweight\n[\nc\n]\nweight_total\n=\nweight_total\n+\nweight\n[\nc\n]\nloss\n=\nnp\n.\nsum\n(\nloss\n)\n\/\nweight_total\n\/\/\nprint\n(\nloss\n)\n\/\/\n-\n1.57",
            "Attributes":"ignore_index - INT\n:\nSpecifies a target value that is ignored and does not contribute to the input gradient. Itâs an optional value.\nreduction - STRING\n(default is\n'mean'\n):\nType of reduction to apply to loss: none, sum, mean (default). ânoneâ: the output is the loss for each sample. âsumâ: the output will be summed. âmeanâ: the sum of the output will be divided by the sum of applied weights.",
            "Inputs":"Between 2 and 3 inputs.\ninput\n(heterogeneous) -\nT\n:\nInput tensor of shape (N, C) or (N, C, d1, d2, â¦, dk).\ntarget\n(heterogeneous) -\nTind\n:\nTarget tensor of shape (N) or (N, d1, d2, â¦, dk). Target element value shall be in range of [0, C). If ignore_index is specified, it may have a value outside [0, C) and the target values should either be in the range [0, C) or have the value ignore_index.\nweight\n(optional, heterogeneous) -\nT\n:\nOptional rescaling weight tensor. If given, it has to be a tensor of size C. Otherwise, it is treated as if having all ones.",
            "Outputs":"loss\n(heterogeneous) -\nT\n:\nThe negative log likelihood loss",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n):\nConstrain input, weight, and output types to floating-point tensors.\nTind\nin (\ntensor(int32)\n,\ntensor(int64)\n):\nConstrain target to integer types\nNegativeLogLikelihoodLoss - 13 vs 22"
        }
    },
    {
        "name":"NonMaxSuppression",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__NonMaxSuppression.html#l-onnx-doc-nonmaxsuppression",
        "details":{
            "Summary":"Filter out boxes that have high intersection-over-union (IOU) overlap with previously selected boxes.\nBounding boxes with score less than score_threshold are removed. Bounding box format is indicated by attribute center_point_box.\nNote that this algorithm is agnostic to where the origin is in the coordinate system and more generally is invariant to\northogonal transformations and translations of the coordinate system; thus translating or reflections of the coordinate system\nresult in the same boxes being selected by the algorithm.\nThe selected_indices output is a set of integers indexing into the input collection of bounding boxes representing the selected boxes.\nThe bounding box coordinates corresponding to the selected indices can then be obtained using the Gather or GatherND operation.",
            "Attributes":"center_point_box - INT\n(default is\n'0'\n):\nInteger indicate the format of the box data. The default is 0. 0 - the box data is supplied as [y1, x1, y2, x2] where (y1, x1) and (y2, x2) are the coordinates of any diagonal pair of box corners and the coordinates can be provided as normalized (i.e., lying in the interval [0, 1]) or absolute. Mostly used for TF models. 1 - the box data is supplied as [x_center, y_center, width, height]. Mostly used for Pytorch models.",
            "Inputs":"Between 2 and 5 inputs.\nboxes\n(heterogeneous) -\ntensor(float)\n:\nAn input tensor with shape [num_batches, spatial_dimension, 4]. The single box data format is indicated by center_point_box.\nscores\n(heterogeneous) -\ntensor(float)\n:\nAn input tensor with shape [num_batches, num_classes, spatial_dimension]\nmax_output_boxes_per_class\n(optional, heterogeneous) -\ntensor(int64)\n:\nInteger representing the maximum number of boxes to be selected per batch per class. It is a scalar. Default to 0, which means no output.\niou_threshold\n(optional, heterogeneous) -\ntensor(float)\n:\nFloat representing the threshold for deciding whether boxes overlap too much with respect to IOU. It is scalar. Value range [0, 1]. Default to 0.\nscore_threshold\n(optional, heterogeneous) -\ntensor(float)\n:\nFloat representing the threshold for deciding when to remove boxes based on score. It is a scalar.",
            "Outputs":"selected_indices\n(heterogeneous) -\ntensor(int64)\n:\nselected indices from the boxes tensor. [num_selected_indices, 3], the selected index format is [batch_index, class_index, box_index].\nNonMaxSuppression - 10 vs 11"
        }
    },
    {
        "name":"NonZero",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__NonZero.html#l-onnx-doc-nonzero",
        "details":{
            "Summary":"Returns the indices of the elements that are non-zero\n(in row-major order - by dimension).\nNonZero behaves similar to numpy.nonzero:\nhttps:\/\/docs.scipy.org\/doc\/numpy\/reference\/generated\/numpy.nonzero.html\n,\nbut for scalar input, NonZero produces output shape (0, N) instead of (1, N), which is different from Numpyâs behavior.",
            "Inputs":"X\n(heterogeneous) -\nT\n:\ninput",
            "Outputs":"Y\n(heterogeneous) -\ntensor(int64)\n:\noutput",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(bool)\n,\ntensor(complex128)\n,\ntensor(complex64)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(string)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain to all tensor types.\nNonZero - 9 vs 13"
        }
    },
    {
        "name":"Not",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Not.html#l-onnx-doc-not",
        "details":{
            "Summary":"Returns the negation of the input tensor element-wise.",
            "Inputs":"X\n(heterogeneous) -\nT\n:\nInput tensor",
            "Outputs":"Y\n(heterogeneous) -\nT\n:\nOutput tensor",
            "Type constraints":"T\nin (\ntensor(bool)\n):\nConstrain input\/output to boolean tensors."
        }
    },
    {
        "name":"OneHot",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__OneHot.html#l-onnx-doc-onehot",
        "details":{
            "Summary":"Produces a one-hot tensor based on inputs.\nThe locations represented by the index values in the âindicesâ input tensor will have âon_valueâ\nand the other locations will have âoff_valueâ in the output tensor, where âon_valueâ and âoff_valueâ\nare specified as part of required input argument âvaluesâ, which is a two-element tensor of format\n[off_value, on_value]. The rank of the output tensor will be one greater than the rank of the\ninput tensor. The additional dimension is for one-hot representation. The additional dimension will\nbe inserted at the position specified by âaxisâ. If âaxisâ is not specified then then additional\ndimension will be inserted as the innermost dimension, i.e. axis=-1. The size of the additional\ndimension is specified by required scalar input âdepthâ. The type of the output tensor is the same\nas the type of the âvaluesâ input. Any entries in the âindicesâ input tensor with values outside\nthe range [-depth, depth-1] will result in one-hot representation with all âoff_valueâ values in the\noutput tensor.\nwhen axis = 0:\noutput[input[i, j, k], i, j, k] = 1 for all i, j, k and 0 otherwise.\nwhen axis = -1:\noutput[i, j, k, input[i, j, k]] = 1 for all i, j, k and 0 otherwise.",
            "Attributes":"axis - INT\n(default is\n'-1'\n):\n(Optional) Axis along which one-hot representation in added. Default: axis=-1. axis=-1 means that the additional dimension will be inserted as the innermost\/last dimension in the output tensor. Negative value means counting dimensions from the back. Accepted range is [-r-1, r] where r = rank(indices).",
            "Inputs":"indices\n(heterogeneous) -\nT1\n:\nInput tensor containing indices. Any entries in the âindicesâ input tensor with values outside the range [-depth, depth-1] will result in one-hot representation with all âoff_valueâ values in the output\ntensor.In\ncase âindicesâ is of non-integer type, the values will be casted to int64 before use.\ndepth\n(heterogeneous) -\nT2\n:\nScalar or Rank 1 tensor containing exactly one element, specifying the number of classes in one-hot tensor. This is also the size of the one-hot dimension (specified by âaxisâ attribute) added on in the output tensor. The values in the âindicesâ input tensor are expected to be in the range [-depth, depth-1]. In case âdepthâ is of non-integer type, it will be casted to int64 before use.\nvalues\n(heterogeneous) -\nT3\n:\nRank 1 tensor containing exactly two elements, in the format [off_value, on_value], where âon_valueâ is the value used for filling locations specified in âindicesâ input tensor, and âoff_valueâ is the value used for filling locations other than those specified in âindicesâ input tensor.",
            "Outputs":"output\n(heterogeneous) -\nT3\n:\nTensor of rank one greater than input tensor âindicesâ, i.e. rank(output) = rank(indices) + 1. The data type for the elements of the output tensor is the same as the type of input âvaluesâ is used.",
            "Type constraints":"T1\nin (\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain input to only numeric types.\nT2\nin (\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain input to only numeric types.\nT3\nin (\ntensor(bool)\n,\ntensor(complex128)\n,\ntensor(complex64)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(string)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain to any tensor type.\nOneHot - 9 vs 11"
        }
    },
    {
        "name":"Optional",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Optional.html#l-onnx-doc-optional",
        "details":{
            "Summary":"Constructs an optional-type value containing either an empty optional of a certain type specified by the attribute,\nor a non-empty value containing the input element.",
            "Attributes":"type - TYPE_PROTO\n:\nType of the element in the optional output",
            "Inputs":"Between 0 and 1 inputs.\ninput\n(optional, heterogeneous) -\nV\n:\nThe input element.",
            "Outputs":"output\n(heterogeneous) -\nO\n:\nThe optional output enclosing the input element.",
            "Type constraints":"V\nin (\nseq(tensor(bool))\n,\nseq(tensor(complex128))\n,\nseq(tensor(complex64))\n,\nseq(tensor(double))\n,\nseq(tensor(float))\n,\nseq(tensor(float16))\n,\nseq(tensor(int16))\n,\nseq(tensor(int32))\n,\nseq(tensor(int64))\n,\nseq(tensor(int8))\n,\nseq(tensor(string))\n,\nseq(tensor(uint16))\n,\nseq(tensor(uint32))\n,\nseq(tensor(uint64))\n,\nseq(tensor(uint8))\n,\ntensor(bool)\n,\ntensor(complex128)\n,\ntensor(complex64)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(string)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain input type to all tensor and sequence types.\nO\nin (\noptional(seq(tensor(bool)))\n,\noptional(seq(tensor(complex128)))\n,\noptional(seq(tensor(complex64)))\n,\noptional(seq(tensor(double)))\n,\noptional(seq(tensor(float)))\n,\noptional(seq(tensor(float16)))\n,\noptional(seq(tensor(int16)))\n,\noptional(seq(tensor(int32)))\n,\noptional(seq(tensor(int64)))\n,\noptional(seq(tensor(int8)))\n,\noptional(seq(tensor(string)))\n,\noptional(seq(tensor(uint16)))\n,\noptional(seq(tensor(uint32)))\n,\noptional(seq(tensor(uint64)))\n,\noptional(seq(tensor(uint8)))\n,\noptional(tensor(bool))\n,\noptional(tensor(complex128))\n,\noptional(tensor(complex64))\n,\noptional(tensor(double))\n,\noptional(tensor(float))\n,\noptional(tensor(float16))\n,\noptional(tensor(int16))\n,\noptional(tensor(int32))\n,\noptional(tensor(int64))\n,\noptional(tensor(int8))\n,\noptional(tensor(string))\n,\noptional(tensor(uint16))\n,\noptional(tensor(uint32))\n,\noptional(tensor(uint64))\n,\noptional(tensor(uint8))\n):\nConstrain output type to all optional tensor or optional sequence types."
        }
    },
    {
        "name":"OptionalGetElement",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__OptionalGetElement.html#l-onnx-doc-optionalgetelement",
        "details":{
            "Summary":"If the input is a tensor or sequence type, it returns the input.\nIf the input is an optional type, it outputs the element in the input.\nIt is an error if the input is an empty optional-type (i.e. does not have an element) and the behavior is undefined in this case.",
            "Inputs":"input\n(heterogeneous) -\nO\n:\nThe optional input.",
            "Outputs":"output\n(heterogeneous) -\nV\n:\nOutput element in the optional input.",
            "Type constraints":"O\nin (\noptional(seq(tensor(bool)))\n,\noptional(seq(tensor(complex128)))\n,\noptional(seq(tensor(complex64)))\n,\noptional(seq(tensor(double)))\n,\noptional(seq(tensor(float)))\n,\noptional(seq(tensor(float16)))\n,\noptional(seq(tensor(int16)))\n,\noptional(seq(tensor(int32)))\n,\noptional(seq(tensor(int64)))\n,\noptional(seq(tensor(int8)))\n,\noptional(seq(tensor(string)))\n,\noptional(seq(tensor(uint16)))\n,\noptional(seq(tensor(uint32)))\n,\noptional(seq(tensor(uint64)))\n,\noptional(seq(tensor(uint8)))\n,\noptional(tensor(bool))\n,\noptional(tensor(complex128))\n,\noptional(tensor(complex64))\n,\noptional(tensor(double))\n,\noptional(tensor(float))\n,\noptional(tensor(float16))\n,\noptional(tensor(int16))\n,\noptional(tensor(int32))\n,\noptional(tensor(int64))\n,\noptional(tensor(int8))\n,\noptional(tensor(string))\n,\noptional(tensor(uint16))\n,\noptional(tensor(uint32))\n,\noptional(tensor(uint64))\n,\noptional(tensor(uint8))\n,\nseq(tensor(bool))\n,\nseq(tensor(complex128))\n,\nseq(tensor(complex64))\n,\nseq(tensor(double))\n,\nseq(tensor(float))\n,\nseq(tensor(float16))\n,\nseq(tensor(int16))\n,\nseq(tensor(int32))\n,\nseq(tensor(int64))\n,\nseq(tensor(int8))\n,\nseq(tensor(string))\n,\nseq(tensor(uint16))\n,\nseq(tensor(uint32))\n,\nseq(tensor(uint64))\n,\nseq(tensor(uint8))\n,\ntensor(bool)\n,\ntensor(complex128)\n,\ntensor(complex64)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(string)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain input type to optional tensor and optional sequence types.\nV\nin (\nseq(tensor(bool))\n,\nseq(tensor(complex128))\n,\nseq(tensor(complex64))\n,\nseq(tensor(double))\n,\nseq(tensor(float))\n,\nseq(tensor(float16))\n,\nseq(tensor(int16))\n,\nseq(tensor(int32))\n,\nseq(tensor(int64))\n,\nseq(tensor(int8))\n,\nseq(tensor(string))\n,\nseq(tensor(uint16))\n,\nseq(tensor(uint32))\n,\nseq(tensor(uint64))\n,\nseq(tensor(uint8))\n,\ntensor(bool)\n,\ntensor(complex128)\n,\ntensor(complex64)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(string)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain output type to all tensor or sequence types.\nOptionalGetElement - 15 vs 18"
        }
    },
    {
        "name":"OptionalHasElement",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__OptionalHasElement.html#l-onnx-doc-optionalhaselement",
        "details":{
            "Summary":"Returns true if (1) the input is an optional-type and contains an element,\nor, (2) the input is a tensor or sequence type.\nIf the input is not provided or is an empty optional-type, this op returns false.",
            "Inputs":"Between 0 and 1 inputs.\ninput\n(optional, heterogeneous) -\nO\n:\nThe optional input.",
            "Outputs":"output\n(heterogeneous) -\nB\n:\nA scalar boolean tensor. If true, it indicates that optional-type input contains an element. Otherwise, it is empty.",
            "Type constraints":"O\nin (\noptional(seq(tensor(bool)))\n,\noptional(seq(tensor(complex128)))\n,\noptional(seq(tensor(complex64)))\n,\noptional(seq(tensor(double)))\n,\noptional(seq(tensor(float)))\n,\noptional(seq(tensor(float16)))\n,\noptional(seq(tensor(int16)))\n,\noptional(seq(tensor(int32)))\n,\noptional(seq(tensor(int64)))\n,\noptional(seq(tensor(int8)))\n,\noptional(seq(tensor(string)))\n,\noptional(seq(tensor(uint16)))\n,\noptional(seq(tensor(uint32)))\n,\noptional(seq(tensor(uint64)))\n,\noptional(seq(tensor(uint8)))\n,\noptional(tensor(bool))\n,\noptional(tensor(complex128))\n,\noptional(tensor(complex64))\n,\noptional(tensor(double))\n,\noptional(tensor(float))\n,\noptional(tensor(float16))\n,\noptional(tensor(int16))\n,\noptional(tensor(int32))\n,\noptional(tensor(int64))\n,\noptional(tensor(int8))\n,\noptional(tensor(string))\n,\noptional(tensor(uint16))\n,\noptional(tensor(uint32))\n,\noptional(tensor(uint64))\n,\noptional(tensor(uint8))\n,\nseq(tensor(bool))\n,\nseq(tensor(complex128))\n,\nseq(tensor(complex64))\n,\nseq(tensor(double))\n,\nseq(tensor(float))\n,\nseq(tensor(float16))\n,\nseq(tensor(int16))\n,\nseq(tensor(int32))\n,\nseq(tensor(int64))\n,\nseq(tensor(int8))\n,\nseq(tensor(string))\n,\nseq(tensor(uint16))\n,\nseq(tensor(uint32))\n,\nseq(tensor(uint64))\n,\nseq(tensor(uint8))\n,\ntensor(bool)\n,\ntensor(complex128)\n,\ntensor(complex64)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(string)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain input type to optional tensor and optional sequence types.\nB\nin (\ntensor(bool)\n):\nConstrain output to a boolean tensor.\nOptionalHasElement - 15 vs 18"
        }
    },
    {
        "name":"Or",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Or.html#l-onnx-doc-or",
        "details":{
            "Summary":"Returns the tensor resulted from performing the\nor\nlogical operation\nelementwise on the input tensors\nA\nand\nB\n(with Numpy-style broadcasting support).\nThis operator supports\nmultidirectional (i.e., Numpy-style) broadcasting\n; for more details please check\nBroadcasting in ONNX\n.",
            "Inputs":"A\n(heterogeneous) -\nT\n:\nFirst input operand for the logical operator.\nB\n(heterogeneous) -\nT\n:\nSecond input operand for the logical operator.",
            "Outputs":"C\n(heterogeneous) -\nT1\n:\nResult tensor.",
            "Type constraints":"T\nin (\ntensor(bool)\n):\nConstrain input to boolean tensor.\nT1\nin (\ntensor(bool)\n):\nConstrain output to boolean tensor.\nOr - 1 vs 7"
        }
    },
    {
        "name":"PRelu",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__PRelu.html#l-onnx-doc-prelu",
        "details":{
            "Summary":"PRelu takes input data (Tensor\n) and slope tensor as input, and produces one\noutput data (Tensor\n) where the function\nf(x)\n=\nslope\n*\nx\nfor\nx\n<\n0\n,\nf(x)\n=\nx\nfor\nx\n>=\n0\n., is applied to the data tensor elementwise.\nThis operator supports\nunidirectional broadcasting\n(tensor slope should be unidirectional broadcastable to input tensor X); for more details please check\nBroadcasting in ONNX\n.\nFunction Body\nÂ¶\nThe function definition for this operator.\n<\ndomain\n:\n\"\"\n,\nopset_import\n:\n[\n\"\"\n:\n16\n]\n>\nPRelu\n(\nX\n,\nslope\n)\n=>\n(\nY\n)\n{\nZero\n=\nConstant\n<\nvalue\n:\ntensor\n=\nfloat\n{\n0\n}\n>\n()\nZeroCast\n=\nCastLike\n(\nZero\n,\nX\n)\nXLessThanZero\n=\nLess\n(\nX\n,\nZeroCast\n)\nSlopeMulX\n=\nMul\n(\nslope\n,\nX\n)\nY\n=\nWhere\n(\nXLessThanZero\n,\nSlopeMulX\n,\nX\n)\n}",
            "Inputs":"X\n(heterogeneous) -\nT\n:\nInput tensor\nslope\n(heterogeneous) -\nT\n:\nSlope tensor. The shape of slope can be smaller than first input X; if so, its shape must be unidirectional broadcastable to X",
            "Outputs":"Y\n(heterogeneous) -\nT\n:\nOutput tensor (same size as X)",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(uint32)\n,\ntensor(uint64)\n):\nConstrain input and output types to float\/int tensors.\nPRelu - 9 vs 16"
        }
    },
    {
        "name":"Pad",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Pad.html#l-onnx-doc-pad",
        "details":{
            "Summary":"Given a tensor containing the data to be padded (\ndata\n), a tensor containing the number of start and end pad values for axis (\npads\n), (optionally) a\nmode\n, and (optionally)\nconstant_value\n,\na padded tensor (\noutput\n) is generated.\nThe three supported\nmodes\nare (similar to corresponding modes supported by\nnumpy.pad\n):\nconstant\n(default) - pads with a given constant value as specified by\nconstant_value\n(which defaults to 0, empty string, or False)\nreflect\n- pads with the reflection of the vector mirrored on the first and last values of the vector along each axis\nedge\n- pads with the edge values of array\nwrap\n- wrap-around padding as if the data tensor forms a torus\nExample 1 (\nconstant\nmode):\nInsert 0 pads to the beginning of the second dimension.\ndata\n=\n[\n[\n1.0\n,\n1.2\n],\n[\n2.3\n,\n3.4\n],\n[\n4.5\n,\n5.7\n],\n]\npads\n=\n[\n0\n,\n2\n,\n0\n,\n0\n]\nmode\n=\n'constant'\nconstant_value\n=\n0.0\noutput\n=\n[\n[\n0.0\n,\n0.0\n,\n1.0\n,\n1.2\n],\n[\n0.0\n,\n0.0\n,\n2.3\n,\n3.4\n],\n[\n0.0\n,\n0.0\n,\n4.5\n,\n5.7\n],\n]\nExample 2 (\nreflect\nmode):\ndata\n=\n[\n[\n1.0\n,\n1.2\n],\n[\n2.3\n,\n3.4\n],\n[\n4.5\n,\n5.7\n],\n]\npads\n=\n[\n0\n,\n2\n,\n0\n,\n0\n]\nmode\n=\n'reflect'\noutput\n=\n[\n[\n1.0\n,\n1.2\n,\n1.0\n,\n1.2\n],\n[\n2.3\n,\n3.4\n,\n2.3\n,\n3.4\n],\n[\n4.5\n,\n5.7\n,\n4.5\n,\n5.7\n],\n]\nExample 3 (\nedge\nmode):\ndata\n=\n[\n[\n1.0\n,\n1.2\n],\n[\n2.3\n,\n3.4\n],\n[\n4.5\n,\n5.7\n],\n]\npads\n=\n[\n0\n,\n2\n,\n0\n,\n0\n]\nmode\n=\n'edge'\noutput\n=\n[\n[\n1.0\n,\n1.0\n,\n1.0\n,\n1.2\n],\n[\n2.3\n,\n2.3\n,\n2.3\n,\n3.4\n],\n[\n4.5\n,\n4.5\n,\n4.5\n,\n5.7\n],\n]\nExample 4 (\nwrap\nmode):\ndata\n=\n[\n[\n1.0\n,\n1.2\n],\n[\n2.3\n,\n3.4\n],\n[\n4.5\n,\n5.7\n],\n]\npads\n=\n[\n2\n,\n1\n,\n1\n,\n1\n]\nmode\n=\n'wrap'\noutput\n=\n[\n[\n3.4\n,\n2.3\n,\n3.4\n,\n2.3\n],\n[\n5.7\n,\n4.5\n,\n5.7\n,\n4.5\n],\n[\n1.2\n,\n1.0\n,\n1.2\n,\n1.0\n],\n[\n3.4\n,\n2.3\n,\n3.4\n,\n2.3\n],\n[\n5.7\n,\n4.5\n,\n5.7\n,\n4.5\n],\n[\n1.2\n,\n1.0\n,\n1.2\n,\n1.0\n],\n]",
            "Attributes":"mode - STRING\n(default is\n'constant'\n):\nSupported modes:\nconstant\n(default),\nreflect\n,\nedge\n,\nwrap",
            "Inputs":"Between 2 and 4 inputs.\ndata\n(heterogeneous) -\nT\n:\nInput tensor.\npads\n(heterogeneous) -\ntensor(int64)\n:\nTensor of integers indicating the number of padding elements to add or remove (if negative) at the beginning and end of each axis. For 2D input tensor, it is the number of pixels.\npads\nshould be a 1D tensor of shape [2 * num_axes] where\nnum_axes\nrefers to the number of elements in the\naxes\ninput or the input rank if\naxes\nare not provided explicitly.\npads\nformat should be: [x1_begin, x2_begin, â¦, x1_end, x2_end,â¦], where xi_begin is the number of pad values added at the beginning of axis\naxes[i]\nand xi_end, the number of pad values added at the end of axis\naxes[i]\n.\nconstant_value\n(optional, heterogeneous) -\nT\n:\n(Optional) A scalar value to be used if the mode chosen is\nconstant\n(by default it is 0, empty string or False).\naxes\n(optional, heterogeneous) -\nTind\n:\n1-D tensor of axes that\npads\napply to. Negative value means counting dimensions from the back. Accepted range is [-r, r-1] where r = rank(data). Behavior is undefined if an axis is repeated. If not provided, all axes are assumed (\n[0,\n1,\n...,\ninput_rank-1]\n).",
            "Outputs":"output\n(heterogeneous) -\nT\n:\nTensor after padding.",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(bool)\n,\ntensor(complex128)\n,\ntensor(complex64)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(float4e2m1)\n,\ntensor(float8e4m3fn)\n,\ntensor(float8e4m3fnuz)\n,\ntensor(float8e5m2)\n,\ntensor(float8e5m2fnuz)\n,\ntensor(float8e8m0)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int4)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(string)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint4)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain input and output types to all tensor types up to IRv12.\nTind\nin (\ntensor(int32)\n,\ntensor(int64)\n):\nConstrain indices to integer types\nPad - 23 vs 24"
        }
    },
    {
        "name":"Pow",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Pow.html#l-onnx-doc-pow",
        "details":{
            "Summary":"Pow takes input data (Tensor\n) and exponent Tensor, and\nproduces one output data (Tensor\n) where the function\nf(x)\n=\nx^exponent\n,\nis applied to the data tensor elementwise.\nThis operator supports\nmultidirectional (i.e., Numpy-style) broadcasting\n; for more details please check\nBroadcasting in ONNX\n.",
            "Inputs":"X\n(heterogeneous) -\nT\n:\nFirst operand, base of the exponent.\nY\n(heterogeneous) -\nT1\n:\nSecond operand, power of the exponent.",
            "Outputs":"Z\n(heterogeneous) -\nT\n:\nOutput tensor",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int32)\n,\ntensor(int64)\n):\nConstrain input X and output types to float\/int tensors.\nT1\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain input Y types to float\/int tensors.\nPow - 13 vs 15"
        }
    },
    {
        "name":"QLinearConv",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__QLinearConv.html#l-onnx-doc-qlinearconv",
        "details":{
            "Summary":"The convolution operator consumes a quantized input tensor, its scale and zero point,\na quantized filter, its scale and zero point, and outputâs scale and zero point,\nand computes the quantized output. Each scale and zero-point pair must have same shape.\nIt means they must be either scalars (per tensor) or 1-D tensors (per output channel).\nEach input or output and its related zero point must have same type.\nWhen bias is present it must be quantized using scale = input scale * weight scale and\nzero point as 0.",
            "Attributes":"auto_pad - STRING\n(default is\n'NOTSET'\n):\nauto_pad must be either NOTSET, SAME_UPPER, SAME_LOWER or VALID. Where default value is NOTSET, which means explicit padding is used. SAME_UPPER or SAME_LOWER mean pad the input so that\noutput_shape[i]\n=\nceil(input_shape[i]\n\/\nstrides[i])\nfor each axis\ni\n. The padding is split between the two sides equally or almost equally (depending on whether it is even or odd). In case the padding is an odd number, the extra padding is added at the end for SAME_UPPER and at the beginning for SAME_LOWER.\ndilations - INTS\n:\ndilation value along each spatial axis of the filter. If not present, the dilation defaults to 1 along each spatial axis.\ngroup - INT\n(default is\n'1'\n):\nnumber of groups input channels and output channels are divided into. default is 1.\nkernel_shape - INTS\n:\nThe shape of the convolution kernel. If not present, should be inferred from input âwâ.\npads - INTS\n:\nPadding for the beginning and ending along each spatial axis, it can take any value greater than or equal to 0.The value represent the number of pixels added to the beginning and end part of the corresponding axis.\npads\nformat should be as follow [x1_begin, x2_beginâ¦x1_end, x2_end,â¦], where xi_begin the number ofpixels added at the beginning of axis\ni\nand xi_end, the number of pixels added at the end of axis\ni\n.This attribute cannot be used simultaneously with auto_pad attribute. If not present, the padding defaultsto 0 along start and end of each spatial axis.\nstrides - INTS\n:\nStride along each spatial axis. If not present, the stride defaults to 1 along each spatial axis.",
            "Inputs":"Between 8 and 9 inputs.\nx\n(heterogeneous) -\nT1\n:\nInput data tensor from previous layer; has size (N x C x H x W), where N is the batch size, C is the number of channels, and H and W are the height and width. Note that this is for the 2D image. Otherwise the size is (N x C x D1 x D2 â¦ x Dn). Optionally, if dimension denotation is in effect, the operation expects input data tensor to arrive with the dimension denotation of [DATA_BATCH, DATA_CHANNEL, DATA_FEATURE, DATA_FEATURE â¦].\nx_scale\n(heterogeneous) -\ntensor(float)\n:\nScale tensor for input âxâ. Itâs a scalar, which means a per-tensor\/layer quantization.\nx_zero_point\n(heterogeneous) -\nT1\n:\nZero point tensor for input âxâ. Itâs a scalar, which means a per-tensor\/layer quantization.\nw\n(heterogeneous) -\nT2\n:\nThe weight tensor that will be used in the convolutions; has size (M x C\/group x kH x kW), where C is the number of channels, and kH and kW are the height and width of the kernel, and M is the number of feature maps. For more than 2 dimensions, the kernel shape will be (M x C\/group x k1 x k2 x â¦ x kn), where (k1 x k2 x â¦ kn) is the dimension of the kernel. Optionally, if dimension denotation is in effect, the operation expects the weight tensor to arrive with the dimension denotation of [FILTER_OUT_CHANNEL, FILTER_IN_CHANNEL, FILTER_SPATIAL, FILTER_SPATIAL â¦]. X.shape[1] == (W.shape[1] * group) == C (assuming zero based indices for the shape array). Or in other words FILTER_IN_CHANNEL should be equal to DATA_CHANNEL.\nw_scale\n(heterogeneous) -\ntensor(float)\n:\nScale tensor for input âwâ. It could be a scalar or a 1-D tensor, which means a per-tensor\/layer or per output channel quantization. If itâs a 1-D tensor, its number of elements should be equal to the number of output channels (M).\nw_zero_point\n(heterogeneous) -\nT2\n:\nZero point tensor for input âwâ. It could be a scalar or a 1-D tensor, which means a per-tensor\/layer or per output channel quantization. If itâs a 1-D tensor, its number of elements should be equal to the number of output channels (M).\ny_scale\n(heterogeneous) -\ntensor(float)\n:\nScale tensor for output âyâ. Itâs a scalar, which means a per-tensor\/layer quantization.\ny_zero_point\n(heterogeneous) -\nT3\n:\nZero point tensor for output âyâ. Itâs a scalar, which means a per-tensor\/layer quantization.\nB\n(optional, heterogeneous) -\nT4\n:\nOptional 1D bias to be added to the convolution, has size of M. Bias must be quantized using scale = x_scale * w_scale and zero_point = 0",
            "Outputs":"y\n(heterogeneous) -\nT3\n:\nOutput data tensor that contains the result of the convolution. The output dimensions are functions of the kernel size, stride size, and pad lengths.",
            "Type constraints":"T1\nin (\ntensor(int8)\n,\ntensor(uint8)\n):\nConstrain input type to 8-bit integer tensor.\nT2\nin (\ntensor(int8)\n,\ntensor(uint8)\n):\nConstrain filter type to 8-bit integer tensor.\nT3\nin (\ntensor(int8)\n,\ntensor(uint8)\n):\nConstrain output type to 8-bit integer tensor.\nT4\nin (\ntensor(int32)\n):\nConstrain bias type to 32-bit integer tensor."
        }
    },
    {
        "name":"QLinearMatMul",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__QLinearMatMul.html#l-onnx-doc-qlinearmatmul",
        "details":{
            "Summary":"Matrix product that behaves like\nnumpy.matmul\n.\nIt consumes two quantized input tensors, their scales and zero points, scale and zero point of output,\nand computes the quantized output. The quantization formula is y = saturate((x \/ y_scale) + y_zero_point).\nFor (x \/ y_scale), it is rounding to nearest ties to even. Refer to\nhttps:\/\/en.wikipedia.org\/wiki\/Rounding\nfor details.\nScale and zero point must have same shape. They must be either scalar (per tensor) or N-D tensor\n(per row for âaâ and per column for âbâ). Scalar refers to per tensor quantization whereas N-D refers to per row\nor per column quantization. If the input is 2D of shape [M, K] then zero point and scale tensor may be\nan M element vector [v_1, v_2, â¦, v_M] for per row quantization and K element vector of shape [v_1, v_2, â¦, v_K]\nfor per column quantization. If the input is N-D tensor with shape [D1, D2, M, K] then zero point and scale tensor may\nhave shape [D1, D2, M, 1] for per row quantization and shape [D1, D2, 1, K] for per column quantization.\nProduction must never overflow, and accumulation may overflow if and only if in 32 bits.",
            "Inputs":"a\n(heterogeneous) -\nT1\n:\nN-dimensional quantized matrix a\na_scale\n(heterogeneous) -\nTS\n:\nscale of quantized input a\na_zero_point\n(heterogeneous) -\nT1\n:\nzero point of quantized input a\nb\n(heterogeneous) -\nT2\n:\nN-dimensional quantized matrix b\nb_scale\n(heterogeneous) -\nTS\n:\nscale of quantized input b\nb_zero_point\n(heterogeneous) -\nT2\n:\nzero point of quantized input b\ny_scale\n(heterogeneous) -\nTS\n:\nscale of quantized output y\ny_zero_point\n(heterogeneous) -\nT3\n:\nzero point of quantized output y",
            "Outputs":"y\n(heterogeneous) -\nT3\n:\nQuantized matrix multiply results from a * b",
            "Type constraints":"TS\nin (\ntensor(bfloat16)\n,\ntensor(float)\n,\ntensor(float16)\n):\nConstrain scales.\nT1\nin (\ntensor(float8e4m3fn)\n,\ntensor(float8e4m3fnuz)\n,\ntensor(float8e5m2)\n,\ntensor(float8e5m2fnuz)\n,\ntensor(int8)\n,\ntensor(uint8)\n):\nThe type of input a and its zeropoint.\nT2\nin (\ntensor(float8e4m3fn)\n,\ntensor(float8e4m3fnuz)\n,\ntensor(float8e5m2)\n,\ntensor(float8e5m2fnuz)\n,\ntensor(int8)\n,\ntensor(uint8)\n):\nThe type of input b and its zeropoint.\nT3\nin (\ntensor(float8e4m3fn)\n,\ntensor(float8e4m3fnuz)\n,\ntensor(float8e5m2)\n,\ntensor(float8e5m2fnuz)\n,\ntensor(int8)\n,\ntensor(uint8)\n):\nThe type of the output and its zeropoint.\nQLinearMatMul - 10 vs 21"
        }
    },
    {
        "name":"QuantizeLinear",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__QuantizeLinear.html#l-onnx-doc-quantizelinear",
        "details":{
            "Summary":"The linear quantization operator consumes a high-precision tensor, a scale, and a zero point to compute the\nlow-precision\/quantized tensor. The scale factor and zero point must have the same shape, determining the quantization\ngranularity. The quantization formula is\ny\n=\nsaturate((x\n\/\ny_scale)\n+\ny_zero_point)\n.\nSaturation is done according to:\nuint16: [0, 65535]\nint16: [-32768, 32767]\nuint8: [0, 255]\nint8: [-128, 127]\nuint4: [0, 15]\nint4: [-8, 7]\nFor\n(x\n\/\ny_scale)\n, it rounds to the nearest even. Refer to\nhttps:\/\/en.wikipedia.org\/wiki\/Rounding\nfor details.\ny_zero_point\nand\ny\nmust have the same type.\ny_zero_point\nis usually not used for quantization to float8 and 4bit types, but the quantization\nformula remains the same for consistency, and the type of the attribute\ny_zero_point\nstill determines the quantization type.\nx\nand\ny_scale\nare allowed to have different types. The type of\ny_scale\ndetermines the precision of the division operation between\nx\nand\ny_scale\n, unless the\nprecision\nattribute is specified.\nThere are three supported quantization granularities, determined by the shape of\ny_scale\n.\nIn all cases,\ny_zero_point\nmust have the same shape as\ny_scale\n.\nPer-tensor (per-layer) quantization:\ny_scale\nis a scalar.\nPer-axis quantization: The scale must be a 1-D tensor, with the length of the quantization axis. For an input shape\n(D0,\n...,\nDi,\n...,\nDn)\nand\naxis=i\n,\ny_scale\nis a 1-D tensor of length\nDi\n.\nBlocked quantization: The scaleâs shape is identical to the inputâs shape, except for one dimension, in which\nblocking is performed. Given\nx\nshape\n(D0,\n...,\nDi,\n...,\nDn)\n,\naxis=i\n, and block size\nB\n:\ny_scale\nshape is\n(D0,\n...,\nceil(Di\/B),\n...,\nDn)\n.",
            "Attributes":"axis - INT\n(default is\n'1'\n):\n(Optional) The axis of the dequantizing dimension of the input tensor. Used only for per-axis and blocked quantization. Negative value means counting dimensions from the back. Accepted range is\n[-r,\nr-1]\nwhere\nr\n=\nrank(input)\n. When the rank of the input is 1, per-tensor quantization is applied, rendering the axis unnecessary in this scenario.\nblock_size - INT\n(default is\n'0'\n):\n(Optional) The size of the quantization block (number of times every scale is replicated). Used only for blocked quantization. The block size is a positive integer. Given\nx\nshape\n(D0,\n...,\nDi,\n...,\nDn)\n,\ny_scale\nshape\n(S0,\n...\nSi,\n...Sn)\nand\naxis=i\n, the accepted range is\n[ceil(Di\/Si),\nceil(Di\/(Si-1))-1]\noutput_dtype - INT\n(default is\n'0'\n):\n(Optional) The output data type. If not supplied, the output data type is inferred from\ny_zero_point\ndata type (\nT3\n). If neither\noutput_dtype\nnor\ny_zero_point\nare supplied, output data type is uint8. If both\noutput_dtype\nand\ny_zero_point\nare specified,\noutput_dtype\nmust be\nT3\n.\nprecision - INT\n(default is\n'0'\n):\n(Optional) The precision of the division operation between\nx\nand\ny_scale\n. If not provided, it will be the same as the type of\ny_scale\n.\nsaturate - INT\n(default is\n'1'\n):\nThe parameter defines how the conversion behaves if an input value is out of range of the destination type. It only applies for float 8 quantization (float8e4m3fn, float8e4m3fnuz, float8e5m2, float8e5m2fnuz). It is true by default. All cases are fully described in two tables inserted in the operator description.",
            "Inputs":"Between 2 and 3 inputs.\nx\n(heterogeneous) -\nT1\n:\nN-D full precision Input tensor to be quantized.\ny_scale\n(heterogeneous) -\nT2\n:\nScale for doing quantization to get\ny\n. For per-tensor\/layer quantization the scale is a scalar, for per-axis quantization it is a 1-D Tensor and for blocked quantization it has the same shape as the input, except for one dimension in which blocking is performed.\ny_zero_point\n(optional, heterogeneous) -\nT3\n:\nZero point for doing quantization to get\ny\n. Shape must match\ny_scale\n. Default is uint8 with zero point of 0 if itâs not specified.",
            "Outputs":"y\n(heterogeneous) -\nT3\n:\nN-D quantized output tensor. It has same shape as input\nx\n.",
            "Type constraints":"T1\nin (\ntensor(bfloat16)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int32)\n):\nThe type of the input âxâ.\nT2\nin (\ntensor(bfloat16)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(float8e8m0)\n,\ntensor(int32)\n):\nThe type of the input ây_scaleâ.\nT3\nin (\ntensor(float4e2m1)\n,\ntensor(float8e4m3fn)\n,\ntensor(float8e4m3fnuz)\n,\ntensor(float8e5m2)\n,\ntensor(float8e5m2fnuz)\n,\ntensor(int16)\n,\ntensor(int4)\n,\ntensor(int8)\n,\ntensor(uint16)\n,\ntensor(uint4)\n,\ntensor(uint8)\n):\nThe type of the input\ny_zero_point\nand the output\ny\n.\nQuantizeLinear - 23 vs 24"
        }
    },
    {
        "name":"RMSNormalization",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__RMSNormalization.html#l-onnx-doc-rmsnormalization",
        "details":{
            "Summary":"This is RMS normalization defined in ONNX as function as described in the paper\nhttps:\/\/arxiv.org\/pdf\/1910.07467\n.\nThe overall computation can be split into two stages. The root mean squared norm is taken over the last D dimensions,\nwhere D is the dimension of normalized_shape. For example, if normalized_shape is (3, 5) (a 2-dimensional shape),\nthe rms norm is computed over the last 2 dimensions of the input. The computation required by standardization can be\ndescribed by the following equations.\nXSquared\n=\nMul\n(\nX\n,\nX\n)\nXSquaredMean\n=\nReduceMean\n<\naxes\n=\nnormalized_axes\n>\n(\nXSquared\n)\nMeanSquareEpsilon\n=\nAdd\n(\nXSquaredMean\n,\nepsilon\n)\nRMS\n=\nSqrt\n(\nMeanSquareEpsilon\n)\nNormalized\n=\nDiv\n(\nX\n,\nRMS\n)\nwhere\nnormalized_axes\nis\n[axis,\n...,\nrank\nof\nX\n-\n1]\n. The variables\nRMS\nstand for root mean square,\nDepending on\nstash_type\nattribute, the actual computation\nmust happen in different floating-point precision.\nFor example, if\nstash_type\nis 1, this operator casts\nall input variables to 32-bit float, perform the computation, and\nfinally cast\nNormalized\nback to the original type of\nX\n.\nThe second stage then scales the outcome of the first stage using:\nY\n=\nMul\n(\nNormalized\n,\nScale\n)\nLet\nd[i]\nindicate the i-th dimension of\nX\n.\nIf\nX\nâs shape is\n[d[0],\n...,\nd[axis-1],\nd[axis],\n...,\nd[rank-1]]\n,\nthe shape of\nRMS\nis\n[d[0],\n...,\nd[axis-1],\n1,\n...,\n1]\n.\nY\nand\nX\nhave the same shape. This operator supports unidirectional broadcasting\n(\nScale\nshould be unidirectional broadcastable to tensor\nX\n);\nfor more details please check\nBroadcasting in ONNX\n.",
            "Attributes":"axis - INT\n(default is\n'-1'\n):\nThe first normalization dimension. If rank(X) is r, axisâ allowed range is [-r, r). Negative value means counting dimensions from the back.\nepsilon - FLOAT\n(default is\n'1e-05'\n):\nThe epsilon value to use to avoid division by zero.\nstash_type - INT\n(default is\n'1'\n):\nThe floating-point precision used in stage one of the computation.",
            "Inputs":"X\n(heterogeneous) -\nT\n:\nThe input tensor to be normalized. In general, the shape is (D1, D2, â¦ , Dn) for n-dimensional data, where the root mean squared norm is taken over the last D dimensions, D is determined by the axis attribute.\nscale\n(heterogeneous) -\nV\n:\nScale tensor. Scale tensor shape should be broadcastable to the normalized shape.",
            "Outputs":"Y\n(heterogeneous) -\nV\n:\nOutput data tensor. Same shape as X",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n):\nConstrain input X type to float tensors.\nV\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n):\nConstrain output Y and scale type to float tensors."
        }
    },
    {
        "name":"RNN",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__RNN.html#l-onnx-doc-rnn",
        "details":{
            "Summary":"Computes an one-layer simple RNN. This operator is usually supported\nvia some custom implementation such as CuDNN.\nNotations:\nX\n- input tensor\ni\n- input gate\nt\n- time step (t-1 means previous time step)\nWi\n- W parameter weight matrix for input gate\nRi\n- R recurrence weight matrix for input gate\nWbi\n- W parameter bias vector for input gate\nRbi\n- R parameter bias vector for input gate\nWBi\n- W parameter weight matrix for backward input gate\nRBi\n- R recurrence weight matrix for backward input gate\nWBbi\n- WR bias vectors for backward input gate\nRBbi\n- RR bias vectors for backward input gate\nH\n- Hidden state\nnum_directions\n- 2 if direction == bidirectional else 1\nActivation functions:\nRelu(x)                - max(0, x)\nTanh(x)                - (1 - e^{-2x})\/(1 + e^{-2x})\nSigmoid(x)             - 1\/(1 + e^{-x})\nNOTE: Below are optional\nAffine(x)              - alpha*x + beta\nLeakyRelu(x)           - x if x >= 0 else alpha * x\nThresholdedRelu(x)     - x if x >= alpha else 0\nScaledTanh(x)          - alpha\nTanh(beta\nx)\nHardSigmoid(x)         - min(max(alpha*x + beta, 0), 1)\nElu(x)                 - x if x >= 0 else alpha*(e^x - 1)\nSoftsign(x)            - x\/(1 + |x|)\nSoftplus(x)            - log(1 + e^x)\nEquations (Default: f=Tanh):\nHt = f(Xt*(Wi^T) + Ht-1*(Ri^T) + Wbi + Rbi)\nThis operator has\noptional\ninputs\/outputs. See\nONNX IR\nfor more details about the representation of optional arguments. An empty string may be used in the place of an actual argumentâs name to indicate a missing argument. Trailing optional arguments (those not followed by an argument that is present) may also be simply omitted.",
            "Attributes":"activation_alpha - FLOATS\n:\nOptional scaling values used by some activation functions. The values are consumed in the order of activation functions, for example (f, g, h) in LSTM. Default values are the same as of corresponding ONNX operators.For example with LeakyRelu, the default alpha is 0.01.\nactivation_beta - FLOATS\n:\nOptional scaling values used by some activation functions. The values are consumed in the order of activation functions, for example (f, g, h) in LSTM. Default values are the same as of corresponding ONNX operators.\nactivations - STRINGS\n(default is\n['Tanh',\n'Tanh']\n):\nOne (or two if bidirectional) activation function for input gate. The activation function must be one of the activation functions specified above. Optional: Default\nTanh\nif not specified.\nclip - FLOAT\n:\nCell clip threshold. Clipping bounds the elements of a tensor in the range of [-threshold, +threshold] and is applied to the input of activations. No clip if not specified.\ndirection - STRING\n(default is\n'forward'\n):\nSpecify if the RNN is forward, reverse, or bidirectional. Must be one of forward (default), reverse, or bidirectional.\nhidden_size - INT\n:\nNumber of neurons in the hidden layer\nlayout - INT\n(default is\n'0'\n):\nThe shape format of inputs X, initial_h and outputs Y, Y_h. If 0, the following shapes are expected: X.shape = [seq_length, batch_size, input_size], Y.shape = [seq_length, num_directions, batch_size, hidden_size], initial_h.shape = Y_h.shape = [num_directions, batch_size, hidden_size]. If 1, the following shapes are expected: X.shape = [batch_size, seq_length, input_size], Y.shape = [batch_size, seq_length, num_directions, hidden_size], initial_h.shape = Y_h.shape = [batch_size, num_directions, hidden_size].",
            "Inputs":"Between 3 and 6 inputs.\nX\n(heterogeneous) -\nT\n:\nThe input sequences packed (and potentially padded) into one 3-D tensor with the shape of\n[seq_length,\nbatch_size,\ninput_size]\n.\nW\n(heterogeneous) -\nT\n:\nThe weight tensor for input gate. Concatenation of\nWi\nand\nWBi\n(if bidirectional). The tensor has shape\n[num_directions,\nhidden_size,\ninput_size]\n.\nR\n(heterogeneous) -\nT\n:\nThe recurrence weight tensor. Concatenation of\nRi\nand\nRBi\n(if bidirectional). The tensor has shape\n[num_directions,\nhidden_size,\nhidden_size]\n.\nB\n(optional, heterogeneous) -\nT\n:\nThe bias tensor for input gate. Concatenation of\n[Wbi,\nRbi]\nand\n[WBbi,\nRBbi]\n(if bidirectional). The tensor has shape\n[num_directions,\n2*hidden_size]\n. Optional: If not specified - assumed to be 0.\nsequence_lens\n(optional, heterogeneous) -\nT1\n:\nOptional tensor specifying lengths of the sequences in a batch. If not specified - assumed all sequences in the batch to have length\nseq_length\n. It has shape\n[batch_size]\n.\ninitial_h\n(optional, heterogeneous) -\nT\n:\nOptional initial value of the hidden. If not specified - assumed to be 0. It has shape\n[num_directions,\nbatch_size,\nhidden_size]\n.",
            "Outputs":"Between 0 and 2 outputs.\nY\n(optional, heterogeneous) -\nT\n:\nA tensor that concats all the intermediate output values of the hidden. It has shape\n[seq_length,\nnum_directions,\nbatch_size,\nhidden_size]\n.\nY_h\n(optional, heterogeneous) -\nT\n:\nThe last output value of the hidden. It has shape\n[num_directions,\nbatch_size,\nhidden_size]\n.",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n):\nConstrain input and output types to float tensors.\nT1\nin (\ntensor(int32)\n):\nConstrain seq_lens to integer tensor.\nRNN - 14 vs 22"
        }
    },
    {
        "name":"RandomNormal",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__RandomNormal.html#l-onnx-doc-randomnormal",
        "details":{
            "Summary":"Generate a tensor with random values drawn from a normal distribution. The shape\nof the tensor is specified by the\nshape\nargument and the parameter of the normal distribution\nspecified by\nmean\nand\nscale\n.\nThe data type is specified by the âdtypeâ argument. The âdtypeâ argument must\nbe one of the data types specified in the âDataTypeâ enum field in the\nTensorProto message.",
            "Attributes":"dtype - INT\n(default is\n'1'\n):\nThe data type for the elements of the output tensor. Default is TensorProto::FLOAT.\nmean - FLOAT\n(default is\n'0.0'\n):\nThe mean of the normal distribution.\nscale - FLOAT\n(default is\n'1.0'\n):\nThe standard deviation of the normal distribution.\nseed - FLOAT\n:\n(Optional) Seed to the random generator, if not specified we will auto generate one.\nshape - INTS\n(required) :\nThe shape of the output tensor.",
            "Outputs":"output\n(heterogeneous) -\nT\n:\nOutput tensor of random values drawn from normal distribution",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n):\nConstrain output types to float tensors.\nRandomNormal - 1 vs 22"
        }
    },
    {
        "name":"RandomNormalLike",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__RandomNormalLike.html#l-onnx-doc-randomnormallike",
        "details":{
            "Summary":"Generate a tensor with random values drawn from a normal distribution.\nThe shape of the output tensor is copied from the shape of the input tensor,\nand the parameters of the normal distribution are specified by\nmean\nand\nscale\n.\nThe data type is specified by the âdtypeâ argument, or copied from the input tensor if not provided.\nThe âdtypeâ argument must be one of the data types specified in the âDataTypeâ enum field in the\nTensorProto message, and be valid as an output type.",
            "Attributes":"dtype - INT\n:\n(Optional) The data type for the elements of the output tensor, if not specified, we will use the data type of the input tensor.\nmean - FLOAT\n(default is\n'0.0'\n):\nThe mean of the normal distribution.\nscale - FLOAT\n(default is\n'1.0'\n):\nThe standard deviation of the normal distribution.\nseed - FLOAT\n:\n(Optional) Seed to the random generator, if not specified we will auto generate one.",
            "Inputs":"input\n(heterogeneous) -\nT1\n:\nInput tensor to copy shape and optionally type information from.",
            "Outputs":"output\n(heterogeneous) -\nT2\n:\nOutput tensor of random values drawn from normal distribution",
            "Type constraints":"T1\nin (\ntensor(bfloat16)\n,\ntensor(bool)\n,\ntensor(complex128)\n,\ntensor(complex64)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(string)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain to any tensor type. If the dtype attribute is not provided this must be a valid output type.\nT2\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n):\nConstrain output types to float tensors.\nRandomNormalLike - 1 vs 22"
        }
    },
    {
        "name":"RandomUniform",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__RandomUniform.html#l-onnx-doc-randomuniform",
        "details":{
            "Summary":"Generate a tensor with random values drawn from a uniform distribution. The shape\nof the tensor is specified by the\nshape\nargument and the range by\nlow\nand\nhigh\n.\nThe data type is specified by the âdtypeâ argument. The âdtypeâ argument must\nbe one of the data types specified in the âDataTypeâ enum field in the\nTensorProto message.",
            "Attributes":"dtype - INT\n(default is\n'1'\n):\nThe data type for the elements of the output tensor. If not specified, default is TensorProto::FLOAT.\nhigh - FLOAT\n(default is\n'1.0'\n):\nUpper boundary of the output values.\nlow - FLOAT\n(default is\n'0.0'\n):\nLower boundary of the output values.\nseed - FLOAT\n:\n(Optional) Seed to the random generator, if not specified we will auto generate one.\nshape - INTS\n(required) :\nThe shape of the output tensor.",
            "Outputs":"output\n(heterogeneous) -\nT\n:\nOutput tensor of random values drawn from uniform distribution",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n):\nConstrain output types to float tensors.\nRandomUniform - 1 vs 22"
        }
    },
    {
        "name":"RandomUniformLike",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__RandomUniformLike.html#l-onnx-doc-randomuniformlike",
        "details":{
            "Summary":"Generate a tensor with random values drawn from a uniform distribution.\nThe shape of the output tensor is copied from the shape of the input tensor,\nand the parameters of the uniform distribution are specified by\nlow\nand\nhigh\n.\nThe data type is specified by the âdtypeâ argument, or copied from the input tensor if not provided.\nThe âdtypeâ argument must be one of the data types specified in the âDataTypeâ enum field in the\nTensorProto message and be valid as an output type.",
            "Attributes":"dtype - INT\n:\n(Optional) The data type for the elements of the output tensor, if not specified, we will use the data type of the input tensor.\nhigh - FLOAT\n(default is\n'1.0'\n):\nUpper boundary of the output values.\nlow - FLOAT\n(default is\n'0.0'\n):\nLower boundary of the output values.\nseed - FLOAT\n:\n(Optional) Seed to the random generator, if not specified we will auto generate one.",
            "Inputs":"input\n(heterogeneous) -\nT1\n:\nInput tensor to copy shape and optionally type information from.",
            "Outputs":"output\n(heterogeneous) -\nT2\n:\nOutput tensor of random values drawn from uniform distribution",
            "Type constraints":"T1\nin (\ntensor(bfloat16)\n,\ntensor(bool)\n,\ntensor(complex128)\n,\ntensor(complex64)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(string)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain to any tensor type. If the dtype attribute is not provided this must be a valid output type.\nT2\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n):\nConstrain output types to float tensors.\nRandomUniformLike - 1 vs 22"
        }
    },
    {
        "name":"Range",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Range.html#l-onnx-doc-range",
        "details":{
            "Summary":"Generate a tensor containing a sequence of numbers that begin at\nstart\nand extends by increments of\ndelta\nup to\nlimit\n(exclusive).\nThe number of elements in the output of range is computed as below:\nnumber_of_elements\n=\nmax\n(\nceil\n(\n(\nlimit\n-\nstart\n)\n\/\ndelta\n)\n,\n0\n)\nThe pseudocode determining the contents of the output is shown below:\nfor\n(\nint\ni\n=\n0\n;\ni\n<\nnumber_of_elements\n;\n++\ni\n)\n{\noutput\n[\ni\n]\n=\nstart\n+\n(\ni\n*\ndelta\n);\n}\nExample 1\nInputs\n:\nstart\n=\n3\n,\nlimit\n=\n9\n,\ndelta\n=\n3\nOutput\n:\n[\n3\n,\n6\n]\nExample 2\nInputs\n:\nstart\n=\n10\n,\nlimit\n=\n4\n,\ndelta\n=\n-\n2\nOutput\n:\n[\n10\n,\n8\n,\n6\n]\nFunction Body\nÂ¶\nThe function definition for this operator.\n<\ndomain\n:\n\"\"\n,\nopset_import\n:\n[\n\"\"\n:\n11\n]\n>\nRange\n(\nstart\n,\nlimit\n,\ndelta\n)\n=>\n(\noutput\n)\n{\nsub_result\n=\nSub\n(\nlimit\n,\nstart\n)\nsub_result_casted\n=\nCast\n<\nto\n:\nint\n=\n1\n>\n(\nsub_result\n)\ndelta_casted\n=\nCast\n<\nto\n:\nint\n=\n1\n>\n(\ndelta\n)\ndiv_result\n=\nDiv\n(\nsub_result_casted\n,\ndelta_casted\n)\nceil_result\n=\nCeil\n(\ndiv_result\n)\nceil_result_relu\n=\nRelu\n(\nceil_result\n)\nceil_result_relu_int\n=\nCast\n<\nto\n:\nint\n=\n7\n>\n(\nceil_result_relu\n)\nceil_result_relu_bool\n=\nCast\n<\nto\n:\nint\n=\n9\n>\n(\nceil_result_relu\n)\nvariadic_output\n,\noutput\n=\nLoop\n(\nceil_result_relu_int\n,\nceil_result_relu_bool\n,\nstart\n)\n<\nbody\n:\ngraph\n=\nloop_body_attribute\n(\nint64\ni\n,\nbool\ncond\n,\nprev\n)\n=>\n(\ncond_out\n,\ncurrent\n,\nrange\n)\n{\ncond_out\n=\nIdentity\n(\ncond\n)\ncurrent\n=\nAdd\n(\nprev\n,\ndelta\n)\nrange\n=\nIdentity\n(\nprev\n)\n}\n>\n}",
            "Inputs":"start\n(heterogeneous) -\nT\n:\nScalar. First entry for the range of output values.\nlimit\n(heterogeneous) -\nT\n:\nScalar. Exclusive upper limit for the range of output values.\ndelta\n(heterogeneous) -\nT\n:\nScalar. Value to step by.",
            "Outputs":"output\n(heterogeneous) -\nT\n:\nA 1-D tensor with same type as the inputs containing generated range of values.",
            "Type constraints":"T\nin (\ntensor(double)\n,\ntensor(float)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int64)\n):\nConstrain input types to common numeric type tensors."
        }
    },
    {
        "name":"Reciprocal",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Reciprocal.html#l-onnx-doc-reciprocal",
        "details":{
            "Summary":"Reciprocal takes one input data (Tensor\n) and produces one output data\n(Tensor\n) where the reciprocal is, y = 1\/x, is applied to\nthe tensor elementwise.",
            "Inputs":"X\n(heterogeneous) -\nT\n:\nInput tensor",
            "Outputs":"Y\n(heterogeneous) -\nT\n:\nOutput tensor",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n):\nConstrain input and output types to float tensors.\nReciprocal - 6 vs 13"
        }
    },
    {
        "name":"ReduceL1",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__ReduceL1.html#l-onnx-doc-reducel1",
        "details":{
            "Summary":"Computes the L1 norm of the input tensorâs elements along the provided axes. The resulting\ntensor has the same rank as the input if\nkeepdims\nequals 1. If\nkeepdims\nequals 0, then\nthe resulting tensor has the reduced dimension pruned. Input tensors of rank zero are\nvalid. Reduction over an empty set of values yields 0.\nThe above behavior is similar to numpy, with the exception that numpy defaults\nkeepdims\nto\nFalse\ninstead of\nTrue\n.\nFunction Body\nÂ¶\nThe function definition for this operator.\n<\ndomain\n:\n\"\"\n,\nopset_import\n:\n[\n\"\"\n:\n18\n]\n>\nReduceL1\n<\nnoop_with_empty_axes\n,\nkeepdims\n>\n(\ndata\n,\naxes\n)\n=>\n(\nreduced\n)\n{\ndata_abs\n=\nAbs\n(\ndata\n)\nreduced\n=\nReduceSum\n<\nkeepdims\n:\nint\n=\n@keepdims\n,\nnoop_with_empty_axes\n:\nint\n=\n@noop_with_empty_axes\n>\n(\ndata_abs\n,\naxes\n)\n}",
            "Attributes":"keepdims - INT\n(default is\n'1'\n):\nKeep the reduced dimension or not, default 1 means keep reduced dimension.\nnoop_with_empty_axes - INT\n(default is\n'0'\n):\nDefines behavior when axes is not provided or is empty. If false (default), reduction happens over all axes. If true, no reduction is applied, but other operations will be performed. For example, ReduceSumSquare acts as a vanilla Square.",
            "Inputs":"Between 1 and 2 inputs.\ndata\n(heterogeneous) -\nT\n:\nAn input tensor.\naxes\n(optional, heterogeneous) -\ntensor(int64)\n:\nOptional input list of integers, along which to reduce. The default is to reduce over empty axes. When axes is empty (either not provided or explicitly empty), behavior depends on ânoop_with_empty_axesâ: reduction over all axes if ânoop_with_empty_axesâ is false, or no reduction is applied if ânoop_with_empty_axesâ is true (but other operations will be performed). Accepted range is [-r, r-1] where r = rank(data).",
            "Outputs":"reduced\n(heterogeneous) -\nT\n:\nReduced output tensor.",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(uint32)\n,\ntensor(uint64)\n):\nConstrain input and output types to numeric tensors.\nReduceL1 - 13 vs 18"
        }
    },
    {
        "name":"ReduceL2",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__ReduceL2.html#l-onnx-doc-reducel2",
        "details":{
            "Summary":"Computes the L2 norm of the input tensorâs elements along the provided axes. The resulting\ntensor has the same rank as the input if\nkeepdims\nequals 1. If\nkeepdims\nequals 0, then\nthe resulting tensor has the reduced dimension pruned. Input tensors of rank zero are\nvalid. Reduction over an empty set of values yields 0.\nThe above behavior is similar to numpy, with the exception that numpy defaults\nkeepdims\nto\nFalse\ninstead of\nTrue\n.\nFunction Body\nÂ¶\nThe function definition for this operator.\n<\ndomain\n:\n\"\"\n,\nopset_import\n:\n[\n\"\"\n:\n18\n]\n>\nReduceL2\n<\nnoop_with_empty_axes\n,\nkeepdims\n>\n(\ndata\n,\naxes\n)\n=>\n(\nreduced\n)\n{\ndata_square\n=\nMul\n(\ndata\n,\ndata\n)\nsum_square\n=\nReduceSum\n<\nkeepdims\n:\nint\n=\n@keepdims\n,\nnoop_with_empty_axes\n:\nint\n=\n@noop_with_empty_axes\n>\n(\ndata_square\n,\naxes\n)\nsum_square_dbl\n=\nCast\n<\nto\n:\nint\n=\n1\n>\n(\nsum_square\n)\nsqrt\n=\nSqrt\n(\nsum_square_dbl\n)\nreduced\n=\nCastLike\n(\nsqrt\n,\ndata\n)\n}",
            "Attributes":"keepdims - INT\n(default is\n'1'\n):\nKeep the reduced dimension or not, default 1 means keep reduced dimension.\nnoop_with_empty_axes - INT\n(default is\n'0'\n):\nDefines behavior when axes is not provided or is empty. If false (default), reduction happens over all axes. If true, no reduction is applied, but other operations will be performed. For example, ReduceSumSquare acts as a vanilla Square.",
            "Inputs":"Between 1 and 2 inputs.\ndata\n(heterogeneous) -\nT\n:\nAn input tensor.\naxes\n(optional, heterogeneous) -\ntensor(int64)\n:\nOptional input list of integers, along which to reduce. The default is to reduce over empty axes. When axes is empty (either not provided or explicitly empty), behavior depends on ânoop_with_empty_axesâ: reduction over all axes if ânoop_with_empty_axesâ is false, or no reduction is applied if ânoop_with_empty_axesâ is true (but other operations will be performed). Accepted range is [-r, r-1] where r = rank(data).",
            "Outputs":"reduced\n(heterogeneous) -\nT\n:\nReduced output tensor.",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(uint32)\n,\ntensor(uint64)\n):\nConstrain input and output types to numeric tensors.\nReduceL2 - 13 vs 18"
        }
    },
    {
        "name":"ReduceLogSum",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__ReduceLogSum.html#l-onnx-doc-reducelogsum",
        "details":{
            "Summary":"Computes the log sum of the input tensorâs elements along the provided axes. The resulting\ntensor has the same rank as the input if\nkeepdims\nequals 1. If\nkeepdims\nequals 0, then\nthe resulting tensor has the reduced dimension pruned. Input tensors of rank zero are\nvalid. Reduction over an empty set of values yields minus infinity (if supported by the datatype) or undefined otherwise.\nThe above behavior is similar to numpy, with the exception that numpy defaults\nkeepdims\nto\nFalse\ninstead of\nTrue\n.\nFunction Body\nÂ¶\nThe function definition for this operator.\n<\ndomain\n:\n\"\"\n,\nopset_import\n:\n[\n\"\"\n:\n18\n]\n>\nReduceLogSum\n<\nnoop_with_empty_axes\n,\nkeepdims\n>\n(\ndata\n,\naxes\n)\n=>\n(\nreduced\n)\n{\nreduced_sum\n=\nReduceSum\n<\nkeepdims\n:\nint\n=\n@keepdims\n,\nnoop_with_empty_axes\n:\nint\n=\n@noop_with_empty_axes\n>\n(\ndata\n,\naxes\n)\nreduced\n=\nLog\n(\nreduced_sum\n)\n}",
            "Attributes":"keepdims - INT\n(default is\n'1'\n):\nKeep the reduced dimension or not, default 1 means keep reduced dimension.\nnoop_with_empty_axes - INT\n(default is\n'0'\n):\nDefines behavior when axes is not provided or is empty. If false (default), reduction happens over all axes. If true, no reduction is applied, but other operations will be performed. For example, ReduceSumSquare acts as a vanilla Square.",
            "Inputs":"Between 1 and 2 inputs.\ndata\n(heterogeneous) -\nT\n:\nAn input tensor.\naxes\n(optional, heterogeneous) -\ntensor(int64)\n:\nOptional input list of integers, along which to reduce. The default is to reduce over empty axes. When axes is empty (either not provided or explicitly empty), behavior depends on ânoop_with_empty_axesâ: reduction over all axes if ânoop_with_empty_axesâ is false, or no reduction is applied if ânoop_with_empty_axesâ is true (but other operations will be performed). Accepted range is [-r, r-1] where r = rank(data).",
            "Outputs":"reduced\n(heterogeneous) -\nT\n:\nReduced output tensor.",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(uint32)\n,\ntensor(uint64)\n):\nConstrain input and output types to numeric tensors.\nReduceLogSum - 13 vs 18"
        }
    },
    {
        "name":"ReduceLogSumExp",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__ReduceLogSumExp.html#l-onnx-doc-reducelogsumexp",
        "details":{
            "Summary":"Computes the log sum exponent of the input tensorâs elements along the provided axes. The resulting\ntensor has the same rank as the input if\nkeepdims\nequals 1. If\nkeepdims\nequals 0, then\nthe resulting tensor has the reduced dimension pruned. Input tensors of rank zero are\nvalid. Reduction over an empty set of values yields minus infinity (if supported by the datatype) or undefined otherwise.\nThe above behavior is similar to numpy, with the exception that numpy defaults\nkeepdims\nto\nFalse\ninstead of\nTrue\n.\nFunction Body\nÂ¶\nThe function definition for this operator.\n<\ndomain\n:\n\"\"\n,\nopset_import\n:\n[\n\"\"\n:\n18\n]\n>\nReduceLogSumExp\n<\nnoop_with_empty_axes\n,\nkeepdims\n>\n(\ndata\n,\naxes\n)\n=>\n(\nreduced\n)\n{\ndata_double\n=\nCast\n<\nto\n:\nint\n=\n11\n>\n(\ndata\n)\ndata_exp\n=\nExp\n(\ndata_double\n)\nreduced_sum\n=\nReduceSum\n<\nkeepdims\n:\nint\n=\n@keepdims\n,\nnoop_with_empty_axes\n:\nint\n=\n@noop_with_empty_axes\n>\n(\ndata_exp\n,\naxes\n)\nreduced_double\n=\nLog\n(\nreduced_sum\n)\nreduced\n=\nCastLike\n(\nreduced_double\n,\ndata\n)\n}",
            "Attributes":"keepdims - INT\n(default is\n'1'\n):\nKeep the reduced dimension or not, default 1 means keep reduced dimension.\nnoop_with_empty_axes - INT\n(default is\n'0'\n):\nDefines behavior when axes is not provided or is empty. If false (default), reduction happens over all axes. If true, no reduction is applied, but other operations will be performed. For example, ReduceSumSquare acts as a vanilla Square.",
            "Inputs":"Between 1 and 2 inputs.\ndata\n(heterogeneous) -\nT\n:\nAn input tensor.\naxes\n(optional, heterogeneous) -\ntensor(int64)\n:\nOptional input list of integers, along which to reduce. The default is to reduce over empty axes. When axes is empty (either not provided or explicitly empty), behavior depends on ânoop_with_empty_axesâ: reduction over all axes if ânoop_with_empty_axesâ is false, or no reduction is applied if ânoop_with_empty_axesâ is true (but other operations will be performed). Accepted range is [-r, r-1] where r = rank(data).",
            "Outputs":"reduced\n(heterogeneous) -\nT\n:\nReduced output tensor.",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(uint32)\n,\ntensor(uint64)\n):\nConstrain input and output types to numeric tensors.\nReduceLogSumExp - 13 vs 18"
        }
    },
    {
        "name":"ReduceMax",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__ReduceMax.html#l-onnx-doc-reducemax",
        "details":{
            "Summary":"Computes the max of the input tensorâs elements along the provided axes. The resulting\ntensor has the same rank as the input if\nkeepdims\nequals 1. If\nkeepdims\nequals 0, then\nthe resulting tensor has the reduced dimension pruned. Input tensors of rank zero are\nvalid. Reduction over an empty set of values yields minus infinity (if supported by the datatype) or the minimum value of the data type otherwise.\nIf the input data type is Boolean, the comparison should consider\nFalse\n<\nTrue\n.\nThe above behavior is similar to numpy, with the exception that numpy defaults\nkeepdims\nto\nFalse\ninstead of\nTrue\n.",
            "Attributes":"keepdims - INT\n(default is\n'1'\n):\nKeep the reduced dimension or not, default 1 means keep reduced dimension.\nnoop_with_empty_axes - INT\n(default is\n'0'\n):\nDefines behavior when axes is not provided or is empty. If false (default), reduction happens over all axes. If true, no reduction is applied, but other operations will be performed. For example, ReduceSumSquare acts as a vanilla Square.",
            "Inputs":"Between 1 and 2 inputs.\ndata\n(heterogeneous) -\nT\n:\nAn input tensor.\naxes\n(optional, heterogeneous) -\ntensor(int64)\n:\nOptional input list of integers, along which to reduce. The default is to reduce over empty axes. When axes is empty (either not provided or explicitly empty), behavior depends on ânoop_with_empty_axesâ: reduction over all axes if ânoop_with_empty_axesâ is false, or no reduction is applied if ânoop_with_empty_axesâ is true (but other operations will be performed). Accepted range is [-r, r-1] where r = rank(data).",
            "Outputs":"reduced\n(heterogeneous) -\nT\n:\nReduced output tensor.",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(bool)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(uint32)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain input and output types to numeric and Boolean tensors.\nReduceMax - 18 vs 20"
        }
    },
    {
        "name":"ReduceMean",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__ReduceMean.html#l-onnx-doc-reducemean",
        "details":{
            "Summary":"Computes the mean of the input tensorâs elements along the provided axes. The resulting\ntensor has the same rank as the input if\nkeepdims\nequals 1. If\nkeepdims\nequals 0, then\nthe resulting tensor has the reduced dimension pruned. Input tensors of rank zero are\nvalid. Reduction over an empty set of values yields undefined.\nThe above behavior is similar to numpy, with the exception that numpy defaults\nkeepdims\nto\nFalse\ninstead of\nTrue\n.",
            "Attributes":"keepdims - INT\n(default is\n'1'\n):\nKeep the reduced dimension or not, default 1 means keep reduced dimension.\nnoop_with_empty_axes - INT\n(default is\n'0'\n):\nDefines behavior when axes is not provided or is empty. If false (default), reduction happens over all axes. If true, no reduction is applied, but other operations will be performed. For example, ReduceSumSquare acts as a vanilla Square.",
            "Inputs":"Between 1 and 2 inputs.\ndata\n(heterogeneous) -\nT\n:\nAn input tensor.\naxes\n(optional, heterogeneous) -\ntensor(int64)\n:\nOptional input list of integers, along which to reduce. The default is to reduce over empty axes. When axes is empty (either not provided or explicitly empty), behavior depends on ânoop_with_empty_axesâ: reduction over all axes if ânoop_with_empty_axesâ is false, or no reduction is applied if ânoop_with_empty_axesâ is true (but other operations will be performed). Accepted range is [-r, r-1] where r = rank(data).",
            "Outputs":"reduced\n(heterogeneous) -\nT\n:\nReduced output tensor.",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(uint32)\n,\ntensor(uint64)\n):\nConstrain input and output types to numeric tensors.\nReduceMean - 13 vs 18"
        }
    },
    {
        "name":"ReduceMin",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__ReduceMin.html#l-onnx-doc-reducemin",
        "details":{
            "Summary":"Computes the min of the input tensorâs elements along the provided axes. The resulting\ntensor has the same rank as the input if\nkeepdims\nequals 1. If\nkeepdims\nequals 0, then\nthe resulting tensor has the reduced dimension pruned. Input tensors of rank zero are\nvalid. Reduction over an empty set of values yields plus infinity (if supported by the datatype) or the maximum value of the data type otherwise.\nIf the input data type is Boolean, the comparison should consider\nFalse\n<\nTrue\n.\nThe above behavior is similar to numpy, with the exception that numpy defaults\nkeepdims\nto\nFalse\ninstead of\nTrue\n.",
            "Attributes":"keepdims - INT\n(default is\n'1'\n):\nKeep the reduced dimension or not, default 1 means keep reduced dimension.\nnoop_with_empty_axes - INT\n(default is\n'0'\n):\nDefines behavior when axes is not provided or is empty. If false (default), reduction happens over all axes. If true, no reduction is applied, but other operations will be performed. For example, ReduceSumSquare acts as a vanilla Square.",
            "Inputs":"Between 1 and 2 inputs.\ndata\n(heterogeneous) -\nT\n:\nAn input tensor.\naxes\n(optional, heterogeneous) -\ntensor(int64)\n:\nOptional input list of integers, along which to reduce. The default is to reduce over empty axes. When axes is empty (either not provided or explicitly empty), behavior depends on ânoop_with_empty_axesâ: reduction over all axes if ânoop_with_empty_axesâ is false, or no reduction is applied if ânoop_with_empty_axesâ is true (but other operations will be performed). Accepted range is [-r, r-1] where r = rank(data).",
            "Outputs":"reduced\n(heterogeneous) -\nT\n:\nReduced output tensor.",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(bool)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(uint32)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain input and output types to numeric and Boolean tensors.\nReduceMin - 18 vs 20"
        }
    },
    {
        "name":"ReduceProd",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__ReduceProd.html#l-onnx-doc-reduceprod",
        "details":{
            "Summary":"Computes the product of the input tensorâs elements along the provided axes. The resulting\ntensor has the same rank as the input if\nkeepdims\nequals 1. If\nkeepdims\nequals 0, then\nthe resulting tensor has the reduced dimension pruned. Input tensors of rank zero are\nvalid. Reduction over an empty set of values yields 1.\nThe above behavior is similar to numpy, with the exception that numpy defaults\nkeepdims\nto\nFalse\ninstead of\nTrue\n.",
            "Attributes":"keepdims - INT\n(default is\n'1'\n):\nKeep the reduced dimension or not, default 1 means keep reduced dimension.\nnoop_with_empty_axes - INT\n(default is\n'0'\n):\nDefines behavior when axes is not provided or is empty. If false (default), reduction happens over all axes. If true, no reduction is applied, but other operations will be performed. For example, ReduceSumSquare acts as a vanilla Square.",
            "Inputs":"Between 1 and 2 inputs.\ndata\n(heterogeneous) -\nT\n:\nAn input tensor.\naxes\n(optional, heterogeneous) -\ntensor(int64)\n:\nOptional input list of integers, along which to reduce. The default is to reduce over empty axes. When axes is empty (either not provided or explicitly empty), behavior depends on ânoop_with_empty_axesâ: reduction over all axes if ânoop_with_empty_axesâ is false, or no reduction is applied if ânoop_with_empty_axesâ is true (but other operations will be performed). Accepted range is [-r, r-1] where r = rank(data).",
            "Outputs":"reduced\n(heterogeneous) -\nT\n:\nReduced output tensor.",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(uint32)\n,\ntensor(uint64)\n):\nConstrain input and output types to numeric tensors.\nReduceProd - 13 vs 18"
        }
    },
    {
        "name":"ReduceSum",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__ReduceSum.html#l-onnx-doc-reducesum",
        "details":{
            "Summary":"Computes the sum of the input tensorâs elements along the provided axes. The resulting\ntensor has the same rank as the input if\nkeepdims\nequals 1. If\nkeepdims\nequals 0, then\nthe resulting tensor has the reduced dimension pruned. Input tensors of rank zero are\nvalid. Reduction over an empty set of values yields 0.\nThe above behavior is similar to numpy, with the exception that numpy defaults\nkeepdims\nto\nFalse\ninstead of\nTrue\n.",
            "Attributes":"keepdims - INT\n(default is\n'1'\n):\nKeep the reduced dimension or not, default 1 means keep reduced dimension.\nnoop_with_empty_axes - INT\n(default is\n'0'\n):\nDefines behavior when axes is not provided or is empty. If false (default), reduction happens over all axes. If true, no reduction is applied, but other operations will be performed. For example, ReduceSumSquare acts as a vanilla Square.",
            "Inputs":"Between 1 and 2 inputs.\ndata\n(heterogeneous) -\nT\n:\nAn input tensor.\naxes\n(optional, heterogeneous) -\ntensor(int64)\n:\nOptional input list of integers, along which to reduce. The default is to reduce over empty axes. When axes is empty (either not provided or explicitly empty), behavior depends on ânoop_with_empty_axesâ: reduction over all axes if ânoop_with_empty_axesâ is false, or no reduction is applied if ânoop_with_empty_axesâ is true (but other operations will be performed). Accepted range is [-r, r-1] where r = rank(data).",
            "Outputs":"reduced\n(heterogeneous) -\nT\n:\nReduced output tensor.",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(uint32)\n,\ntensor(uint64)\n):\nConstrain input and output types to numeric tensors.\nReduceSum - 11 vs 13"
        }
    },
    {
        "name":"ReduceSumSquare",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__ReduceSumSquare.html#l-onnx-doc-reducesumsquare",
        "details":{
            "Summary":"Computes the sum square of the input tensorâs elements along the provided axes. The resulting\ntensor has the same rank as the input if\nkeepdims\nequals 1. If\nkeepdims\nequals 0, then\nthe resulting tensor has the reduced dimension pruned. Input tensors of rank zero are\nvalid. Reduction over an empty set of values yields 0.\nThe above behavior is similar to numpy, with the exception that numpy defaults\nkeepdims\nto\nFalse\ninstead of\nTrue\n.\nFunction Body\nÂ¶\nThe function definition for this operator.\n<\ndomain\n:\n\"\"\n,\nopset_import\n:\n[\n\"\"\n:\n18\n]\n>\nReduceSumSquare\n<\nnoop_with_empty_axes\n,\nkeepdims\n>\n(\ndata\n,\naxes\n)\n=>\n(\nreduced\n)\n{\ndata_square\n=\nMul\n(\ndata\n,\ndata\n)\nreduced\n=\nReduceSum\n<\nkeepdims\n:\nint\n=\n@keepdims\n,\nnoop_with_empty_axes\n:\nint\n=\n@noop_with_empty_axes\n>\n(\ndata_square\n,\naxes\n)\n}",
            "Attributes":"keepdims - INT\n(default is\n'1'\n):\nKeep the reduced dimension or not, default 1 means keep reduced dimension.\nnoop_with_empty_axes - INT\n(default is\n'0'\n):\nDefines behavior when axes is not provided or is empty. If false (default), reduction happens over all axes. If true, no reduction is applied, but other operations will be performed. For example, ReduceSumSquare acts as a vanilla Square.",
            "Inputs":"Between 1 and 2 inputs.\ndata\n(heterogeneous) -\nT\n:\nAn input tensor.\naxes\n(optional, heterogeneous) -\ntensor(int64)\n:\nOptional input list of integers, along which to reduce. The default is to reduce over empty axes. When axes is empty (either not provided or explicitly empty), behavior depends on ânoop_with_empty_axesâ: reduction over all axes if ânoop_with_empty_axesâ is false, or no reduction is applied if ânoop_with_empty_axesâ is true (but other operations will be performed). Accepted range is [-r, r-1] where r = rank(data).",
            "Outputs":"reduced\n(heterogeneous) -\nT\n:\nReduced output tensor.",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(uint32)\n,\ntensor(uint64)\n):\nConstrain input and output types to numeric tensors.\nReduceSumSquare - 13 vs 18"
        }
    },
    {
        "name":"RegexFullMatch",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__RegexFullMatch.html#l-onnx-doc-regexfullmatch",
        "details":{
            "Summary":"RegexFullMatch performs a full regex match on each element of the input tensor. If an element fully matches the regex pattern specified as an attribute, the corresponding element in the output is True and it is False otherwise.\nRE2\nregex syntax is used.",
            "Attributes":"pattern - STRING\n:\nRegex pattern to match on. This must be valid RE2 syntax.",
            "Inputs":"X\n(heterogeneous) -\nT1\n:\nTensor with strings to match on.",
            "Outputs":"Y\n(heterogeneous) -\nT2\n:\nTensor of bools indicating if each input string fully matches the regex pattern specified.",
            "Type constraints":"T1\nin (\ntensor(string)\n):\nInputs must be UTF-8 strings\nT2\nin (\ntensor(bool)\n):\nOutputs are bools and are True where there is a full regex match and False otherwise."
        }
    },
    {
        "name":"Relu",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Relu.html#l-onnx-doc-relu",
        "details":{
            "Summary":"Relu takes one input data (Tensor\n) and produces one output data\n(Tensor\n) where the rectified linear function, y = max(0, x), is applied to\nthe tensor elementwise.\nFunction Body\nÂ¶\nThe function definition for this operator.\n<\ndomain\n:\n\"\"\n,\nopset_import\n:\n[\n\"\"\n:\n18\n]\n>\nRelu\n(\nX\n)\n=>\n(\nY\n)\n{\nZero\n=\nConstant\n<\nvalue\n:\ntensor\n=\nfloat\n{\n0\n}\n>\n()\nZeroCast\n=\nCastLike\n(\nZero\n,\nX\n)\nY\n=\nMax\n(\nX\n,\nZeroCast\n)\n}",
            "Inputs":"X\n(heterogeneous) -\nT\n:\nInput tensor",
            "Outputs":"Y\n(heterogeneous) -\nT\n:\nOutput tensor",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(int8)\n):\nConstrain input and output types to signed numeric tensors.\nRelu - 13 vs 14"
        }
    },
    {
        "name":"Reshape",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Reshape.html#l-onnx-doc-reshape",
        "details":{
            "Summary":"Reshape the input tensor similar to numpy.reshape.\nFirst input is the data tensor, second input is a shape tensor which specifies the output shape. It outputs the reshaped tensor.\nAt most one dimension of the new shape can be -1. In this case, the value is\ninferred from the size of the tensor and the remaining dimensions. A dimension\ncould also be 0, in which case the actual dimension value is unchanged (i.e. taken\nfrom the input tensor). If âallowzeroâ is set, and the new shape includes 0, the\ndimension will be set explicitly to zero (i.e. not taken from input tensor).\nShape (second input) could be an empty shape, which means converting to a scalar.\nThe input tensorâs shape and the output tensorâs shape are required to have the same number of elements.\nIf the attribute âallowzeroâ is set, it is invalid for the specified shape to\ncontain both a zero value and -1, as the value of the dimension corresponding\nto -1 cannot be determined uniquely.",
            "Attributes":"allowzero - INT\n(default is\n'0'\n):\n(Optional) By default, when any value in the âshapeâ input is equal to zero the corresponding dimension value is copied from the input tensor dynamically. allowzero=1 indicates that if any value in the âshapeâ input is set to zero, the zero value is honored, similar to NumPy.",
            "Inputs":"data\n(heterogeneous) -\nT\n:\nAn input tensor.\nshape\n(heterogeneous) -\ntensor(int64)\n:\nSpecified shape for output.",
            "Outputs":"reshaped\n(heterogeneous) -\nT\n:\nReshaped data.",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(bool)\n,\ntensor(complex128)\n,\ntensor(complex64)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(float4e2m1)\n,\ntensor(float8e4m3fn)\n,\ntensor(float8e4m3fnuz)\n,\ntensor(float8e5m2)\n,\ntensor(float8e5m2fnuz)\n,\ntensor(float8e8m0)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int4)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(string)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint4)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain input and output types to all tensor types.\nReshape - 23 vs 24"
        }
    },
    {
        "name":"Resize",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Resize.html#l-onnx-doc-resize",
        "details":{
            "Summary":"Resize the input tensor. In general, it calculates every value in the output tensor as a weighted average of neighborhood (a.k.a. sampling locations) in the input tensor.\nEach dimension value of the output tensor is:\noutput_dimension\n=\nfloor\n(\ninput_dimension\n*\n(\nroi_end\n-\nroi_start\n)\n*\nscale\n)\nif input âsizesâ is not specified.",
            "Attributes":"antialias - INT\n(default is\n'0'\n):\nIf set to 1, âlinearâ and âcubicâ interpolation modes will use an antialiasing filter when downscaling. Antialiasing is achieved by stretching the resampling filter by a factor max(1, 1 \/ scale), which means that when downsampling, more input pixels contribute to an output pixel.\naxes - INTS\n:\nIf provided, it specifies a subset of axes that âroiâ, âscalesâ and âsizesâ refer to. If not provided, all axes are assumed [0, 1, â¦, r-1], where r = rank(data). Non-specified dimensions are interpreted as non-resizable. Negative value means counting dimensions from the back. Accepted range is [-r, r-1], where r = rank(data). Behavior is undefined if an axis is repeated.\ncoordinate_transformation_mode - STRING\n(default is\n'half_pixel'\n):\nThis attribute describes how to transform the coordinate in the resized tensor to the coordinate in the original tensor.\nThe coordinate of each dimension is transformed individually. Letâs describe a case using axis x as an example.\nDenote\nx_resized\nas the coordinate of axis x in the resized tensor,\nx_original\nas the coordinate of axis x in the original tensor,\nlength_original\nas the length of the original tensor in axis x,\nlength_resized\nas the length of the resized tensor in axis x,\nscale\n=\nlength_resized\n\/\nlength_original\n,\noutput_width\nthe target length on the axis x which can be a fractional number when it is calculated out of a scale factor,\nand\noutput_width_int\nthe effective output width as an integer.\nif coordinate_transformation_mode is\n\"half_pixel\"\n,\nx_original\n=\n(\nx_resized\n+\n0.5\n)\n\/\nscale\n-\n0.5\nif coordinate_transformation_mode is\n\"half_pixel_symmetric\"\n,\nadjustment\n=\noutput_width_int\n\/\noutput_width\ncenter\n=\ninput_width\n\/\n2\noffset\n=\ncenter\n*\n(\n1\n-\nadjustment\n)\nx_ori\n=\noffset\n+\n(\nx\n+\n0.5\n)\n\/\nscale\n-\n0.5\nif coordinate_transformation_mode is\n\"pytorch_half_pixel\"\n,\nx_original = length_resized > 1 ? (x_resized + 0.5) \/ scale - 0.5 : 0\nif coordinate_transformation_mode is\n\"align_corners\"\n,\nx_original\n=\nx_resized\n*\n(\nlength_original\n-\n1\n)\n\/\n(\nlength_resized\n-\n1\n)\nif coordinate_transformation_mode is\n\"asymmetric\"\n,\nx_original\n=\nx_resized\n\/\nscale\nif coordinate_transformation_mode is\n\"tf_crop_and_resize\"\n,\nx_original = length_resized > 1 ? start_x * (length_original - 1) + x_resized * (end_x - start_x) * (length_original - 1) \/ (length_resized - 1) : 0.5 * (start_x + end_x) * (length_original - 1)\n.\ncubic_coeff_a - FLOAT\n(default is\n'-0.75'\n):\nThe coefficient âaâ used in cubic interpolation. Two common choice are -0.5 (in some cases of TensorFlow) and -0.75 (in PyTorch). Check out Equation (4) in\nhttps:\/\/ieeexplore.ieee.org\/document\/1163711\nfor the details. This attribute is valid only if mode is âcubicâ.\nexclude_outside - INT\n(default is\n'0'\n):\nIf set to 1, the weight of sampling locations outside the tensor will be set to 0 and the weight will be renormalized so that their sum is 1.0. The default value is 0.\nextrapolation_value - FLOAT\n(default is\n'0.0'\n):\nWhen coordinate_transformation_mode is âtf_crop_and_resizeâ and x_original is outside the range [0, length_original - 1], this value is used as the corresponding output value. Default is 0.0f.\nkeep_aspect_ratio_policy - STRING\n(default is\n'stretch'\n):\nThis attribute describes how to interpret the\nsizes\ninput with regard to keeping the original aspect ratio of the input, and it is not applicable when\nthe\nscales\ninput is used.\nGiven a set of\nsizes\n, associated with a subset of\naxes\n(explicitly provided or default), and assuming\nd\n=\naxes[i]\n, with\ni\nbeing the index of the provided\nsizes\n.\nIf\nkeep_aspect_ratio_policy\nis\n\"stretch\"\n, the original aspect ratio is disregarded, and the input is resized to the specified size:\nout_size[d]\n=\nsizes[i]\nIf\nkeep_aspect_ratio_policy\nis\n\"not_larger\"\n, the sizes are adjusted so that no extent of the output is larger than the specified size, while keeping the original aspect ratio:\nscale\n=\nMin\n(\nsizes\n[\ni\n]\n\/\nin_size\n[\nd\n])\nout_size\n[\nd\n]\n=\nround_int\n(\nscale\n*\nin_size\n[\nd\n])\nIf\nkeep_aspect_ratio_policy\nis\n\"not_smaller\"\n, the sizes are adjusted so that no extent of the output is smaller than the specified size, while keeping the original aspect ratio:\nscale\n=\nMax\n(\nsizes\n[\ni\n]\n\/\nin_size\n[\nd\n])\nout_size\n[\nd\n]\n=\nround_int\n(\nscale\n*\nin_size\n[\nd\n])\nFor non-resizable axes (those not specified in\naxes\n), the output size will be equal to the input size.\nNote:\nround_int\nstands for computing the nearest integer value, rounding halfway cases up.\nmode - STRING\n(default is\n'nearest'\n):\nThree interpolation modes: ânearestâ (default), âlinearâ and âcubicâ. The âlinearâ mode includes linear interpolation for 1D tensor and N-linear interpolation for N-D tensor (for example, bilinear interpolation for 2D tensor). The âcubicâ mode includes cubic interpolation for 1D tensor and N-cubic interpolation for N-D tensor (for example, bicubic interpolation for 2D tensor).\nnearest_mode - STRING\n(default is\n'round_prefer_floor'\n):\nFour modes: âround_prefer_floorâ (default, as known as round half down), âround_prefer_ceilâ (as known as round half up), âfloorâ, âceilâ. Only used by nearest interpolation. It indicates how to get ânearestâ pixel in input tensor from x_original, so this attribute is valid only if âmodeâ is ânearestâ.",
            "Inputs":"Between 1 and 4 inputs.\nX\n(heterogeneous) -\nT1\n:\nN-D tensor\nroi\n(optional, heterogeneous) -\nT2\n:\n1-D tensor given as [start1, â¦, startN, end1, â¦, endN], where N is the rank of X or the length of axes, if provided. The RoIsâ coordinates are normalized in the coordinate system of the input image. It only takes effect when coordinate_transformation_mode is âtf_crop_and_resizeâ\nscales\n(optional, heterogeneous) -\ntensor(float)\n:\nThe scale array along each dimension. It takes value greater than 0. If itâs less than 1, itâs sampling down, otherwise, itâs upsampling. The number of elements of âscalesâ should be the same as the rank of input âXâ or the length of âaxesâ, if provided. One of âscalesâ and âsizesâ MUST be specified and it is an error if both are specified. If âsizesâ is needed, the user can use an empty string as the name of âscalesâ in this operatorâs input list.\nsizes\n(optional, heterogeneous) -\ntensor(int64)\n:\nTarget size of the output tensor. Its interpretation depends on the âkeep_aspect_ratio_policyâ value.The number of elements of âsizesâ should be the same as the rank of input âXâ, or the length of âaxesâ, if provided. Only one of âscalesâ and âsizesâ can be specified.",
            "Outputs":"Y\n(heterogeneous) -\nT1\n:\nN-D tensor after resizing",
            "Type constraints":"T1\nin (\ntensor(bfloat16)\n,\ntensor(bool)\n,\ntensor(complex128)\n,\ntensor(complex64)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(string)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain input âXâ and output âYâ to all tensor types.\nT2\nin (\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n):\nConstrain roi type to float or double.\nResize - 18 vs 19"
        }
    },
    {
        "name":"ReverseSequence",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__ReverseSequence.html#l-onnx-doc-reversesequence",
        "details":{
            "Summary":"Reverse batch of sequences having different lengths specified by\nsequence_lens\n.\nFor each slice i iterating on batch axis, the operator reverses the first sequence_lens[i] elements on time axis,\nand copies elements whose indexâs beyond sequence_lens[i] to the output. So the output slice i contains reversed\nsequences on the first sequence_lens[i] elements, then have original values copied for the other elements.\nExample 1:\ninput = [[0.0, 4.0, 8.0,  12.0],\n[1.0, 5.0, 9.0,  13.0],\n[2.0, 6.0, 10.0, 14.0],\n[3.0, 7.0, 11.0, 15.0]]\nsequence_lens = [4, 3, 2, 1]\ntime_axis = 0\nbatch_axis = 1\noutput = [[3.0, 6.0, 9.0,  12.0],\n[2.0, 5.0, 8.0,  13.0],\n[1.0, 4.0, 10.0, 14.0],\n[0.0, 7.0, 11.0, 15.0]]\nExample 2:\ninput = [[0.0,  1.0,  2.0,  3.0 ],\n[4.0,  5.0,  6.0,  7.0 ],\n[8.0,  9.0,  10.0, 11.0],\n[12.0, 13.0, 14.0, 15.0]]\nsequence_lens = [1, 2, 3, 4]\ntime_axis = 1\nbatch_axis = 0\noutput = [[0.0,  1.0,  2.0,  3.0 ],\n[5.0,  4.0,  6.0,  7.0 ],\n[10.0, 9.0,  8.0,  11.0],\n[15.0, 14.0, 13.0, 12.0]]",
            "Attributes":"batch_axis - INT\n(default is\n'1'\n):\n(Optional) Specify which axis is batch axis. Must be one of 1 (default), or 0.\ntime_axis - INT\n(default is\n'0'\n):\n(Optional) Specify which axis is time axis. Must be one of 0 (default), or 1.",
            "Inputs":"input\n(heterogeneous) -\nT\n:\nTensor of rank r >= 2.\nsequence_lens\n(heterogeneous) -\ntensor(int64)\n:\nTensor specifying lengths of the sequences in a batch. It has shape\n[batch_size]\n.",
            "Outputs":"Y\n(heterogeneous) -\nT\n:\nTensor with same shape of input.",
            "Type constraints":"T\nin (\ntensor(bool)\n,\ntensor(complex128)\n,\ntensor(complex64)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(string)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nInput and output types can be of any tensor type."
        }
    },
    {
        "name":"RoiAlign",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__RoiAlign.html#l-onnx-doc-roialign",
        "details":{
            "Summary":"Region of Interest (RoI) align operation described in the\nMask R-CNN paper\n.\nRoiAlign consumes an input tensor X and region of interests (rois)\nto apply pooling across each RoI; it produces a 4-D tensor of shape\n(num_rois, C, output_height, output_width).\nRoiAlign is proposed to avoid the misalignment by removing\nquantizations while converting from original image into feature\nmap and from feature map into RoI feature; in each ROI bin,\nthe value of the sampled locations are computed directly\nthrough bilinear interpolation.",
            "Attributes":"coordinate_transformation_mode - STRING\n(default is\n'half_pixel'\n):\nAllowed values are âhalf_pixelâ and âoutput_half_pixelâ. Use the value âhalf_pixelâ to pixel shift the input coordinates by -0.5 (the recommended behavior). Use the value âoutput_half_pixelâ to omit the pixel shift for the input (use this for a backward-compatible behavior).\nmode - STRING\n(default is\n'avg'\n):\nThe pooling method. Two modes are supported: âavgâ and âmaxâ. Default is âavgâ.\noutput_height - INT\n(default is\n'1'\n):\ndefault 1; Pooled output Yâs height.\noutput_width - INT\n(default is\n'1'\n):\ndefault 1; Pooled output Yâs width.\nsampling_ratio - INT\n(default is\n'0'\n):\nNumber of sampling points in the interpolation grid used to compute the output value of each pooled output bin. If > 0, then exactly sampling_ratio x sampling_ratio grid points are used. If == 0, then an adaptive number of grid points are used (computed as ceil(roi_width \/ output_width), and likewise for height). Default is 0.\nspatial_scale - FLOAT\n(default is\n'1.0'\n):\nMultiplicative spatial scale factor to translate ROI coordinates from their input spatial scale to the scale used when pooling, i.e., spatial scale of the input feature map X relative to the input image. E.g.; default is 1.0f.",
            "Inputs":"X\n(heterogeneous) -\nT1\n:\nInput data tensor from the previous operator; 4-D feature map of shape (N, C, H, W), where N is the batch size, C is the number of channels, and H and W are the height and the width of the data.\nrois\n(heterogeneous) -\nT1\n:\nRoIs (Regions of Interest) to pool over; rois is 2-D input of shape (num_rois, 4) given as [[x1, y1, x2, y2], â¦]. The RoIsâ coordinates are in the coordinate system of the input image. Each coordinate set has a 1:1 correspondence with the âbatch_indicesâ input.\nbatch_indices\n(heterogeneous) -\nT2\n:\n1-D tensor of shape (num_rois,) with each element denoting the index of the corresponding image in the batch.",
            "Outputs":"Y\n(heterogeneous) -\nT1\n:\nRoI pooled output, 4-D tensor of shape (num_rois, C, output_height, output_width). The r-th batch element Y[r-1] is a pooled feature map corresponding to the r-th RoI X[r-1].",
            "Type constraints":"T1\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n):\nConstrain types to float tensors.\nT2\nin (\ntensor(int64)\n):\nConstrain types to int tensors.\nRoiAlign - 16 vs 22"
        }
    },
    {
        "name":"RotaryEmbedding",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__RotaryEmbedding.html#l-onnx-doc-rotaryembedding",
        "details":{
            "Summary":"RotaryEmbedding is the implementation of rotary positional embeddings (RoPE) based on the paper\nhttps:\/\/arxiv.org\/pdf\/2104.09864\n.\nThe key advantage of RoPE is that it allows the model to understand both the absolute position of a token and the relative distances\nbetween tokens. This is achieved through a rotational mechanism where the extent of rotation is computed based on the tokenâs absolute position (position_ids).\nThe rotational mechanism is defined by sine and cosine functions that are used to represent the rotation angles.\nFor each token in the sequence, its positional embedding is computed by rotating its embedding vector. This is done by splitting the\nembedding vector either into two halves or interleaving every alternate token and applying the rotation matrix to each half of the embedding vector.\nThe rotation matrix is parameterized by the tokenâs position in the sequence. The rotated halves of the embedding vector are concatenated\nto form the final positional embedding for each token. The rotated positional embeddings are used in the self-attention mechanism.\nThe rotation ensures that the model captures both absolute and relative positional information.\nRotary embeddings are defined using the following algorithm:\ndef\ncompute_rotary_embedding\n(\ninput\n,\nposition_ids\n,\nsin_cache\n,\ncos_cache\n,\ninterleaved\n=\n0\n,\nrotary_embedding_dim\n=\n0\n,\nnum_heads\n=\n0\n,\n):\n# First ensure input to be processed has shape [batch_size, seq_len, num_heads, head_size]\nif\nlen\n(\ninput\n.\nshape\n)\n==\n4\n:\ninput\n=\nnp\n.\ntranspose\n(\ninput\n,\n(\n0\n,\n2\n,\n1\n,\n3\n))\nbatch_size\n=\ninput\n.\nshape\n[\n0\n]\nsequence_length\n=\ninput\n.\nshape\n[\n1\n]\nif\nlen\n(\ninput\n.\nshape\n)\n==\n3\n:\nhidden_size\n=\ninput\n.\nshape\n[\n2\n]\nassert\nnum_heads\n!=\n0\nhead_size\n=\nint\n(\nhidden_size\n\/\nnum_heads\n)\nnew_shape\n=\n[\nbatch_size\n,\nsequence_length\n,\nnum_heads\n,\nhead_size\n]\ninput\n=\nnp\n.\nreshape\n(\ninput\n,\nnew_shape\n)\nassert\nlen\n(\ninput\n.\nshape\n)\n==\n4\nhead_size\n=\ninput\n.\nshape\n[\n3\n]\n# Fully or partially perform rotation on input based on rotary_embedding_dim attribute\nif\nrotary_embedding_dim\n==\n0\n:\n# If rotary_embedding_dim not provided, perform full rotation by using head_size\nrotary_embedding_dim\n=\nhead_size\nx_rotate\n=\ninput\n[:,\n:,\n:,\n:\nrotary_embedding_dim\n]\nx_not_rotate\n=\ninput\n[:,\n:,\n:,\nrotary_embedding_dim\n:]\nrotary_embedding_dim_half\n=\nint\n(\nrotary_embedding_dim\n\/\n2\n)\n# Retrieve sin and cos caches using position ids\nif\nposition_ids\nis\nnot\nNone\n:\ncos\n=\ncos_cache\n[\nposition_ids\n]\n# Shape: [batch_size, sequence_length, head_size\/2]\nsin\n=\nsin_cache\n[\nposition_ids\n]\n# Shape: [batch_size, sequence_length, head_size\/2]\nelse\n:\ncos\n=\ncos_cache\nsin\n=\nsin_cache\ncos\n=\ncos\n[:,\n:,\n:\nrotary_embedding_dim_half\n]\n# Shape: [batch_size, sequence_length, rotary_embedding_dim\/2]\nsin\n=\nsin\n[:,\n:,\n:\nrotary_embedding_dim_half\n]\n# Shape: [batch_size, sequence_length, rotary_embedding_dim\/2]\ncos\n=\nnp\n.\nexpand_dims\n(\ncos\n,\naxis\n=\n2\n)\n# Shape: [batch_size, sequence_length, 1, rotary_embedding_dim\/2]\nsin\n=\nnp\n.\nexpand_dims\n(\nsin\n,\naxis\n=\n2\n)\n# Shape: [batch_size, sequence_length, 1, rotary_embedding_dim\/2]\n# Either divide the input in halves or interleave (based on interleaved attribute)\nif\ninterleaved\n:\nx1\n=\nx_rotate\n[:,\n:,\n:,\n0\n::\n2\n]\nx2\n=\nx_rotate\n[:,\n:,\n:,\n1\n::\n2\n]\nelse\n:\nx1\n,\nx2\n=\nnp\n.\nsplit\n(\nx_rotate\n,\n2\n,\naxis\n=-\n1\n)\n# Calculate real and imaginary values\nreal\n=\ncos\n*\nx1\n-\nsin\n*\nx2\nimag\n=\nsin\n*\nx1\n+\ncos\n*\nx2\n# Inserted rotated embeddings back to the original input\nif\ninterleaved\n:\n# x_rotate[:, :, :, 0::2] = real\n# x_rotate[:, :, :, 1::2] = imag\nreal\n=\nnp\n.\nexpand_dims\n(\nreal\n,\naxis\n=-\n1\n)\nimag\n=\nnp\n.\nexpand_dims\n(\nimag\n,\naxis\n=-\n1\n)\nx_rotate_concat\n=\nnp\n.\nconcatenate\n((\nreal\n,\nimag\n),\naxis\n=-\n1\n)\nx_rotate\n=\nnp\n.\nreshape\n(\nx_rotate_concat\n,\nx_rotate\n.\nshape\n)\nelse\n:\nx_rotate\n=\nnp\n.\nconcatenate\n((\nreal\n,\nimag\n),\naxis\n=-\n1\n)\noutput\n=\nnp\n.\nconcatenate\n((\nx_rotate\n,\nx_not_rotate\n),\naxis\n=-\n1\n)\nif\nlen\n(\noriginal_input_shape\n)\n==\n3\n:\noutput\n=\nnp\n.\nreshape\n(\noutput\n,\ninput\n.\nshape\n)\nelse\n:\noutput\n=\nnp\n.\ntranspose\n(\noutput\n,\n(\n0\n,\n2\n,\n1\n,\n3\n))\nreturn\noutput",
            "Attributes":"interleaved - INT\n(default is\n'0'\n):\nRotate using interleaved pattern. Default value is 0 (False).\nnum_heads - INT\n:\nNumber of attention heads. Must be provided when input is a 3D tensor.\nrotary_embedding_dim - INT\n(default is\n'0'\n):\nRotary embedding dimension used to apply partial rotary embeddings.",
            "Inputs":"Between 3 and 4 inputs.\nX\n(heterogeneous) -\nT\n:\nThe input tensor representing the token embeddings. 4D tensor with shape\n(batch_size,\nnum_heads,\nsequence_length,\nhead_size)\nor 3D tensor with shape\n(batch_size,\nsequence_length,\nhidden_size)\n. For cases with a 4D input tensor,\nhead_size\nhas to be even. For cases with a 3D input tensor,\nnum_heads\nattribute must be provided and\nhidden_size\nmust be an even multiple of\nnum_heads\nwhere\nhidden_size\n=\nnum_heads\n*\nhead_size\ncos_cache\n(heterogeneous) -\nT\n:\nThe cosine values for the rotation. 2D tensor with shape\n(max_position_id_plus_1,\nhead_size\n\/\n2)\nfor full rotation or\n(max_position_id_plus_1,\nrotary_embedding_dim\n\/\n2)\nfor partial rotation when\nposition_ids\nare provided. 3D tensor with shape\n(batch_size,\nsequence_length,\nhead_size\n\/\n2)\nfor full rotation or\n(batch_size,\nsequence_length,\nrotary_embedding_dim\n\/\n2)\nfor partial rotation when\nposition_ids\nare not provided.\nmax_position_id_plus_1\nis a parameter to the model.\nsin_cache\n(heterogeneous) -\nT\n:\nThe sine values for the rotation. 2D tensor with shape\n(max_position_id_plus_1,\nhead_size\n\/\n2)\nfor full rotation or\n(max_position_id_plus_1,\nrotary_embedding_dim\n\/\n2)\nfor partial rotation when\nposition_ids\nare provided. 3D tensor with shape\n(batch_size,\nsequence_length,\nhead_size\n\/\n2)\nfor full rotation or\n(batch_size,\nsequence_length,\nrotary_embedding_dim\n\/\n2)\nfor partial rotation when\nposition_ids\nare not provided.\nmax_position_id_plus_1\nis a parameter to the model.\nposition_ids\n(optional, heterogeneous) -\nM\n:\nThe position indices for the tokens. 2D tensor with shape\n(batch_size,\nsequence_length)",
            "Outputs":"Y\n(heterogeneous) -\nT\n:\nTensor with same shape as input.",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(float)\n,\ntensor(float16)\n):\nConstrain input and output types to float tensors.\nM\nin (\ntensor(int64)\n):\nConstrain input and output types to integer tensors."
        }
    },
    {
        "name":"Round",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Round.html#l-onnx-doc-round",
        "details":{
            "Summary":"Round takes one input Tensor and rounds the values, element-wise, meaning\nit finds the nearest integer for each value.\nIn case of halves, the rule is to round them to the nearest even integer.\nIf input x is integral, +0, -0, NaN,  or infinite, x itself is returned.\nThe output tensor has the same shape and type as the input.\nExamples:\nround\n([\n0.9\n])\n=\n[\n1.0\n]\nround\n([\n2.5\n])\n=\n[\n2.0\n]\nround\n([\n2.3\n])\n=\n[\n2.0\n]\nround\n([\n1.5\n])\n=\n[\n2.0\n]\nround\n([\n-\n4.5\n])\n=\n[\n-\n4.0\n]",
            "Inputs":"X\n(heterogeneous) -\nT\n:\nInput tensor",
            "Outputs":"Y\n(heterogeneous) -\nT\n:\nOutput tensor",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n):\nConstrain input and output types to float tensors.\nRound - 11 vs 22"
        }
    },
    {
        "name":"STFT",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__STFT.html#l-onnx-doc-stft",
        "details":{
            "Summary":"Computes the Short-time Fourier Transform of the signal.",
            "Attributes":"onesided - INT\n(default is\n'1'\n):\nIf onesided is 1, only values for w in [0, 1, 2, â¦, floor(n_fft\/2) + 1] are returned because the real-to-complex Fourier transform satisfies the conjugate symmetry, i.e., X[m, w] = X[m,w]=X[m,n_fft-w]*. Note if the input or window tensors are complex, then onesided output is not possible. Enabling onesided with real inputs performs a Real-valued fast Fourier transform (RFFT).When invoked with real or complex valued input, the default value is 1. Values can be 0 or 1.",
            "Inputs":"Between 2 and 4 inputs.\nsignal\n(heterogeneous) -\nT1\n:\nInput tensor representing a real or complex valued signal. For real input, the following shape is expected: [batch_size][signal_length][1]. For complex input, the following shape is expected: [batch_size][signal_length][2], where [batch_size][signal_length][0] represents the real component and [batch_size][signal_length][1] represents the imaginary component of the signal.\nframe_step\n(heterogeneous) -\nT2\n:\nThe number of samples to step between successive DFTs.\nwindow\n(optional, heterogeneous) -\nT1\n:\nA tensor representing the window that will be slid over the signal.The window must have rank 1 with shape: [window_shape]. Itâs an optional value.\nframe_length\n(optional, heterogeneous) -\nT2\n:\nA scalar representing the size of the DFT. Itâs an optional value.",
            "Outputs":"output\n(heterogeneous) -\nT1\n:\nThe Short-time Fourier Transform of the signals.If onesided is 1, the output has the shape: [batch_size][frames][dft_unique_bins][2], where dft_unique_bins is frame_length \/\/ 2 + 1 (the unique components of the DFT) If onesided is 0, the output has the shape: [batch_size][frames][frame_length][2], where frame_length is the length of the DFT.",
            "Type constraints":"T1\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n):\nConstrain signal and output to float tensors.\nT2\nin (\ntensor(int32)\n,\ntensor(int64)\n):\nConstrain scalar length types to int64_t."
        }
    },
    {
        "name":"Scan",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Scan.html#l-onnx-doc-scan",
        "details":{
            "Summary":"Scan can be used to iterate over one or more scan_input tensors,\nconstructing zero or more scan_output tensors. It combines ideas from general recurrences,\nfunctional programming constructs such as scan, fold, map, and zip, and is intended to enable\ngeneralizations of RNN-like constructs for sequence-to-sequence processing.\nOther tensors (referred to as state_variables here) can be used to carry a state\nwhen iterating from one element to another (similar to hidden-state in RNNs, also referred\nto as loop-carried dependences in the context of loops).\nMany common usages involve a single scan_input tensor (where functionality\nsimilar to scan, fold and map can be obtained). When more than one scan_input is used,\na behavior similar to zip is obtained.\nThe attribute body must be a graph, specifying the computation to be performed in\nevery iteration. It takes as input the current values of the state_variables and\nthe current iterated element of the scan_inputs. It must return the (updated) values\nof the state_variables and zero or more scan_output_element tensors. The values of the\nscan_output_element tensors are concatenated over all the iterations to produce the\nscan_output values of the scan construct (similar to the concatenated intermediate\nhidden-state values of RNN-like constructs). All the output tensors (state_variables as\nwell as scan_output_element tensors) are required to have the same shape in each iteration\nof the loop (a restriction imposed to enable efficient memory allocation).\nNote that the iterated element passed to the body subgraph does not have a sequence\naxis. It will have a rank one less than the rank of the corresponding scan_input.\nThe scan operation returns the final values of the state_variables as well as the\nscan_outputs.\nThe optional attribute scan_input_directions specifies the direction (forward or backward)\nfor each scan input. If this attribute is omitted, all sequences are scanned in the forward\ndirection. A bidirectional scan may be performed by specifying the same tensor input twice\nin the scan_inputs, once with a forward direction, and once with a backward direction.\nThe scan_output of the operation is produced by concatenating the scan_output_element\nvalues produced by the body in each iteration.  The optional attribute scan_output_directions\nspecifies the direction in which scan_output is constructed (by appending or prepending the\nscan_output_element to scan_output in each iteration) for each scan_output. If this attribute\nis omitted, the scan_output_element is appended to the scan_output in each iteration.\nThe optional attribute scan_input_axes specifies the axis to be scanned for each scan_input.\nIf omitted, every scan_input will be scanned in axis 0. For example, if axis 0 is the\nbatch axis and axis 1 is the time axis (to be scanned), specify an axis value of 1.\nNote that scanning a non-zero axis may be less efficient than scanning axis zero.\nThe optional attribute scan_output_axes specifies the axis along which the scan_outputs\nare accumulated for each scan_output. For example, if axis 1 is the time axis (to be\nscanned) for both inputs and outputs, specify a scan_input axis and scan_output axis\nvalue of 1.\nNote that because of the ONNX restriction that only the last parameter of an operator can\nbe variadic, the initial-states and scan-inputs are listed together as one input parameter.\nSimilarly, the final-states and scan-outputs are listed together as one output parameter.\nThe attribute num_scan_inputs indicates the number M of scan-inputs.\nThe behavior of\nScan <\n    num_scan_inputs = m,\n    body = loop-body,\n    scan_input_axes = [axis_1, ..., axis_m]\n> (init_1, ..., init_n, scan_1, ..., scan_m)\nis equivalent to the following pseudo-code:\n\/\/ scan_i.shape[axis_i] denotes the (max) sequence-length of scan_i\n\/\/ scan_i.shape[axis_i] is required to be equal to scan_j.shape[axis_j] for all i,j.\nsequence_length = scan_1.shape[axis_1];\n\n\/\/ initialize state-variables\nst_1 = init_1; ... st_n = init_n;\n\/\/ initialize scan-output variables: [] denotes an empty tensor\nscan_out_1 = []; ...; scan_out_k = [];\n\/\/ identify number of iterations:\n\n\/\/ execute loop\nfor (int t = 0; t < sequence_length; ++t) {\n    \/\/ generate the scan-input elements: the notation T<axis=k>[t] indicates the sub-tensor\n    \/\/ of rank one less than T obtained by indexing T at position t along axis k.\n    si_1 = scan_1<axis=axis_1>[t];\n    ... ;\n    si_m = scan_m<axis=axis_m>[t];\n    \/\/ execute loop-body\n    st_1, ..., st_n, so_1, ..., so_k = loop-body(st_1, ..., st_n, si_1, ..., si_m)\n    \/\/ accumulate the scan-output elements\n    scan_out_1 = Concat<axis=0>(scan_out_1, so_1); ... ; scan_out_k = Concat<axis=0>(scan_out_k, so_k);\n}\n\nreturn st_1, ..., st_n, scan_out_1, ..., scan_out_k;\nSample usage: Encoding RNN using a Scan\nThe following example shows how a simple RNN over an input tensor %X, with weight tensor %Wi,\nrecurrence weight tensor %Ri, bias tensors %Wbi and %Rbi, and initial hidden-state %H_0 can\nbe encoded as a ScanLoop. Note that the loop-body is a nested graph, and it directly computes\nvalues are computed in the outer graph, they need to be passed in as extra state_variables.\ngraph rnn-encoding {\n  %H_0 = ...\n  %X = ...\n  %Y_h, %Y = Scan[body = <graph rnn-cell-1>, num_scan_inputs=1](%H_0, %X)\n  return %Y, %Y_h\n}\n\ngraph rnn-cell-1 (\n  %H_tminus1[FLOAT, tensor]\n  %X_t[FLOAT, tensor]\n) {\n  %Wi = ...\n  %Ri = ...\n  %Wbi = ...\n  %Rbi = ...\n  %t1 = X_t * (Wi^T)\n  %t2 = H_tminus1*(Ri^T)\n  %t3 = Add(%t1, %t2)\n  %t4 = Add(%t3, %Wbi)\n  %t5 = Add(%t4, %Rbi)\n  %Ht = Tanh(%t5)\n  %Accumulate = Identity(%Ht)\n  return %Ht, %Accumulate\n}",
            "Attributes":"body - GRAPH\n(required) :\nThe graph run each iteration. It has N+M inputs: (loop state variablesâ¦, scan_input_eltsâ¦). It has N+K outputs: (loop state variablesâ¦, scan_output_eltsâ¦). Each scan_output is created by concatenating the value of the specified scan_output_elt value at the end of each iteration of the loop. It is an error if the dimensions of these values change across loop iterations.\nnum_scan_inputs - INT\n(required) :\nAn attribute specifying the number of scan_inputs M.\nscan_input_axes - INTS\n:\nAn optional list of M flags. The i-th element of the list specifies the axis to be scanned (the sequence axis) for the i-th scan_input. If omitted, 0 will be used as the scan axis for every scan_input. Negative value for an axis means counting dimensions from the back. Accepted range is [-r, r-1] where r = rank(input).\nscan_input_directions - INTS\n:\nAn optional list of M flags. The i-th element of the list specifies the direction to be scanned for the i-th scan_input tensor: 0 indicates forward direction and 1 indicates reverse direction. If omitted, all scan_input tensors will be scanned in the forward direction.\nscan_output_axes - INTS\n:\nAn optional list of K flags. The i-th element of the list specifies the axis for the i-th scan_output. The scan outputs are accumulated along the specified axis. If omitted, 0 will be used as the scan axis for every scan_output. Negative value for an axis means counting dimensions from the back. Accepted range is [-r, r-1].\nscan_output_directions - INTS\n:\nAn optional list of K flags, one for each scan_output. The i-th element of the list specifies whether the i-th scan_output should be constructed by appending or prepending a new value in each iteration: 0 indicates appending and 1 indicates prepending. If omitted, all scan_output tensors will be produced by appending a value in each iteration.",
            "Inputs":"Between 1 and 2147483647 inputs.\ninitial_state_and_scan_inputs\n(variadic) -\nV\n:\nInitial values of the loopâs N state variables followed by M scan_inputs",
            "Outputs":"Between 1 and 2147483647 outputs.\nfinal_state_and_scan_outputs\n(variadic) -\nV\n:\nFinal values of the loopâs N state variables followed by K scan_outputs",
            "Type constraints":"V\nin (\ntensor(bfloat16)\n,\ntensor(bool)\n,\ntensor(complex128)\n,\ntensor(complex64)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(float4e2m1)\n,\ntensor(float8e4m3fn)\n,\ntensor(float8e4m3fnuz)\n,\ntensor(float8e5m2)\n,\ntensor(float8e5m2fnuz)\n,\ntensor(float8e8m0)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int4)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(string)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint4)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nAll Tensor types up to IRv12.\nScan - 23 vs 24"
        }
    },
    {
        "name":"Scatter",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Scatter.html#l-onnx-doc-scatter",
        "details":{
            "Summary":"This operator is deprecated. Please use ScatterElements, which provides the same functionality.\nScatter takes three inputs\ndata\n,\nupdates\n, and\nindices\nof the same\nrank r >= 1 and an optional attribute axis that identifies an axis of\ndata\n(by default, the outer-most axis, that is axis 0). The output of the operation\nis produced by creating a copy of the input\ndata\n, and then updating its value\nto values specified by\nupdates\nat specific index positions specified by\nindices\n. Its output shape is the same as the shape of\ndata\n.\nFor each entry in\nupdates\n, the target index in\ndata\nis obtained by combining\nthe corresponding entry in\nindices\nwith the index of the entry itself: the\nindex-value for dimension = axis is obtained from the value of the corresponding\nentry in\nindices\nand the index-value for dimension != axis is obtained from the\nindex of the entry itself.\nFor instance, in a 2-D tensor case, the update corresponding to the [i][j] entry\nis performed as below:\noutput\n[\nindices\n[\ni\n][\nj\n]][\nj\n]\n=\nupdates\n[\ni\n][\nj\n]\nif\naxis\n=\n0\n,\noutput\n[\ni\n][\nindices\n[\ni\n][\nj\n]]\n=\nupdates\n[\ni\n][\nj\n]\nif\naxis\n=\n1\n,\nThis operator is the inverse of GatherElements. It is similar to Torchâs Scatter operation.\nExample 1:\ndata\n=\n[\n[\n0.0\n,\n0.0\n,\n0.0\n],\n[\n0.0\n,\n0.0\n,\n0.0\n],\n[\n0.0\n,\n0.0\n,\n0.0\n],\n]\nindices\n=\n[\n[\n1\n,\n0\n,\n2\n],\n[\n0\n,\n2\n,\n1\n],\n]\nupdates\n=\n[\n[\n1.0\n,\n1.1\n,\n1.2\n],\n[\n2.0\n,\n2.1\n,\n2.2\n],\n]\noutput\n=\n[\n[\n2.0\n,\n1.1\n,\n0.0\n]\n[\n1.0\n,\n0.0\n,\n2.2\n]\n[\n0.0\n,\n2.1\n,\n1.2\n]\n]\nExample 2:\ndata\n=\n[[\n1.0\n,\n2.0\n,\n3.0\n,\n4.0\n,\n5.0\n]]\nindices\n=\n[[\n1\n,\n3\n]]\nupdates\n=\n[[\n1.1\n,\n2.1\n]]\naxis\n=\n1\noutput\n=\n[[\n1.0\n,\n1.1\n,\n3.0\n,\n2.1\n,\n5.0\n]]",
            "Attributes":"axis - INT\n(default is\n'0'\n):\nWhich axis to scatter on. Negative value means counting dimensions from the back. Accepted range is [-r, r-1] where r = rank(data).",
            "Inputs":"data\n(heterogeneous) -\nT\n:\nTensor of rank r >= 1.\nindices\n(heterogeneous) -\nTind\n:\nTensor of int32\/int64 indices, of r >= 1 (same rank as input). All index values are expected to be within bounds [-s, s-1] along axis of size s. It is an error if any of the index values are out of bounds.\nupdates\n(heterogeneous) -\nT\n:\nTensor of rank r >=1 (same rank and shape as indices)",
            "Outputs":"output\n(heterogeneous) -\nT\n:\nTensor of rank r >= 1 (same rank as input).",
            "Type constraints":"T\nin (\ntensor(bool)\n,\ntensor(complex128)\n,\ntensor(complex64)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(string)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nInput and output types can be of any tensor type.\nTind\nin (\ntensor(int32)\n,\ntensor(int64)\n):\nConstrain indices to integer types\nScatter - 9 vs 11"
        }
    },
    {
        "name":"ScatterElements",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__ScatterElements.html#l-onnx-doc-scatterelements",
        "details":{
            "Summary":"ScatterElements takes three inputs\ndata\n,\nupdates\n, and\nindices\nof the same\nrank r >= 1 and an optional attribute axis that identifies an axis of\ndata\n(by default, the outer-most axis, that is axis 0). The output of the operation\nis produced by creating a copy of the input\ndata\n, and then updating its value\nto values specified by\nupdates\nat specific index positions specified by\nindices\n. Its output shape is the same as the shape of\ndata\n.\nFor each entry in\nupdates\n, the target index in\ndata\nis obtained by combining\nthe corresponding entry in\nindices\nwith the index of the entry itself: the\nindex-value for dimension = axis is obtained from the value of the corresponding\nentry in\nindices\nand the index-value for dimension != axis is obtained from the\nindex of the entry itself.\nreduction\nallows specification of an optional reduction operation, which is applied to all values in\nupdates\ntensor into\noutput\nat the specified\nindices\n.\nIn cases where\nreduction\nis set to ânoneâ, indices should not have duplicate entries: that is, if idx1 != idx2,\nthen indices[idx1] != indices[idx2]. For instance, in a 2-D tensor case, the update\ncorresponding to the [i][j] entry is performed as below:\noutput\n[\nindices\n[\ni\n][\nj\n]][\nj\n]\n=\nupdates\n[\ni\n][\nj\n]\nif\naxis\n=\n0\n,\noutput\n[\ni\n][\nindices\n[\ni\n][\nj\n]]\n=\nupdates\n[\ni\n][\nj\n]\nif\naxis\n=\n1\n,\nWhen\nreduction\nis set to some reduction function\nf\n, the update corresponding to the [i][j] entry is performed as below:\noutput\n[\nindices\n[\ni\n][\nj\n]][\nj\n]\n=\nf\n(\noutput\n[\nindices\n[\ni\n][\nj\n]][\nj\n],\nupdates\n[\ni\n][\nj\n])\nif\naxis\n=\n0\n,\noutput\n[\ni\n][\nindices\n[\ni\n][\nj\n]]\n=\nf\n(\noutput\n[\ni\n][\nindices\n[\ni\n][\nj\n]],\nupdates\n[\ni\n][\nj\n])\nif\naxis\n=\n1\n,\nwhere the\nf\nis\n+\n,\n*\n,\nmax\nor\nmin\nas specified.\nThis operator is the inverse of GatherElements. It is similar to Torchâs Scatter operation.\n(Opset 18 change): Adds max\/min to the set of allowed reduction ops.\nExample 1:\ndata\n=\n[\n[\n0.0\n,\n0.0\n,\n0.0\n],\n[\n0.0\n,\n0.0\n,\n0.0\n],\n[\n0.0\n,\n0.0\n,\n0.0\n],\n]\nindices\n=\n[\n[\n1\n,\n0\n,\n2\n],\n[\n0\n,\n2\n,\n1\n],\n]\nupdates\n=\n[\n[\n1.0\n,\n1.1\n,\n1.2\n],\n[\n2.0\n,\n2.1\n,\n2.2\n],\n]\noutput\n=\n[\n[\n2.0\n,\n1.1\n,\n0.0\n]\n[\n1.0\n,\n0.0\n,\n2.2\n]\n[\n0.0\n,\n2.1\n,\n1.2\n]\n]\nExample 2:\ndata\n=\n[[\n1.0\n,\n2.0\n,\n3.0\n,\n4.0\n,\n5.0\n]]\nindices\n=\n[[\n1\n,\n3\n]]\nupdates\n=\n[[\n1.1\n,\n2.1\n]]\naxis\n=\n1\noutput\n=\n[[\n1.0\n,\n1.1\n,\n3.0\n,\n2.1\n,\n5.0\n]]",
            "Attributes":"axis - INT\n(default is\n'0'\n):\nWhich axis to scatter on. Negative value means counting dimensions from the back. Accepted range is [-r, r-1] where r = rank(data).\nreduction - STRING\n(default is\n'none'\n):\nType of reduction to apply: none (default), add, mul, max, min. ânoneâ: no reduction applied. âaddâ:  reduction using the addition operation. âmulâ: reduction using the multiplication operation.âmaxâ: reduction using the maximum operation.âminâ: reduction using the minimum operation.",
            "Inputs":"data\n(heterogeneous) -\nT\n:\nTensor of rank r >= 1.\nindices\n(heterogeneous) -\nTind\n:\nTensor of int32\/int64 indices, of r >= 1 (same rank as input). All index values are expected to be within bounds [-s, s-1] along axis of size s. It is an error if any of the index values are out of bounds.\nupdates\n(heterogeneous) -\nT\n:\nTensor of rank r >=1 (same rank and shape as indices)",
            "Outputs":"output\n(heterogeneous) -\nT\n:\nTensor of rank r >= 1 (same rank as input).",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(bool)\n,\ntensor(complex128)\n,\ntensor(complex64)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(string)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nInput and output types can be of any tensor type.\nTind\nin (\ntensor(int32)\n,\ntensor(int64)\n):\nConstrain indices to integer types\nScatterElements - 16 vs 18"
        }
    },
    {
        "name":"ScatterND",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__ScatterND.html#l-onnx-doc-scatternd",
        "details":{
            "Summary":"ScatterND takes three inputs\ndata\ntensor of rank r >= 1,\nindices\ntensor of rank q >= 1,\nand\nupdates\ntensor of rank q + r - indices.shape[-1] - 1. The output of the operation\nis produced by creating a copy of the input\ndata\n, and then updating its value to values\nspecified by\nupdates\nat specific index positions specified by\nindices\n. Its output shape\nis the same as the shape of\ndata\n.\nindices\nis an integer tensor. Let k denote indices.shape[-1], the last dimension in the shape of\nindices\n.\nindices\nis treated as a (q-1)-dimensional tensor of k-tuples, where each k-tuple is a partial-index into\ndata\n.\nHence, k can be a value at most the rank of\ndata\n. When k equals rank(data), each update entry specifies an\nupdate to a single element of the tensor. When k is less than rank(data) each update entry specifies an\nupdate to a slice of the tensor. Index values are allowed to be negative, as per the usual\nconvention for counting backwards from the end, but are expected in the valid range.\nupdates\nis treated as a (q-1)-dimensional tensor of replacement-slice-values. Thus, the\nfirst (q-1) dimensions of updates.shape must match the first (q-1) dimensions of indices.shape.\nThe remaining dimensions of\nupdates\ncorrespond to the dimensions of the\nreplacement-slice-values. Each replacement-slice-value is a (r-k) dimensional tensor,\ncorresponding to the trailing (r-k) dimensions of\ndata\n.  Thus, the shape of\nupdates\nmust equal indices.shape[0:q-1] ++ data.shape[k:r-1], where ++ denotes the concatenation\nof shapes.\nThe\noutput\nis calculated via the following equation:\noutput\n=\nnp\n.\ncopy\n(\ndata\n)\nupdate_indices\n=\nindices\n.\nshape\n[:\n-\n1\n]\nfor\nidx\nin\nnp\n.\nndindex\n(\nupdate_indices\n):\noutput\n[\nindices\n[\nidx\n]]\n=\nupdates\n[\nidx\n]\nThe order of iteration in the above loop is not specified.\nIn particular, indices should not have duplicate entries: that is, if idx1 != idx2, then indices[idx1] != indices[idx2].\nThis ensures that the output value does not depend on the iteration order.\nreduction\nallows specification of an optional reduction operation, which is applied to all values in\nupdates\ntensor into\noutput\nat the specified\nindices\n.\nIn cases where\nreduction\nis set to ânoneâ, indices should not have duplicate entries: that is, if idx1 != idx2,\nthen indices[idx1] != indices[idx2]. This ensures that the output value does not depend on the iteration order.\nWhen\nreduction\nis set to some reduction function\nf\n,\noutput\nis calculated as follows:\noutput\n=\nnp\n.\ncopy\n(\ndata\n)\nupdate_indices\n=\nindices\n.\nshape\n[:\n-\n1\n]\nfor\nidx\nin\nnp\n.\nndindex\n(\nupdate_indices\n):\noutput\n[\nindices\n[\nidx\n]]\n=\nf\n(\noutput\n[\nindices\n[\nidx\n]],\nupdates\n[\nidx\n])\nwhere the\nf\nis\n+\n,\n*\n,\nmax\nor\nmin\nas specified.\nThis operator is the inverse of GatherND.\n(Opset 18 change): Adds max\/min to the set of allowed reduction ops.\nExample 1:\ndata\n=\n[\n1\n,\n2\n,\n3\n,\n4\n,\n5\n,\n6\n,\n7\n,\n8\n]\nindices\n=\n[[\n4\n],\n[\n3\n],\n[\n1\n],\n[\n7\n]]\nupdates\n=\n[\n9\n,\n10\n,\n11\n,\n12\n]\noutput\n=\n[\n1\n,\n11\n,\n3\n,\n10\n,\n9\n,\n6\n,\n7\n,\n12\n]\nExample 2:\ndata\n=\n[[[\n1\n,\n2\n,\n3\n,\n4\n],\n[\n5\n,\n6\n,\n7\n,\n8\n],\n[\n8\n,\n7\n,\n6\n,\n5\n],\n[\n4\n,\n3\n,\n2\n,\n1\n]],\n[[\n1\n,\n2\n,\n3\n,\n4\n],\n[\n5\n,\n6\n,\n7\n,\n8\n],\n[\n8\n,\n7\n,\n6\n,\n5\n],\n[\n4\n,\n3\n,\n2\n,\n1\n]],\n[[\n8\n,\n7\n,\n6\n,\n5\n],\n[\n4\n,\n3\n,\n2\n,\n1\n],\n[\n1\n,\n2\n,\n3\n,\n4\n],\n[\n5\n,\n6\n,\n7\n,\n8\n]],\n[[\n8\n,\n7\n,\n6\n,\n5\n],\n[\n4\n,\n3\n,\n2\n,\n1\n],\n[\n1\n,\n2\n,\n3\n,\n4\n],\n[\n5\n,\n6\n,\n7\n,\n8\n]]]\nindices\n=\n[[\n0\n],\n[\n2\n]]\nupdates\n=\n[[[\n5\n,\n5\n,\n5\n,\n5\n],\n[\n6\n,\n6\n,\n6\n,\n6\n],\n[\n7\n,\n7\n,\n7\n,\n7\n],\n[\n8\n,\n8\n,\n8\n,\n8\n]],\n[[\n1\n,\n1\n,\n1\n,\n1\n],\n[\n2\n,\n2\n,\n2\n,\n2\n],\n[\n3\n,\n3\n,\n3\n,\n3\n],\n[\n4\n,\n4\n,\n4\n,\n4\n]]]\noutput\n=\n[[[\n5\n,\n5\n,\n5\n,\n5\n],\n[\n6\n,\n6\n,\n6\n,\n6\n],\n[\n7\n,\n7\n,\n7\n,\n7\n],\n[\n8\n,\n8\n,\n8\n,\n8\n]],\n[[\n1\n,\n2\n,\n3\n,\n4\n],\n[\n5\n,\n6\n,\n7\n,\n8\n],\n[\n8\n,\n7\n,\n6\n,\n5\n],\n[\n4\n,\n3\n,\n2\n,\n1\n]],\n[[\n1\n,\n1\n,\n1\n,\n1\n],\n[\n2\n,\n2\n,\n2\n,\n2\n],\n[\n3\n,\n3\n,\n3\n,\n3\n],\n[\n4\n,\n4\n,\n4\n,\n4\n]],\n[[\n8\n,\n7\n,\n6\n,\n5\n],\n[\n4\n,\n3\n,\n2\n,\n1\n],\n[\n1\n,\n2\n,\n3\n,\n4\n],\n[\n5\n,\n6\n,\n7\n,\n8\n]]]",
            "Attributes":"reduction - STRING\n(default is\n'none'\n):\nType of reduction to apply: none (default), add, mul, max, min. ânoneâ: no reduction applied. âaddâ:  reduction using the addition operation. âmulâ:  reduction using the addition operation. âmaxâ: reduction using the maximum operation.âminâ: reduction using the minimum operation.",
            "Inputs":"data\n(heterogeneous) -\nT\n:\nTensor of rank r >= 1.\nindices\n(heterogeneous) -\ntensor(int64)\n:\nTensor of rank q >= 1.\nupdates\n(heterogeneous) -\nT\n:\nTensor of rank q + r - indices_shape[-1] - 1.",
            "Outputs":"output\n(heterogeneous) -\nT\n:\nTensor of rank r >= 1.",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(bool)\n,\ntensor(complex128)\n,\ntensor(complex64)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(string)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain input and output types to any tensor type.\nScatterND - 16 vs 18"
        }
    },
    {
        "name":"Selu",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Selu.html#l-onnx-doc-selu",
        "details":{
            "Summary":"Selu takes one input data (Tensor\n) and produces one output data\n(Tensor\n) where the scaled exponential linear unit function,\ny\n=\ngamma\n*\n(alpha\n*\ne^x\n-\nalpha)\nfor\nx\n<=\n0\n,\ny\n=\ngamma\n*\nx\nfor\nx\n>\n0\n,\nis applied to the tensor elementwise.\nFunction Body\nÂ¶\nThe function definition for this operator.\n<\ndomain\n:\n\"\"\n,\nopset_import\n:\n[\n\"\"\n:\n18\n]\n>\nSelu\n<\ngamma\n,\nalpha\n>\n(\nX\n)\n=>\n(\nY\n)\n{\nAlpha\n=\nConstant\n<\nvalue_float\n:\nfloat\n=\n@alpha\n>\n()\nAlphaCast\n=\nCastLike\n(\nAlpha\n,\nX\n)\nGamma\n=\nConstant\n<\nvalue_float\n:\nfloat\n=\n@gamma\n>\n()\nGammaCast\n=\nCastLike\n(\nGamma\n,\nX\n)\nZero\n=\nConstant\n<\nvalue\n:\ntensor\n=\nfloat\n{\n0\n}\n>\n()\nZeroCast\n=\nCastLike\n(\nZero\n,\nX\n)\nExpX\n=\nExp\n(\nX\n)\nAlphaMulExpX\n=\nMul\n(\nAlphaCast\n,\nExpX\n)\nAlphaMulExpXSubAlpha\n=\nSub\n(\nAlphaMulExpX\n,\nAlphaCast\n)\nNeg\n=\nMul\n(\nGammaCast\n,\nAlphaMulExpXSubAlpha\n)\nPos\n=\nMul\n(\nGammaCast\n,\nX\n)\nXLessThanZero\n=\nLess\n(\nX\n,\nZeroCast\n)\nY\n=\nWhere\n(\nXLessThanZero\n,\nNeg\n,\nPos\n)\n}",
            "Attributes":"alpha - FLOAT\n(default is\n'1.67326'\n):\nCoefficient of SELU default to 1.67326319217681884765625 (i.e., float32 approximation of 1.6732632423543772848170429916717).\ngamma - FLOAT\n(default is\n'1.0507'\n):\nCoefficient of SELU default to 1.05070102214813232421875 (i.e., float32 approximation of 1.0507009873554804934193349852946).",
            "Inputs":"X\n(heterogeneous) -\nT\n:\nInput tensor",
            "Outputs":"Y\n(heterogeneous) -\nT\n:\nOutput tensor",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n):\nConstrain input and output types to float tensors.\nSelu - 6 vs 22"
        }
    },
    {
        "name":"SequenceAt",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__SequenceAt.html#l-onnx-doc-sequenceat",
        "details":{
            "Summary":"Outputs a tensor copy from the tensor at âpositionâ in âinput_sequenceâ.\nAccepted range for âpositionâ is in\n[-n,\nn\n-\n1]\n, where\nn\nis the number of tensors in âinput_sequenceâ.\nNegative value means counting positions from the back.",
            "Inputs":"input_sequence\n(heterogeneous) -\nS\n:\nInput sequence.\nposition\n(heterogeneous) -\nI\n:\nPosition of the tensor in the sequence. Negative value means counting positions from the back. Accepted range in\n[-n,\nn\n-\n1]\n, where\nn\nis the number of tensors in âinput_sequenceâ. It is an error if any of the index values are out of bounds. It must be a scalar(tensor of empty shape).",
            "Outputs":"tensor\n(heterogeneous) -\nT\n:\nOutput tensor at the specified position in the input sequence.",
            "Type constraints":"S\nin (\nseq(tensor(bool))\n,\nseq(tensor(complex128))\n,\nseq(tensor(complex64))\n,\nseq(tensor(double))\n,\nseq(tensor(float))\n,\nseq(tensor(float16))\n,\nseq(tensor(int16))\n,\nseq(tensor(int32))\n,\nseq(tensor(int64))\n,\nseq(tensor(int8))\n,\nseq(tensor(string))\n,\nseq(tensor(uint16))\n,\nseq(tensor(uint32))\n,\nseq(tensor(uint64))\n,\nseq(tensor(uint8))\n):\nConstrain to any tensor type.\nT\nin (\ntensor(bool)\n,\ntensor(complex128)\n,\ntensor(complex64)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(string)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain to any tensor type.\nI\nin (\ntensor(int32)\n,\ntensor(int64)\n):\nConstrain position to integral tensor. It must be a scalar(tensor of empty shape)."
        }
    },
    {
        "name":"SequenceConstruct",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__SequenceConstruct.html#l-onnx-doc-sequenceconstruct",
        "details":{
            "Summary":"Construct a tensor sequence containing âinputsâ tensors.\nAll tensors in âinputsâ must have the same data type.",
            "Inputs":"Between 1 and 2147483647 inputs.\ninputs\n(variadic, heterogeneous) -\nT\n:\nTensors.",
            "Outputs":"output_sequence\n(heterogeneous) -\nS\n:\nSequence enclosing the input tensors.",
            "Type constraints":"T\nin (\ntensor(bool)\n,\ntensor(complex128)\n,\ntensor(complex64)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(string)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain input types to any tensor type.\nS\nin (\nseq(tensor(bool))\n,\nseq(tensor(complex128))\n,\nseq(tensor(complex64))\n,\nseq(tensor(double))\n,\nseq(tensor(float))\n,\nseq(tensor(float16))\n,\nseq(tensor(int16))\n,\nseq(tensor(int32))\n,\nseq(tensor(int64))\n,\nseq(tensor(int8))\n,\nseq(tensor(string))\n,\nseq(tensor(uint16))\n,\nseq(tensor(uint32))\n,\nseq(tensor(uint64))\n,\nseq(tensor(uint8))\n):\nConstrain output types to any tensor type."
        }
    },
    {
        "name":"SequenceEmpty",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__SequenceEmpty.html#l-onnx-doc-sequenceempty",
        "details":{
            "Summary":"Construct an empty tensor sequence, with given data type.",
            "Attributes":"dtype - INT\n:\n(Optional) The data type of the tensors in the output sequence. The default type is âfloatâ.",
            "Outputs":"output\n(heterogeneous) -\nS\n:\nEmpty sequence.",
            "Type constraints":"S\nin (\nseq(tensor(bool))\n,\nseq(tensor(complex128))\n,\nseq(tensor(complex64))\n,\nseq(tensor(double))\n,\nseq(tensor(float))\n,\nseq(tensor(float16))\n,\nseq(tensor(int16))\n,\nseq(tensor(int32))\n,\nseq(tensor(int64))\n,\nseq(tensor(int8))\n,\nseq(tensor(string))\n,\nseq(tensor(uint16))\n,\nseq(tensor(uint32))\n,\nseq(tensor(uint64))\n,\nseq(tensor(uint8))\n):\nConstrain output types to any tensor type."
        }
    },
    {
        "name":"SequenceErase",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__SequenceErase.html#l-onnx-doc-sequenceerase",
        "details":{
            "Summary":"Outputs a tensor sequence that removes the tensor at âpositionâ from âinput_sequenceâ.\nAccepted range for âpositionâ is in\n[-n,\nn\n-\n1]\n, where\nn\nis the number of tensors in âinput_sequenceâ.\nNegative value means counting positions from the back.\nâpositionâ is optional, by default it erases the last tensor from âinput_sequenceâ.",
            "Inputs":"Between 1 and 2 inputs.\ninput_sequence\n(heterogeneous) -\nS\n:\nInput sequence.\nposition\n(optional, heterogeneous) -\nI\n:\nPosition of the tensor in the sequence. Negative value means counting positions from the back. Accepted range in\n[-n,\nn\n-\n1]\n, where\nn\nis the number of tensors in âinput_sequenceâ. It is an error if any of the index values are out of bounds. It must be a scalar(tensor of empty shape).",
            "Outputs":"output_sequence\n(heterogeneous) -\nS\n:\nOutput sequence that has the tensor at the specified position removed.",
            "Type constraints":"S\nin (\nseq(tensor(bool))\n,\nseq(tensor(complex128))\n,\nseq(tensor(complex64))\n,\nseq(tensor(double))\n,\nseq(tensor(float))\n,\nseq(tensor(float16))\n,\nseq(tensor(int16))\n,\nseq(tensor(int32))\n,\nseq(tensor(int64))\n,\nseq(tensor(int8))\n,\nseq(tensor(string))\n,\nseq(tensor(uint16))\n,\nseq(tensor(uint32))\n,\nseq(tensor(uint64))\n,\nseq(tensor(uint8))\n):\nConstrain to any tensor type.\nI\nin (\ntensor(int32)\n,\ntensor(int64)\n):\nConstrain position to integral tensor. It must be a scalar(tensor of empty shape)."
        }
    },
    {
        "name":"SequenceInsert",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__SequenceInsert.html#l-onnx-doc-sequenceinsert",
        "details":{
            "Summary":"Outputs a tensor sequence that inserts âtensorâ into âinput_sequenceâ at âpositionâ.\nâtensorâ must have the same data type as âinput_sequenceâ.\nAccepted range for âpositionâ is in\n[-n,\nn]\n, where\nn\nis the number of tensors in âinput_sequenceâ.\nNegative value means counting positions from the back.\nâpositionâ is optional, by default it inserts âtensorâ to the back of âinput_sequenceâ.",
            "Inputs":"Between 2 and 3 inputs.\ninput_sequence\n(heterogeneous) -\nS\n:\nInput sequence.\ntensor\n(heterogeneous) -\nT\n:\nInput tensor to be inserted into the input sequence.\nposition\n(optional, heterogeneous) -\nI\n:\nPosition in the sequence where the new tensor is inserted. It is optional and default is to insert to the back of the sequence. Negative value means counting positions from the back. Accepted range in\n[-n,\nn]\n, where\nn\nis the number of tensors in âinput_sequenceâ. It is an error if any of the index values are out of bounds. It must be a scalar(tensor of empty shape).",
            "Outputs":"output_sequence\n(heterogeneous) -\nS\n:\nOutput sequence that contains the inserted tensor at given position.",
            "Type constraints":"T\nin (\ntensor(bool)\n,\ntensor(complex128)\n,\ntensor(complex64)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(string)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain to any tensor type.\nS\nin (\nseq(tensor(bool))\n,\nseq(tensor(complex128))\n,\nseq(tensor(complex64))\n,\nseq(tensor(double))\n,\nseq(tensor(float))\n,\nseq(tensor(float16))\n,\nseq(tensor(int16))\n,\nseq(tensor(int32))\n,\nseq(tensor(int64))\n,\nseq(tensor(int8))\n,\nseq(tensor(string))\n,\nseq(tensor(uint16))\n,\nseq(tensor(uint32))\n,\nseq(tensor(uint64))\n,\nseq(tensor(uint8))\n):\nConstrain to any tensor type.\nI\nin (\ntensor(int32)\n,\ntensor(int64)\n):\nConstrain position to integral tensor. It must be a scalar(tensor of empty shape)."
        }
    },
    {
        "name":"SequenceLength",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__SequenceLength.html#l-onnx-doc-sequencelength",
        "details":{
            "Summary":"Produces a scalar(tensor of empty shape) containing the number of tensors in âinput_sequenceâ.",
            "Inputs":"input_sequence\n(heterogeneous) -\nS\n:\nInput sequence.",
            "Outputs":"length\n(heterogeneous) -\nI\n:\nLength of input sequence. It must be a scalar(tensor of empty shape).",
            "Type constraints":"S\nin (\nseq(tensor(bool))\n,\nseq(tensor(complex128))\n,\nseq(tensor(complex64))\n,\nseq(tensor(double))\n,\nseq(tensor(float))\n,\nseq(tensor(float16))\n,\nseq(tensor(int16))\n,\nseq(tensor(int32))\n,\nseq(tensor(int64))\n,\nseq(tensor(int8))\n,\nseq(tensor(string))\n,\nseq(tensor(uint16))\n,\nseq(tensor(uint32))\n,\nseq(tensor(uint64))\n,\nseq(tensor(uint8))\n):\nConstrain to any tensor type.\nI\nin (\ntensor(int64)\n):\nConstrain output to integral tensor. It must be a scalar(tensor of empty shape)."
        }
    },
    {
        "name":"SequenceMap",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__SequenceMap.html#l-onnx-doc-sequencemap",
        "details":{
            "Summary":"Applies a sub-graph to each sample in the input sequence(s).\nInputs can be either tensors or sequences, with the exception of the first input which must\nbe a sequence. The length of the first input sequence will determine the number of samples in the\noutputs. Any other sequence inputs should have the same number of samples. The number of inputs\nand outputs, should match the one of the subgraph.\nFor each i-th element in the output, a sample will be extracted from the input sequence(s) at\nthe i-th position and the sub-graph will be applied to it.\nThe outputs will contain the outputs of the sub-graph for each sample, in the same order as in\nthe input.\nThis operator assumes that processing each sample is independent and could executed in parallel\nor in any order. Users cannot expect any specific ordering in which each subgraph is computed.",
            "Attributes":"body - GRAPH\n(required) :\nThe graph to be run for each sample in the sequence(s). It should have as many inputs and outputs as inputs and outputs to the SequenceMap function.",
            "Inputs":"Between 1 and 2147483647 inputs.\ninput_sequence\n(heterogeneous) -\nS\n:\nInput sequence.\nadditional_inputs\n(variadic) -\nV\n:\nAdditional inputs to the graph",
            "Outputs":"Between 1 and 2147483647 outputs.\nout_sequence\n(variadic) -\nS\n:\nOutput sequence(s)",
            "Type constraints":"S\nin (\nseq(tensor(bool))\n,\nseq(tensor(complex128))\n,\nseq(tensor(complex64))\n,\nseq(tensor(double))\n,\nseq(tensor(float))\n,\nseq(tensor(float16))\n,\nseq(tensor(int16))\n,\nseq(tensor(int32))\n,\nseq(tensor(int64))\n,\nseq(tensor(int8))\n,\nseq(tensor(string))\n,\nseq(tensor(uint16))\n,\nseq(tensor(uint32))\n,\nseq(tensor(uint64))\n,\nseq(tensor(uint8))\n):\nConstrain input types to any sequence type.\nV\nin (\nseq(tensor(bool))\n,\nseq(tensor(complex128))\n,\nseq(tensor(complex64))\n,\nseq(tensor(double))\n,\nseq(tensor(float))\n,\nseq(tensor(float16))\n,\nseq(tensor(int16))\n,\nseq(tensor(int32))\n,\nseq(tensor(int64))\n,\nseq(tensor(int8))\n,\nseq(tensor(string))\n,\nseq(tensor(uint16))\n,\nseq(tensor(uint32))\n,\nseq(tensor(uint64))\n,\nseq(tensor(uint8))\n,\ntensor(bool)\n,\ntensor(complex128)\n,\ntensor(complex64)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(string)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain to any tensor or sequence type."
        }
    },
    {
        "name":"Shape",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Shape.html#l-onnx-doc-shape",
        "details":{
            "Summary":"Takes a tensor as input and outputs an 1D int64 tensor containing the shape of the input tensor.\nOptional attributes start and end can be used to compute a slice of the input tensorâs shape.\nIf start axis is omitted, the slice starts from axis 0.\nThe end axis, if specified, is exclusive (and the returned value will not include the size of that axis).\nIf the end axis is omitted, the axes upto the last one will be included.\nNegative axes indicate counting back from the last axis.\nNote that axes will be clamped to the range [0, r], where r is the\nrank of the input tensor if they are out-of-range (after adding r in the case of\nnegative axis). Thus, specifying any end value > r is equivalent to specifying an end\nvalue of r, and specifying any start value < -r is equivalent to specifying a start\nvalue of 0. If start > end, the result will be an empty shape.\nExamples:\nInput\ntensor\nwith\nshape\n:\n[\n2\n,\n3\n,\n4\n]\nNo\nattributes\nspecified\n.\nOutput\n:\n[\n2\n,\n3\n,\n4\n]\nInput\ntensor\nwith\nshape\n:\n[\n2\n,\n3\n,\n4\n]\nstart\n:\n-\n1\nOutput\n:\n[\n4\n]\nInput\ntensor\nwith\nshape\n:\n[\n2\n,\n3\n,\n4\n]\nend\n:\n-\n1\nOutput\n:\n[\n2\n,\n3\n]\nInput\ntensor\nwith\nshape\n:\n[\n2\n,\n3\n,\n4\n]\nstart\n:\n1\nend\n:\n2\nOutput\n:\n[\n3\n]",
            "Attributes":"end - INT\n:\n(Optional) Ending axis for slicing the shape. Negative value means counting dimensions from the back. If omitted, sizes of all axes upto (including) the last one will be included.\nstart - INT\n(default is\n'0'\n):\n(Optional) Starting axis for slicing the shape. Default value is 0.Negative value means counting dimensions from the back.",
            "Inputs":"data\n(heterogeneous) -\nT\n:\nAn input tensor.",
            "Outputs":"shape\n(heterogeneous) -\nT1\n:\nShape of the input tensor",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(bool)\n,\ntensor(complex128)\n,\ntensor(complex64)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(float4e2m1)\n,\ntensor(float8e4m3fn)\n,\ntensor(float8e4m3fnuz)\n,\ntensor(float8e5m2)\n,\ntensor(float8e5m2fnuz)\n,\ntensor(float8e8m0)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int4)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(string)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint4)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nInput tensor can be of arbitrary type.\nT1\nin (\ntensor(int64)\n):\nConstrain output to int64 tensor.\nShape - 23 vs 24"
        }
    },
    {
        "name":"Shrink",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Shrink.html#l-onnx-doc-shrink",
        "details":{
            "Summary":"Shrink takes one input data (Tensor\n) and produces one Tensor output,\nhaving same datatype and shape with input. It has two attributes, lambd and\nbias. The formula of this operator is: If x < -lambd, y = x + bias;\nIf x > lambd, y = x - bias; Otherwise, y = 0.\nFunction Body\nÂ¶\nThe function definition for this operator.\n<\ndomain\n:\n\"\"\n,\nopset_import\n:\n[\n\"\"\n:\n18\n]\n>\nShrink\n<\nbias\n,\nlambd\n>\n(\ninput\n)\n=>\n(\noutput\n)\n{\nLambd\n=\nConstant\n<\nvalue_float\n:\nfloat\n=\n@lambd\n>\n()\nLambdCast\n=\nCastLike\n(\nLambd\n,\ninput\n)\nBias\n=\nConstant\n<\nvalue_float\n:\nfloat\n=\n@bias\n>\n()\nBiasCast\n=\nCastLike\n(\nBias\n,\ninput\n)\nZero\n=\nConstant\n<\nvalue\n:\ntensor\n=\nfloat\n{\n0\n}\n>\n()\nZeroCast\n=\nCastLike\n(\nZero\n,\ninput\n)\nNegLmbda\n=\nNeg\n(\nLambdCast\n)\nInputLessThanNegLambda\n=\nLess\n(\ninput\n,\nNegLmbda\n)\nInputAddBias\n=\nAdd\n(\ninput\n,\nBiasCast\n)\nInputSubBias\n=\nSub\n(\ninput\n,\nBiasCast\n)\nLambdaLessThanInput\n=\nLess\n(\nLambdCast\n,\ninput\n)\nInputSubBiasOrZero\n=\nWhere\n(\nLambdaLessThanInput\n,\nInputSubBias\n,\nZeroCast\n)\noutput\n=\nWhere\n(\nInputLessThanNegLambda\n,\nInputAddBias\n,\nInputSubBiasOrZero\n)\n}",
            "Attributes":"bias - FLOAT\n(default is\n'0.0'\n):\nThe bias value added to output. Default is 0.\nlambd - FLOAT\n(default is\n'0.5'\n):\nThe lambd value for the Shrink formulation. Default is 0.5.",
            "Inputs":"input\n(heterogeneous) -\nT\n:\nThe input data as Tensor.",
            "Outputs":"output\n(heterogeneous) -\nT\n:\nThe output.",
            "Type constraints":"T\nin (\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain input to only numeric types."
        }
    },
    {
        "name":"Sigmoid",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Sigmoid.html#l-onnx-doc-sigmoid",
        "details":{
            "Summary":"Sigmoid takes one input data (Tensor\n) and produces one output data\n(Tensor\n) where the sigmoid function, y = 1 \/ (1 + exp(-x)), is applied to the\ntensor elementwise.",
            "Inputs":"X\n(heterogeneous) -\nT\n:\nInput tensor",
            "Outputs":"Y\n(heterogeneous) -\nT\n:\nOutput tensor",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n):\nConstrain input and output types to float tensors.\nSigmoid - 6 vs 13"
        }
    },
    {
        "name":"Sign",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Sign.html#l-onnx-doc-sign",
        "details":{
            "Summary":"Calculate the sign of the given input tensor element-wise.\nIf input > 0, output 1. if input < 0, output -1. if input == 0, output 0.",
            "Inputs":"input\n(heterogeneous) -\nT\n:\nInput tensor",
            "Outputs":"output\n(heterogeneous) -\nT\n:\nThe sign of the input tensor computed element-wise. It has the same shape and type of the input.",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain input and output types to all numeric tensors.\nSign - 9 vs 13"
        }
    },
    {
        "name":"Sin",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Sin.html#l-onnx-doc-sin",
        "details":{
            "Summary":"Calculates the sine of the given input tensor, element-wise.",
            "Inputs":"input\n(heterogeneous) -\nT\n:\nInput tensor",
            "Outputs":"output\n(heterogeneous) -\nT\n:\nThe sine of the input tensor computed element-wise",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n):\nConstrain input and output types to float tensors.\nSin - 7 vs 22"
        }
    },
    {
        "name":"Sinh",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Sinh.html#l-onnx-doc-sinh",
        "details":{
            "Summary":"Calculates the hyperbolic sine of the given input tensor element-wise.",
            "Inputs":"input\n(heterogeneous) -\nT\n:\nInput tensor",
            "Outputs":"output\n(heterogeneous) -\nT\n:\nThe hyperbolic sine values of the input tensor computed element-wise",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n):\nConstrain input and output types to float tensors.\nSinh - 9 vs 22"
        }
    },
    {
        "name":"Size",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Size.html#l-onnx-doc-size",
        "details":{
            "Summary":"Takes a tensor as input and outputs a int64 scalar that equals to the total number of elements of the input tensor.",
            "Inputs":"data\n(heterogeneous) -\nT\n:\nAn input tensor.",
            "Outputs":"size\n(heterogeneous) -\nT1\n:\nTotal number of elements of the input tensor",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(bool)\n,\ntensor(complex128)\n,\ntensor(complex64)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(float4e2m1)\n,\ntensor(float8e4m3fn)\n,\ntensor(float8e4m3fnuz)\n,\ntensor(float8e5m2)\n,\ntensor(float8e5m2fnuz)\n,\ntensor(float8e8m0)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int4)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(string)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint4)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nInput tensor can be of arbitrary type.\nT1\nin (\ntensor(int64)\n):\nConstrain output to int64 tensor, which should be a scalar though.\nSize - 23 vs 24"
        }
    },
    {
        "name":"Slice",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Slice.html#l-onnx-doc-slice",
        "details":{
            "Summary":"Produces a slice of the input tensor along multiple axes. Similar to numpy:\nhttps:\/\/numpy.org\/doc\/stable\/user\/basics.indexing.html?highlight=slice#slicing-and-striding\nSlice uses the\nstarts\n,\nends\n,\naxes\nand\nsteps\ninputs to select a sub-tensor\nof its input\ndata\ntensor.\nAn effective\nstarts[i]\n,\nends[i]\n, and\nsteps[i]\nmust be computed for each\ni\nin\n[0,\n...\nr-1]\nwhere\nr\n=\nrank(input)\nas follows:\nIf\naxes\nare omitted, they are set to\n[0,\n...,\nr-1]\n.\nIf\nsteps\nare omitted, they are set to\n[1,\n...,\n1]\nof length\nlen(starts)\nThe effective values are initialized as\nstart[i]\n=\n0\n,\nends[i]\n=\ndims[i]\nwhere\ndims\nare the dimensions of\ninput\nand\nsteps[i]\n=\n1\n.\nAll negative elements of\naxes\nare made non-negative by adding\nr\nto them, where\nr\n=rank(input)\n.\nAll negative values in\nstarts[i]\nand\nends[i]\nhave\ndims[axes[i]]\nadded to them,\nwhere\ndims\nare the dimensions of\ninput\n. Then\nstart[axes[i]]\nis the adjusted\nstarts[i]\nis clamped into the range\n[0,\ndims[axes[i]]]\nfor positive stepping\nand\n[0,\ndims[axes[i]]-1]\nfor negative stepping.\nThe clamping for the adjusted\nends[i]\ndepends on the sign of\nsteps[i]\nand must\naccommodate copying 0 through\ndims[axes[i]]\nelements, so for positive stepping\nends[axes[i]]\nis clamped to\n[0,\ndims[axes[i]]]\n, while for negative stepping it\nis clamped to\n[-1,\ndims[axes[i]]-1]\n.\nFinally,\nsteps[axes[i]]\n=\nsteps[i]\n.\nFor slicing to the end of a dimension with unknown size, it is recommended to pass\nin\nINT_MAX\nwhen slicing forward and âINT_MINâ when slicing backward.\nExample 1:\ndata\n=\n[\n[\n1\n,\n2\n,\n3\n,\n4\n],\n[\n5\n,\n6\n,\n7\n,\n8\n],\n]\naxes\n=\n[\n0\n,\n1\n]\nstarts\n=\n[\n1\n,\n0\n]\nends\n=\n[\n2\n,\n3\n]\nsteps\n=\n[\n1\n,\n2\n]\nresult\n=\n[\n[\n5\n,\n7\n],\n]\nExample 2:\ndata\n=\n[\n[\n1\n,\n2\n,\n3\n,\n4\n],\n[\n5\n,\n6\n,\n7\n,\n8\n],\n]\nstarts\n=\n[\n0\n,\n1\n]\nends\n=\n[\n-\n1\n,\n1000\n]\nresult\n=\n[\n[\n2\n,\n3\n,\n4\n],\n]",
            "Inputs":"Between 3 and 5 inputs.\ndata\n(heterogeneous) -\nT\n:\nTensor of data to extract slices from.\nstarts\n(heterogeneous) -\nTind\n:\n1-D tensor of starting indices of corresponding axis in\naxes\nends\n(heterogeneous) -\nTind\n:\n1-D tensor of ending indices (exclusive) of corresponding axis in\naxes\naxes\n(optional, heterogeneous) -\nTind\n:\n1-D tensor of axes that\nstarts\nand\nends\napply to. Negative value means counting dimensions from the back. Accepted range is [-r, r-1] where r = rank(data). Behavior is undefined if an axis is repeated.\nsteps\n(optional, heterogeneous) -\nTind\n:\n1-D tensor of slice step of corresponding axis in\naxes\n. Negative value means slicing backward. âstepsâ cannot be 0. Defaults to 1s.",
            "Outputs":"output\n(heterogeneous) -\nT\n:\nSliced data tensor.",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(bool)\n,\ntensor(complex128)\n,\ntensor(complex64)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(string)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain input and output types to all tensor types.\nTind\nin (\ntensor(int32)\n,\ntensor(int64)\n):\nConstrain indices to integer types\nSlice - 11 vs 13"
        }
    },
    {
        "name":"Softmax",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Softmax.html#l-onnx-doc-softmax",
        "details":{
            "Summary":"The operator computes the normalized exponential values for the given input:\nSoftmax(input, axis) = Exp(input) \/ ReduceSum(Exp(input), axis=axis, keepdims=1)\nThe âaxisâ attribute indicates the dimension along which Softmax\nwill be performed. The output tensor has the same shape\nand contains the Softmax values of the corresponding input.",
            "Attributes":"axis - INT\n(default is\n'-1'\n):\nDescribes the dimension Softmax will be performed on.\nNegative value means counting dimensions\nfrom the back. Accepted range is [-r, r-1] where r = rank(input).",
            "Inputs":"input\n(heterogeneous) -\nT\n:\nThe input tensor of rank >= axis.",
            "Outputs":"output\n(heterogeneous) -\nT\n:\nThe output values with the same shape as the input tensor.",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n):\nConstrain input and output types to float tensors.\nSoftmax - 11 vs 13"
        }
    },
    {
        "name":"SoftmaxCrossEntropyLoss",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__SoftmaxCrossEntropyLoss.html#l-onnx-doc-softmaxcrossentropyloss",
        "details":{
            "Summary":"Loss function that measures the softmax cross entropy\nbetween âscoresâ and âlabelsâ.\nThis operator first computes a loss tensor whose shape is identical to the labels input.\nIf the input is 2-D with shape (N, C), the loss tensor may be a N-element vector L = (l_1, l_2, â¦, l_N).\nIf the input is N-D tensor with shape (N, C, D1, D2, â¦, Dk),\nthe loss tensor L may have (N, D1, D2, â¦, Dk) as its shape and L[i,][j_1][j_2]â¦[j_k] denotes a scalar element in L.\nAfter L is available, this operator can optionally do a reduction operator.\nshape(scores): (N, C) where C is the number of classes, or (N, C, D1, D2,â¦, Dk),\nwith K >= 1 in case of K-dimensional loss.\nshape(labels): (N) where each value is 0 <= labels[i] <= C-1, or (N, D1, D2,â¦, Dk),\nwith K >= 1 in case of K-dimensional loss.\nThe loss for one sample, l_i, can calculated as follows:\nl\n[\ni\n][\nd1\n][\nd2\n]\n...\n[\ndk\n]\n=\n-\ny\n[\ni\n][\nc\n][\nd1\n][\nd2\n]\n..\n[\ndk\n],\nwhere\ni\nis\nthe\nindex\nof\nclasses\n.\nor\nl\n[\ni\n][\nd1\n][\nd2\n]\n...\n[\ndk\n]\n=\n-\ny\n[\ni\n][\nc\n][\nd1\n][\nd2\n]\n..\n[\ndk\n]\n*\nweights\n[\nc\n],\nif\n'weights'\nis\nprovided\n.\nloss is zero for the case when label-value equals ignore_index.\nl\n[\ni\n][\nd1\n][\nd2\n]\n...\n[\ndk\n]\n=\n0\n,\nwhen\nlabels\n[\nn\n][\nd1\n][\nd2\n]\n...\n[\ndk\n]\n=\nignore_index\nwhere:\np\n=\nSoftmax\n(\nscores\n)\ny\n=\nLog\n(\np\n)\nc\n=\nlabels\n[\ni\n][\nd1\n][\nd2\n]\n...\n[\ndk\n]\nFinally, L is optionally reduced:\nIf reduction = ânoneâ, the output is L with shape (N, D1, D2, â¦, Dk).\nIf reduction = âsumâ, the output is scalar: Sum(L).\nIf reduction = âmeanâ, the output is scalar: ReduceMean(L), or if weight is provided:\nReduceSum(L)\n\/\nReduceSum(W)\n,\nwhere tensor W is of shape\n(N,\nD1,\nD2,\n...,\nDk)\nand\nW[n][d1][d2]...[dk]\n=\nweights[labels[i][d1][d2]...[dk]]\n.",
            "Attributes":"ignore_index - INT\n:\nSpecifies a target value that is ignored and does not contribute to the input gradient. Itâs an optional value.\nreduction - STRING\n(default is\n'mean'\n):\nType of reduction to apply to loss: none, sum, mean(default). ânoneâ: no reduction will be applied, âsumâ: the output will be summed. âmeanâ: the sum of the output will be divided by the number of elements in the output.",
            "Inputs":"Between 2 and 3 inputs.\nscores\n(heterogeneous) -\nT\n:\nThe predicted outputs with shape [batch_size, class_size], or [batch_size, class_size, D1, D2 , â¦, Dk], where K is the number of dimensions.\nlabels\n(heterogeneous) -\nTind\n:\nThe ground truth output tensor, with shape [batch_size], or [batch_size, D1, D2, â¦, Dk], where K is the number of dimensions. Labels element value shall be in range of [0, C). If ignore_index is specified, it may have a value outside [0, C) and the label values should either be in the range [0, C) or have the value ignore_index.\nweights\n(optional, heterogeneous) -\nT\n:\nA manual rescaling weight given to each class. If given, it has to be a 1D Tensor assigning weight to each of the classes. Otherwise, it is treated as if having all ones.",
            "Outputs":"Between 1 and 2 outputs.\noutput\n(heterogeneous) -\nT\n:\nWeighted loss float Tensor. If reduction is ânoneâ, this has the shape of [batch_size], or [batch_size, D1, D2, â¦, Dk] in case of K-dimensional loss. Otherwise, it is a scalar.\nlog_prob\n(optional, heterogeneous) -\nT\n:\nLog probability tensor. If the output of softmax is prob, its value is log(prob).",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n):\nConstrain input and output types to float tensors.\nTind\nin (\ntensor(int32)\n,\ntensor(int64)\n):\nConstrain target to integer types\nSoftmaxCrossEntropyLoss - 12 vs 13"
        }
    },
    {
        "name":"Softplus",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Softplus.html#l-onnx-doc-softplus",
        "details":{
            "Summary":"Softplus takes one input data (Tensor\n) and produces one output data\n(Tensor\n) where the softplus function, y = ln(exp(x) + 1), is applied to\nthe tensor elementwise.\nFunction Body\nÂ¶\nThe function definition for this operator.\n<\ndomain\n:\n\"\"\n,\nopset_import\n:\n[\n\"\"\n:\n18\n]\n>\nSoftplus\n(\nX\n)\n=>\n(\nY\n)\n{\nexp_x\n=\nExp\n(\nX\n)\none\n=\nConstant\n<\nvalue\n:\ntensor\n=\nfloat\n{\n1\n}\n>\n()\none_cast\n=\nCastLike\n(\none\n,\nX\n)\nexp_x_add_one\n=\nAdd\n(\nexp_x\n,\none_cast\n)\nY\n=\nLog\n(\nexp_x_add_one\n)\n}",
            "Inputs":"X\n(heterogeneous) -\nT\n:\nInput tensor",
            "Outputs":"Y\n(heterogeneous) -\nT\n:\nOutput tensor",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n):\nConstrain input and output types to float tensors.\nSoftplus - 1 vs 22"
        }
    },
    {
        "name":"Softsign",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Softsign.html#l-onnx-doc-softsign",
        "details":{
            "Summary":"Calculates the softsign (x\/(1+|x|)) of the given input tensor element-wise.\nFunction Body\nÂ¶\nThe function definition for this operator.\n<\ndomain\n:\n\"\"\n,\nopset_import\n:\n[\n\"\"\n:\n18\n]\n>\nSoftsign\n(\ninput\n)\n=>\n(\noutput\n)\n{\nOne\n=\nConstant\n<\nvalue\n:\ntensor\n=\nfloat\n{\n1\n}\n>\n()\nOneCast\n=\nCastLike\n(\nOne\n,\ninput\n)\nAbsInput\n=\nAbs\n(\ninput\n)\nOneAddAbsInput\n=\nAdd\n(\nOneCast\n,\nAbsInput\n)\noutput\n=\nDiv\n(\ninput\n,\nOneAddAbsInput\n)\n}",
            "Inputs":"input\n(heterogeneous) -\nT\n:\nInput tensor",
            "Outputs":"output\n(heterogeneous) -\nT\n:\nThe softsign (x\/(1+|x|)) values of the input tensor computed element-wise",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n):\nConstrain input and output types to float tensors.\nSoftsign - 1 vs 22"
        }
    },
    {
        "name":"SpaceToDepth",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__SpaceToDepth.html#l-onnx-doc-spacetodepth",
        "details":{
            "Summary":"SpaceToDepth rearranges blocks of spatial data into depth. More specifically,\nthis op outputs a copy of the input tensor where values from the height and width dimensions\nare moved to the depth dimension.",
            "Attributes":"blocksize - INT\n(required) :\nBlocks of [blocksize, blocksize] are moved.",
            "Inputs":"input\n(heterogeneous) -\nT\n:\nInput tensor of [N,C,H,W], where N is the batch axis, C is the channel or depth, H is the height and W is the width.",
            "Outputs":"output\n(heterogeneous) -\nT\n:\nOutput tensor of [N, C * blocksize * blocksize, H\/blocksize, W\/blocksize].",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(bool)\n,\ntensor(complex128)\n,\ntensor(complex64)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(string)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain input and output types to all tensor types.\nSpaceToDepth - 1 vs 13"
        }
    },
    {
        "name":"Split",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Split.html#l-onnx-doc-split",
        "details":{
            "Summary":"Split a tensor into a list of tensors, along the specified âaxisâ.\nEither input âsplitâ or the attribute ânum_outputsâ should be specified, but not both.\nIf the attribute ânum_outputsâ is specified, then the tensor is split into equal sized parts.\nIf the tensor is not evenly splittable into\nnum_outputs\n, the last chunk will be smaller.\nIf the input âsplitâ is specified, it indicates the sizes of each output in the split.",
            "Attributes":"axis - INT\n(default is\n'0'\n):\nWhich axis to split on. A negative value means counting dimensions from the back. Accepted range is [-rank, rank-1] where r = rank(input).\nnum_outputs - INT\n:\nNumber of outputs to split parts of the tensor into. If the tensor is not evenly splittable the last chunk will be smaller.",
            "Inputs":"Between 1 and 2 inputs.\ninput\n(heterogeneous) -\nT\n:\nThe tensor to split\nsplit\n(optional, heterogeneous) -\ntensor(int64)\n:\nOptional length of each output. Values should be >= 0.Sum of the values must be equal to the dim value at âaxisâ specified.",
            "Outputs":"Between 1 and 2147483647 outputs.\noutputs\n(variadic, heterogeneous) -\nT\n:\nOne or more outputs forming list of tensors after splitting",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(bool)\n,\ntensor(complex128)\n,\ntensor(complex64)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(string)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain input and output types to all tensor types.\nSplit - 13 vs 18"
        }
    },
    {
        "name":"SplitToSequence",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__SplitToSequence.html#l-onnx-doc-splittosequence",
        "details":{
            "Summary":"Split a tensor into a sequence of tensors, along the specified âaxisâ.\nLengths of the parts can be specified using the optional argument âsplitâ.\nIf the argument\nsplit'\nis\nnot\nspecified,\na\ndefault\nscalar\nvalue\nof\n1\nis\nused\nas\nthe\nvalue\nof\nsplitâ.\nâsplitâ must contain only positive numbers.\nâsplitâ is either a scalar (tensor of empty shape), or a 1-D tensor.\nIf âsplitâ is a scalar, then âinputâ will be split into chunks all of size âsplitâ\nif possible. The last chunk alone may be smaller than âsplitâ if the âinputâ size\nalong the given axis âaxisâ is not divisible by âsplitâ.\nIf âsplitâ is a 1-dimensional tensor, the input tensor is split into âsize(split)â chunks,\nwith lengths of the parts on âaxisâ specified in âsplitâ. In this scenario, the sum of entries\nin âsplitâ must be equal to the dimension size of input tensor on âaxisâ.",
            "Attributes":"axis - INT\n(default is\n'0'\n):\nWhich axis to split on. A negative value means counting dimensions from the back. Accepted range is [-rank, rank-1].\nkeepdims - INT\n(default is\n'1'\n):\nKeep the split dimension or not. Default 1, which means we keep split dimension. If input âsplitâ is specified, this attribute is ignored.",
            "Inputs":"Between 1 and 2 inputs.\ninput\n(heterogeneous) -\nT\n:\nThe tensor to split\nsplit\n(optional, heterogeneous) -\nI\n:\nLength of each output. It can be either a scalar(tensor of empty shape), or a 1-D tensor. All values must be >= 0.",
            "Outputs":"output_sequence\n(heterogeneous) -\nS\n:\nOne or more outputs forming a sequence of tensors after splitting",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(bool)\n,\ntensor(complex128)\n,\ntensor(complex64)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(string)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain input types to all tensor types.\nI\nin (\ntensor(int32)\n,\ntensor(int64)\n):\nConstrain split size to integral tensor.\nS\nin (\nseq(tensor(bfloat16))\n,\nseq(tensor(bool))\n,\nseq(tensor(complex128))\n,\nseq(tensor(complex64))\n,\nseq(tensor(double))\n,\nseq(tensor(float))\n,\nseq(tensor(float16))\n,\nseq(tensor(int16))\n,\nseq(tensor(int32))\n,\nseq(tensor(int64))\n,\nseq(tensor(int8))\n,\nseq(tensor(string))\n,\nseq(tensor(uint16))\n,\nseq(tensor(uint32))\n,\nseq(tensor(uint64))\n,\nseq(tensor(uint8))\n):\nConstrain output types to all tensor types.\nSplitToSequence - 11 vs 24"
        }
    },
    {
        "name":"Sqrt",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Sqrt.html#l-onnx-doc-sqrt",
        "details":{
            "Summary":"Square root takes one input data (Tensor\n) and produces one output data\n(Tensor\n) where the square root is, y = x^0.5, is applied to\nthe tensor elementwise. If x is negative, then it will return NaN.",
            "Inputs":"X\n(heterogeneous) -\nT\n:\nInput tensor",
            "Outputs":"Y\n(heterogeneous) -\nT\n:\nOutput tensor",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n):\nConstrain input and output types to float tensors.\nSqrt - 6 vs 13"
        }
    },
    {
        "name":"Squeeze",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Squeeze.html#l-onnx-doc-squeeze",
        "details":{
            "Summary":"Remove single-dimensional entries from the shape of a tensor.\nTakes an input\naxes\nwith a list of axes to squeeze.\nIf\naxes\nis not provided, all the single dimensions will be removed from\nthe shape. If an axis is selected with shape entry not equal to one, an error is raised.",
            "Inputs":"Between 1 and 2 inputs.\ndata\n(heterogeneous) -\nT\n:\nTensors with at least max(dims) dimensions.\naxes\n(optional, heterogeneous) -\ntensor(int64)\n:\n1D tensor of integers indicating the dimensions to squeeze. Negative value means counting dimensions from the back. Accepted range is [-r, r-1] where r = rank(data).",
            "Outputs":"squeezed\n(heterogeneous) -\nT\n:\nReshaped tensor with same data as input.",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(bool)\n,\ntensor(complex128)\n,\ntensor(complex64)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(float4e2m1)\n,\ntensor(float8e4m3fn)\n,\ntensor(float8e4m3fnuz)\n,\ntensor(float8e5m2)\n,\ntensor(float8e5m2fnuz)\n,\ntensor(float8e8m0)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int4)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(string)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint4)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain input and output types to all tensor types up to IRv12.\nSqueeze - 23 vs 24"
        }
    },
    {
        "name":"StringConcat",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__StringConcat.html#l-onnx-doc-stringconcat",
        "details":{
            "Summary":"StringConcat concatenates string tensors elementwise (with NumPy-style broadcasting support)",
            "Inputs":"X\n(heterogeneous) -\nT\n:\nTensor to prepend in concatenation\nY\n(heterogeneous) -\nT\n:\nTensor to append in concatenation",
            "Outputs":"Z\n(heterogeneous) -\nT\n:\nConcatenated string tensor",
            "Type constraints":"T\nin (\ntensor(string)\n):\nInputs and outputs must be UTF-8 strings"
        }
    },
    {
        "name":"StringNormalizer",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__StringNormalizer.html#l-onnx-doc-stringnormalizer",
        "details":{
            "Summary":"StringNormalization performs string operations for basic cleaning.\nThis operator has only one input (denoted by X) and only one output\n(denoted by Y). This operator first examines the elements in the X,\nand removes elements specified in âstopwordsâ attribute.\nAfter removing stop words, the intermediate result can be further lowercased,\nuppercased, or just returned depending the âcase_change_actionâ attribute.\nThis operator only accepts [C]- and [1, C]-tensor.\nIf all elements in X are dropped, the output will be the empty value of string tensor with shape [1]\nif input shape is [C] and shape [1, 1] if input shape is [1, C].",
            "Attributes":"case_change_action - STRING\n(default is\n'NONE'\n):\nstring enum that cases output to be lowercased\/uppercases\/unchanged. Valid values are âLOWERâ, âUPPERâ, âNONEâ. Default is âNONEâ\nis_case_sensitive - INT\n(default is\n'0'\n):\nBoolean. Whether the identification of stop words in X is case-sensitive. Default is false\nlocale - STRING\n:\nEnvironment dependent string that denotes the locale according to which output strings needs to be upper\/lowercased.Default en_US or platform specific equivalent as decided by the implementation.\nstopwords - STRINGS\n:\nList of stop words. If not set, no word would be removed from X.",
            "Inputs":"X\n(heterogeneous) -\ntensor(string)\n:\nUTF-8 strings to normalize",
            "Outputs":"Y\n(heterogeneous) -\ntensor(string)\n:\nUTF-8 Normalized strings"
        }
    },
    {
        "name":"StringSplit",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__StringSplit.html#l-onnx-doc-stringsplit",
        "details":{
            "Summary":"StringSplit splits a string tensorâs elements into substrings based on a delimiter attribute and a maxsplit attribute.\nThe first output of this operator is a tensor of strings representing the substrings from splitting each input string on the\ndelimiter\nsubstring. This tensor has one additional rank compared to the input tensor in order to store the substrings for each input element (where the input tensor is not empty). Note that, in order to ensure the same number of elements are present in the final dimension, this tensor will pad empty strings as illustrated in the examples below. Consecutive delimiters are not grouped together and are deemed to delimit empty strings, except if the\ndelimiter\nis unspecified or is the empty string (ââ). In the case where the\ndelimiter\nis unspecified or the empty string, consecutive whitespace characters are regarded as a single separator and leading or trailing whitespace is removed in the output.\nThe second output tensor represents the number of substrings generated.\nmaxsplit\ncan be used to limit the number of splits performed - after the\nmaxsplit\nth split if the string is not fully split, the trailing suffix of input string after the final split point is also added. For elements where fewer splits are possible than specified in\nmaxsplit\n, it has no effect.",
            "Attributes":"delimiter - STRING\n:\nDelimiter to split on. If left unset or set to the empty string (ââ), the input is split on consecutive whitespace.\nmaxsplit - INT\n:\nMaximum number of splits (from left to right). If left unset (or if the number of possible splits are less than maxsplit), it will make as many splits as possible. Note that the maximum possible number of substrings returned with\nmaxsplit\nspecified is\nmaxsplit+1\nsince the remaining suffix after the\nmaxsplit\nth split is included in the output.",
            "Inputs":"X\n(heterogeneous) -\nT1\n:\nTensor of strings to split.",
            "Outputs":"Y\n(heterogeneous) -\nT2\n:\nTensor of substrings representing the outcome of splitting the strings in the input on the delimiter. Note that to ensure the same number of elements are present in the final rank, this tensor will pad any necessary empty strings.\nZ\n(heterogeneous) -\nT3\n:\nThe number of substrings generated for each input element.",
            "Type constraints":"T1\nin (\ntensor(string)\n):\nThe input must be a UTF-8 string tensor\nT2\nin (\ntensor(string)\n):\nTensor of substrings.\nT3\nin (\ntensor(int64)\n):\nThe number of substrings generated."
        }
    },
    {
        "name":"Sub",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Sub.html#l-onnx-doc-sub",
        "details":{
            "Summary":"Performs element-wise binary subtraction (with Numpy-style broadcasting support).\nThis operator supports\nmultidirectional (i.e., Numpy-style) broadcasting\n; for more details please check\nBroadcasting in ONNX\n.\n(Opset 14 change): Extend supported types to include uint8, int8, uint16, and int16.",
            "Inputs":"A\n(heterogeneous) -\nT\n:\nFirst operand.\nB\n(heterogeneous) -\nT\n:\nSecond operand.",
            "Outputs":"C\n(heterogeneous) -\nT\n:\nResult, has same element type as two inputs",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain input and output types to all numeric tensors.\nSub - 13 vs 14"
        }
    },
    {
        "name":"Sum",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Sum.html#l-onnx-doc-sum",
        "details":{
            "Summary":"Element-wise sum of each of the input tensors (with Numpy-style broadcasting support).\nAll inputs and outputs must have the same data type.\nThis operator supports\nmultidirectional (i.e., Numpy-style) broadcasting\n; for more details please check\nBroadcasting in ONNX\n.",
            "Inputs":"Between 1 and 2147483647 inputs.\ndata_0\n(variadic, heterogeneous) -\nT\n:\nList of tensors for sum.",
            "Outputs":"sum\n(heterogeneous) -\nT\n:\nOutput tensor.",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n):\nConstrain input and output types to float tensors.\nSum - 8 vs 13"
        }
    },
    {
        "name":"Swish",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Swish.html#l-onnx-doc-swish",
        "details":{
            "Summary":"Swish function takes one input data (Tensor\n) and produces one output data (Tensor\n) of the same shape,\nwhere\n\\(Swish(x) = x * sigmoid(alpha * x)\\)\n.\nFunction Body\nÂ¶\nThe function definition for this operator.\n<\ndomain\n:\n\"\"\n,\nopset_import\n:\n[\n\"\"\n:\n24\n]\n>\nSwish\n<\nalpha\n>\n(\nX\n)\n=>\n(\nY\n)\n{\nAlpha\n=\nConstant\n<\nvalue_float\n:\nfloat\n=\n@alpha\n>\n()\nAlphaCast\n=\nCastLike\n(\nAlpha\n,\nX\n)\nAlphaMulX\n=\nMul\n(\nAlphaCast\n,\nX\n)\nSigmoidAlphaMulX\n=\nSigmoid\n(\nAlphaMulX\n)\nY\n=\nMul\n(\nX\n,\nSigmoidAlphaMulX\n)\n}",
            "Attributes":"alpha - FLOAT\n(default is\n'1.0'\n):\nCoefficient to multiply with input before sigmoid.",
            "Inputs":"X\n(heterogeneous) -\nT\n:\nInput tensor",
            "Outputs":"Y\n(heterogeneous) -\nT\n:\nOutput tensor",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n):\nConstrain input and output types to float tensors."
        }
    },
    {
        "name":"Tan",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Tan.html#l-onnx-doc-tan",
        "details":{
            "Summary":"Calculates the tangent of the given input tensor, element-wise.",
            "Inputs":"input\n(heterogeneous) -\nT\n:\nInput tensor",
            "Outputs":"output\n(heterogeneous) -\nT\n:\nThe tangent of the input tensor computed element-wise",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n):\nConstrain input and output types to float tensors.\nTan - 7 vs 22"
        }
    },
    {
        "name":"Tanh",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Tanh.html#l-onnx-doc-tanh",
        "details":{
            "Summary":"Calculates the hyperbolic tangent of the given input tensor element-wise.",
            "Inputs":"input\n(heterogeneous) -\nT\n:\nInput tensor",
            "Outputs":"output\n(heterogeneous) -\nT\n:\nThe hyperbolic tangent values of the input tensor computed element-wise",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n):\nConstrain input and output types to float tensors.\nTanh - 6 vs 13"
        }
    },
    {
        "name":"TensorScatter",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__TensorScatter.html#l-onnx-doc-tensorscatter",
        "details":{
            "Summary":"TensorScatter is a generic tensor update operation, motivated by the requirements for KV cache updates for Attention\nops commonly found in LLMs. It is a functional operation that models an in-place update to a KV cache buffer.\nThe past and present cache tensors have the same shape (batch_size, D1, D2, â¦, max_sequence_length, â¦, Dn), with\nthe sequence dimension (indicated by the\naxis\nattribute) being max_sequence_length, so the sizes of these tensors do\nnot need to grow between iterations. The\nupdate\ntensorâs shape only differs from the cache tensors in the sequence\ndimension: (batch_size, D1, D2, â¦, sequence_length, â¦, Dn), where sequence_length <= max_sequence_length.\nThe optional\nwrite_indices\ninput indicates the write index for each sample in the batch, assumed to be zero\nif not provided. When the\nmode\nattribute is set to âcircularâ, the write index is modulo max_sequence_length.\nThe operation can be described using the following pseudocode:\nfor\nprefix_idx\nin\nnp\n.\nndindex\n(\npast_cache\n.\nshape\n[:\naxis\n]):\nbatch_idx\n=\nprefix_idx\n[\n0\n]\nfor\nsequence_idx\nin\nrange\n(\nsequence_length\n):\ncache_idx\n=\n(\n*\nprefix_idx\n,\nwrite_indices\n[\nbatch_idx\n]\n+\nsequence_idx\n)\nif\nmode\n==\n\"circular\"\n:\ncache_idx\n=\ntuple\n(\nnp\n.\nmod\n(\nnp\n.\nasarray\n(\ncache_idx\n),\nmax_sequence_length\n))\nupdate_idx\n=\n(\n*\nprefix_idx\n,\nsequence_idx\n)\npresent_cache\n[\ncache_idx\n]\n=\nupdate\n[\nupdate_idx\n]\nDuring the prefill phase of attention, only the first two inputs are needed. During the decode phase,\nwrite_indices\nis also needed so that the incoming key or value update can be appended after the last valid token for each sample\nin the batch.",
            "Attributes":"axis - INT\n(default is\n'-2'\n):\nSequence dimension of the\npast_cache\nand\nupdate\ntensors. It cannot be 0 (the batch dimension). Default is -2.\nmode - STRING\n(default is\n'linear'\n):\nWrite mode of cache update. Supported modes include\nlinear\nand\ncircular\n.\nlinear\nmode requires write_indices+sequence_length<=max_sequence_length. For\ncircular\nmode, the updates happen in wrap-around fashion, ie, the update index is modulo\nmax_sequence_length",
            "Inputs":"Between 2 and 3 inputs.\npast_cache\n(heterogeneous) -\nT\n:\nPast state cache for key or value with shape\n(batch_size,\nD1,\nD2,\n...,\nmax_sequence_length,\n...,\nDn)\n.\nupdate\n(heterogeneous) -\nT\n:\nNew update tensor with shape\n(batch_size,\nD1,\nD2,\n...,\nsequence_length,\n...,\nDn)\n.\nwrite_indices\n(optional, heterogeneous) -\ntensor(int64)\n:\nWrite indices for the incoming update tensor in the cache. Shape is\n(batch_size,)\n. Assumed to be all zeros if not provided.",
            "Outputs":"present_cache\n(heterogeneous) -\nT\n:\nUpdated cache. Same shape as\npast_cache\n.",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(bool)\n,\ntensor(complex128)\n,\ntensor(complex64)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(float4e2m1)\n,\ntensor(float8e4m3fn)\n,\ntensor(float8e4m3fnuz)\n,\ntensor(float8e5m2)\n,\ntensor(float8e5m2fnuz)\n,\ntensor(float8e8m0)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int4)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(string)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint4)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain input and output types to any tensor type."
        }
    },
    {
        "name":"TfIdfVectorizer",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__TfIdfVectorizer.html#l-onnx-doc-tfidfvectorizer",
        "details":{
            "Summary":"This transform extracts n-grams from the input sequence and save them as a vector. Input can\nbe either a 1-D or 2-D tensor. For 1-D input, output is the n-gram representation of that input.\nFor 2-D input, the output is also a  2-D tensor whose i-th row is the n-gram representation of the i-th input row.\nMore specifically, if input shape is [C], the corresponding output shape would be [max(ngram_indexes) + 1].\nIf input shape is [N, C], this operator produces a [N, max(ngram_indexes) + 1]-tensor.\nIn contrast to standard n-gram extraction, here, the indexes of extracting an n-gram from the original\nsequence are not necessarily consecutive numbers. The discontinuity between indexes are controlled by the number of skips.\nIf the number of skips is 2, we should skip two tokens when scanning through the original sequence.\nLetâs consider an example. Assume that input sequence is [94, 17, 36, 12, 28] and the number of skips is 2.\nThe associated 2-grams are [94, 12] and [17, 28] respectively indexed by [0, 3] and [1, 4].\nIf the number of skips becomes 0, the 2-grams generated are [94, 17], [17, 36], [36, 12], [12, 28]\nindexed by [0, 1], [1, 2], [2, 3], [3, 4], respectively.\nThe output vector (denoted by Y) stores the count of each n-gram;\nY[ngram_indexes[i]] indicates the times that the i-th n-gram is found. The attribute ngram_indexes is used to determine the mapping\nbetween index i and the corresponding n-gramâs output coordinate. If pool_int64s is [94, 17, 17, 36], ngram_indexes is [1, 0],\nngram_counts=[0, 0], then the Y[0] (first element in Y) and Y[1] (second element in Y) are the counts of [17, 36] and [94, 17],\nrespectively. An n-gram which cannot be found in pool_strings\/pool_int64s should be ignored and has no effect on the output.\nNote that we may consider all skips up to S when generating the n-grams.\nThe examples used above are true if mode is âTFâ. If mode is âIDFâ, all the counts larger than 1 would be truncated to 1 and\nthe i-th element in weights would be used to scale (by multiplication) the count of the i-th n-gram in pool. If mode is âTFIDFâ,\nthis operator first computes the counts of all n-grams and then scale them by the associated values in the weights attribute.\nOnly one of pool_strings and pool_int64s can be set. If pool_int64s is set, the input should be an integer tensor.\nIf pool_strings is set, the input must be a string tensor.",
            "Attributes":"max_gram_length - INT\n(required) :\nMaximum n-gram length. If this value is 3, 3-grams will be used to generate the output.\nmax_skip_count - INT\n(required) :\nMaximum number of items (integers\/strings) to be skipped when constructing an n-gram from X. If max_skip_count=1, min_gram_length=2, max_gram_length=3, this operator may generate 2-grams with skip_count=0 and skip_count=1, and 3-grams with skip_count=0 and skip_count=1\nmin_gram_length - INT\n(required) :\nMinimum n-gram length. If this value is 2 and max_gram_length is 3, output may contain counts of 2-grams and 3-grams.\nmode - STRING\n(required) :\nThe weighting criteria. It can be one of âTFâ (term frequency), âIDFâ (inverse document frequency), and âTFIDFâ (the combination of TF and IDF)\nngram_counts - INTS\n(required) :\nThe starting indexes of 1-grams, 2-grams, and so on in pool. It is useful when determining the boundary between two consecutive collections of n-grams. For example, if ngram_counts is [0, 17, 36], the first index (zero-based) of 1-gram\/2-gram\/3-gram in pool are 0\/17\/36. This format is essentially identical to CSR (or CSC) sparse matrix format, and we choose to use this due to its popularity.\nngram_indexes - INTS\n(required) :\nlist of int64s (type: AttributeProto::INTS). This list is parallel to the specified âpool_*â attribute. The i-th element in ngram_indexes indicate the coordinate of the i-th n-gram in the output tensor.\npool_int64s - INTS\n:\nList of int64 n-grams learned from the training set. Either this or pool_strings attributes must be present but not both. Itâs an 1-D tensor starting with the collections of all 1-grams and ending with the collections of n-grams. The i-th element in pool stores the n-gram that should be mapped to coordinate ngram_indexes[i] in the output vector.\npool_strings - STRINGS\n:\nList of strings n-grams learned from the training set. Either this or pool_int64s attributes must be present but not both. Itâs an 1-D tensor starting with the collections of all 1-grams and ending with the collections of n-grams. The i-th element in pool stores the n-gram that should be mapped to coordinate ngram_indexes[i] in the output vector.\nweights - FLOATS\n:\nlist of floats. This attribute stores the weight of each n-gram in pool. The i-th element in weights is the weight of the i-th n-gram in pool. Its length equals to the size of ngram_indexes. By default, weights is an all-one tensor.This attribute is used when mode is âIDFâ or âTFIDFâ to scale the associated word counts.",
            "Inputs":"X\n(heterogeneous) -\nT\n:\nInput for n-gram extraction",
            "Outputs":"Y\n(heterogeneous) -\nT1\n:\nNgram results",
            "Type constraints":"T\nin (\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(string)\n):\nInput is ether string UTF-8 or int32\/int64\nT1\nin (\ntensor(float)\n):\n1-D tensor of floats"
        }
    },
    {
        "name":"ThresholdedRelu",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__ThresholdedRelu.html#l-onnx-doc-thresholdedrelu",
        "details":{
            "Summary":"ThresholdedRelu takes one input data (Tensor\n) and produces one output data\n(Tensor\n) where the rectified linear function, y = x for x > alpha, y = 0 otherwise,\nis applied to the tensor elementwise.\nFunction Body\nÂ¶\nThe function definition for this operator.\n<\ndomain\n:\n\"\"\n,\nopset_import\n:\n[\n\"\"\n:\n18\n]\n>\nThresholdedRelu\n<\nalpha\n>\n(\nX\n)\n=>\n(\nY\n)\n{\nAlpha\n=\nConstant\n<\nvalue_float\n:\nfloat\n=\n@alpha\n>\n()\nAlphaCast\n=\nCastLike\n(\nAlpha\n,\nX\n)\nZero\n=\nConstant\n<\nvalue\n:\ntensor\n=\nfloat\n{\n0\n}\n>\n()\nZeroCast\n=\nCastLike\n(\nZero\n,\nX\n)\nAlphaLessThanX\n=\nLess\n(\nAlphaCast\n,\nX\n)\nY\n=\nWhere\n(\nAlphaLessThanX\n,\nX\n,\nZeroCast\n)\n}",
            "Attributes":"alpha - FLOAT\n(default is\n'1.0'\n):\nThreshold value",
            "Inputs":"X\n(heterogeneous) -\nT\n:\nInput tensor",
            "Outputs":"Y\n(heterogeneous) -\nT\n:\nOutput tensor",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n):\nConstrain input and output types to float tensors.\nThresholdedRelu - 10 vs 22"
        }
    },
    {
        "name":"Tile",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Tile.html#l-onnx-doc-tile",
        "details":{
            "Summary":"Constructs a tensor by tiling a given tensor.\nThis is the same as function\ntile\nin Numpy, but no broadcast.\nFor example A = [[1, 2], [3, 4]], B = [1, 2], tile(A, B) = [[1, 2, 1, 2], [3, 4, 3, 4]]",
            "Inputs":"input\n(heterogeneous) -\nT\n:\nInput tensor of any shape.\nrepeats\n(heterogeneous) -\nT1\n:\n1D int64 tensor of the same length as inputâs dimension number, includes numbers of repeated copies along inputâs dimensions.",
            "Outputs":"output\n(heterogeneous) -\nT\n:\nOutput tensor of the same dimensions and type as tensor input. output_dim[i] = input_dim[i] * repeats[i]",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(bool)\n,\ntensor(complex128)\n,\ntensor(complex64)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(string)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain input and output types to all tensor types.\nT1\nin (\ntensor(int64)\n):\nConstrain repeatâs type to int64 tensors.\nTile - 6 vs 13"
        }
    },
    {
        "name":"TopK",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__TopK.html#l-onnx-doc-topk",
        "details":{
            "Summary":"Retrieve the top-K largest or smallest elements along a specified axis. Given an input tensor of\nshape [a_0, a_1, â¦, a_{n-1}] and integer argument k, return two outputs:\nValue tensor of shape [a_0, a_1, â¦, a_{axis-1}, k, a_{axis+1}, â¦ a_{n-1}]\nwhich contains the values of the top k elements along the specified axis\nIndex tensor of shape [a_0, a_1, â¦, a_{axis-1}, k, a_{axis+1}, â¦ a_{n-1}] which\ncontains the indices of the top k elements (original indices from the input\ntensor).\nIf âlargestâ is 1 (the default value) then the k largest elements are returned.\nIf âsortedâ is 1 (the default value) then the resulting k elements will be sorted.\nIf âsortedâ is 0, order of returned âValuesâ and âIndicesâ are undefined.\nGiven two equivalent values, this operator uses the indices along the axis as\na tiebreaker. That is, the element with the lower index will appear first.",
            "Attributes":"axis - INT\n(default is\n'-1'\n):\nDimension on which to do the sort. Negative value means counting dimensions from the back. Accepted range is [-r, r-1] where r = rank(input).\nlargest - INT\n(default is\n'1'\n):\nWhether to return the top-K largest or smallest elements.\nsorted - INT\n(default is\n'1'\n):\nWhether to return the elements in sorted order.",
            "Inputs":"X\n(heterogeneous) -\nT\n:\nTensor of shape [a_0, a_1, â¦, a_{n-1}]\nK\n(heterogeneous) -\ntensor(int64)\n:\nA 1-D tensor containing a single positive value corresponding to the number of top elements to retrieve",
            "Outputs":"Values\n(heterogeneous) -\nT\n:\nTensor of shape [a_0, a_1, â¦, a_{axis-1}, k, a_{axis+1}, â¦ a_{n-1}] containing top K values from the input tensor\nIndices\n(heterogeneous) -\nI\n:\nTensor of shape [a_0, a_1, â¦, a_{axis-1}, k, a_{axis+1}, â¦ a_{n-1}] containing the corresponding input tensor indices for the top K values.",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain input and output types to numeric tensors.\nI\nin (\ntensor(int64)\n):\nConstrain index tensor to int64\nTopK - 11 vs 24"
        }
    },
    {
        "name":"Transpose",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Transpose.html#l-onnx-doc-transpose",
        "details":{
            "Summary":"Transpose the input tensor similar to numpy.transpose. For example, when\nperm=(1, 0, 2), given an input tensor of shape (1, 2, 3), the output shape\nwill be (2, 1, 3).",
            "Attributes":"perm - INTS\n:\nA list of integers. By default, reverse the dimensions, otherwise permute the axes according to the values given. Its length must be equal to the rank of the input.",
            "Inputs":"data\n(heterogeneous) -\nT\n:\nAn input tensor.",
            "Outputs":"transposed\n(heterogeneous) -\nT\n:\nTransposed output.",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(bool)\n,\ntensor(complex128)\n,\ntensor(complex64)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(float4e2m1)\n,\ntensor(float8e4m3fn)\n,\ntensor(float8e4m3fnuz)\n,\ntensor(float8e5m2)\n,\ntensor(float8e5m2fnuz)\n,\ntensor(float8e8m0)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int4)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(string)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint4)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain input and output types to all tensor types.\nTranspose - 23 vs 24"
        }
    },
    {
        "name":"Trilu",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Trilu.html#l-onnx-doc-trilu",
        "details":{
            "Summary":"Given a 2-D matrix or batches of 2-D matrices, returns the upper or lower triangular part of the tensor(s).\nThe attribute âupperâ determines whether the upper or lower part is retained. If set to true,\nthe upper triangular matrix is retained. Lower triangular matrix is retained otherwise.\nDefault value for the âupperâ attribute is true.\nTrilu takes one input tensor of shape [*, N, M], where * is zero or more batch dimensions. The upper triangular part consists\nof the elements on and above the given diagonal (k). The lower triangular part consists of elements on and below the diagonal.\nAll other elements in the matrix are set to zero.\nIf k = 0, the triangular part on and above\/below the main diagonal is retained.\nIf upper is set to true, a positive k retains the upper triangular matrix excluding the main diagonal and (k-1) diagonals above it.\nA negative k value retains the main diagonal and |k| diagonals below it.\nIf upper is set to false, a positive k retains the lower triangular matrix including the main diagonal and k diagonals above it.\nA negative k value excludes the main diagonal and (|k|-1) diagonals below it.",
            "Attributes":"upper - INT\n(default is\n'1'\n):\nBoolean. Indicates whether upper or lower part of matrix is retained. Default is true.",
            "Inputs":"Between 1 and 2 inputs.\ninput\n(heterogeneous) -\nT\n:\nInput tensor of rank 2 or higher.\nk\n(optional, heterogeneous) -\ntensor(int64)\n:\nA 0-D tensor containing a single value corresponding to the number diagonals above or below the main diagonal to exclude or include. Default value is 0 if itâs not specified.",
            "Outputs":"output\n(heterogeneous) -\nT\n:\nOutput tensor of the same type and shape as the input tensor.",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(bool)\n,\ntensor(complex128)\n,\ntensor(complex64)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(string)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain input and output types to all tensor types."
        }
    },
    {
        "name":"Unique",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Unique.html#l-onnx-doc-unique",
        "details":{
            "Summary":"Find the unique elements of a tensor. When an optional attribute âaxisâ is provided, unique subtensors sliced along the âaxisâ are returned.\nOtherwise the input tensor is flattened and unique values of the flattened tensor are returned.\nThis operator returns the unique values or sliced unique subtensors of the input tensor and three optional outputs.\nThe first output tensor âYâ contains all unique values or subtensors of the input.\nThe second optional output tensor âindicesâ contains indices of âYâ elementsâ first occurrence in âXâ.\nThe third optional output tensor âinverse_indicesâ contains, for elements of âXâ, its corresponding indices in âYâ.\nThe fourth optional output tensor âcountsâ contains the count of each element of âYâ in the input.\nOutputs are either sorted in ascending order or optionally in the order of the first occurrence of the values in the input.\nhttps:\/\/docs.scipy.org\/doc\/numpy\/reference\/generated\/numpy.unique.html\nExample 1:\ninput_X\n=\n[\n2\n,\n1\n,\n1\n,\n3\n,\n4\n,\n3\n]\nattribute_sorted\n=\n0\nattribute_axis\n=\nNone\noutput_Y\n=\n[\n2\n,\n1\n,\n3\n,\n4\n]\noutput_indices\n=\n[\n0\n,\n1\n,\n3\n,\n4\n]\noutput_inverse_indices\n=\n[\n0\n,\n1\n,\n1\n,\n2\n,\n3\n,\n2\n]\noutput_counts\n=\n[\n1\n,\n2\n,\n2\n,\n1\n]\nExample 2:\ninput_X\n=\n[[\n1\n,\n3\n],\n[\n2\n,\n3\n]]\nattribute_sorted\n=\n1\nattribute_axis\n=\nNone\noutput_Y\n=\n[\n1\n,\n2\n,\n3\n]\noutput_indices\n=\n[\n0\n,\n2\n,\n1\n]\noutput_inverse_indices\n=\n[\n0\n,\n2\n,\n1\n,\n2\n]\noutput_counts\n=\n[\n1\n,\n1\n,\n2\n]\nExample 3:\ninput_X\n=\n[[\n1\n,\n0\n,\n0\n],\n[\n1\n,\n0\n,\n0\n],\n[\n2\n,\n3\n,\n4\n]]\nattribute_sorted\n=\n1\nattribute_axis\n=\n0\noutput_Y\n=\n[[\n1\n,\n0\n,\n0\n],\n[\n2\n,\n3\n,\n4\n]]\noutput_indices\n=\n[\n0\n,\n2\n]\noutput_inverse_indices\n=\n[\n0\n,\n0\n,\n1\n]\noutput_counts\n=\n[\n2\n,\n1\n]\nExample 4:\ninput_x\n=\n[[[\n1.\n,\n1.\n],\n[\n0.\n,\n1.\n],\n[\n2.\n,\n1.\n],\n[\n0.\n,\n1.\n]],\n[[\n1.\n,\n1.\n],\n[\n0.\n,\n1.\n],\n[\n2.\n,\n1.\n],\n[\n0.\n,\n1.\n]]]\nattribute_sorted\n=\n1\nattribute_axis\n=\n1\nintermediate data are presented below for better understanding:\nthere are 4 subtensors sliced along axis 1 of input_x (shape = (2, 4, 2)):\nA\n:\n[[\n1\n,\n1\n],\n[\n1\n,\n1\n]],\n[[\n0\n,\n1\n],\n[\n0\n,\n1\n]],\n[[\n2\n,\n1\n],\n[\n2\n,\n1\n]],\n[[\n0\n,\n1\n],\n[\n0\n,\n1\n]]\n.\nthere are 3 unique subtensors:\n[[\n1\n,\n1\n],\n[\n1\n,\n1\n]],\n[[\n0\n,\n1\n],\n[\n0\n,\n1\n]],\n[[\n2\n,\n1\n],\n[\n2\n,\n1\n]]\n.\nsorted unique subtensors:\nB\n:\n[[\n0\n,\n1\n],\n[\n0\n,\n1\n]],\n[[\n1\n,\n1\n],\n[\n1\n,\n1\n]],\n[[\n2\n,\n1\n],\n[\n2\n,\n1\n]]\n.\noutput_Y is constructed from B:\n[[[\n0.\n1.\n],\n[\n1.\n1.\n],\n[\n2.\n1.\n]],\n[[\n0.\n1.\n],\n[\n1.\n1.\n],\n[\n2.\n1.\n]]]\noutput_indices is to map from B to A:\n[\n1\n,\n0\n,\n2\n]\noutput_inverse_indices is to map from A to B:\n[\n1\n,\n0\n,\n2\n,\n0\n]\noutput_counts:\n[\n2\n,\n1\n,\n1\n]",
            "Attributes":"axis - INT\n:\n(Optional) The dimension to apply unique. If not specified, the unique elements of the flattened input are returned. Negative value means counting dimensions from the back. Accepted range is [-r, r-1] where r = rank(input).\nsorted - INT\n(default is\n'1'\n):\n(Optional) Whether to sort the unique elements in ascending order before returning as output. Must be one of 0, or 1 (default).",
            "Inputs":"X\n(heterogeneous) -\nT\n:\nA N-D input tensor that is to be processed.",
            "Outputs":"Between 1 and 4 outputs.\nY\n(heterogeneous) -\nT\n:\nA tensor of the same type as âXâ containing all the unique values or subtensors sliced along a provided âaxisâ in âXâ, either sorted or maintained in the same order they occur in input âXâ\nindices\n(optional, heterogeneous) -\ntensor(int64)\n:\nA 1-D INT64 tensor containing indices of âYâ elementsâ first occurrence in âXâ. When âaxisâ is provided, it contains indices to subtensors in input âXâ on the âaxisâ. When âaxisâ is not provided, it contains indices to values in the flattened input tensor.\ninverse_indices\n(optional, heterogeneous) -\ntensor(int64)\n:\nA 1-D INT64 tensor containing, for elements of âXâ, its corresponding indices in âYâ. When âaxisâ is provided, it contains indices to subtensors in output âYâ on the âaxisâ. When âaxisâ is not provided, it contains indices to values in output âYâ.\ncounts\n(optional, heterogeneous) -\ntensor(int64)\n:\nA 1-D INT64 tensor containing the count of each element of âYâ in input âXâ",
            "Type constraints":"T\nin (\ntensor(bool)\n,\ntensor(complex128)\n,\ntensor(complex64)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(string)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nInput can be of any tensor type."
        }
    },
    {
        "name":"Unsqueeze",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Unsqueeze.html#l-onnx-doc-unsqueeze",
        "details":{
            "Summary":"Insert single-dimensional entries to the shape of an input tensor (\ndata\n).\nTakes one required input\naxes\n- which contains a list of dimension indices and this operator will insert a dimension of value\n1\ninto the corresponding index of the output tensor (\nexpanded\n).\nFor example, given an input tensor (\ndata\n) of shape [3, 4, 5], then\nUnsqueeze(data, axes=[0, 4]) outputs a tensor (\nexpanded\n) containing same data as\ndata\nbut with shape [1, 3, 4, 5, 1].\nThe input\naxes\nshould not contain any duplicate entries. It is an error if it contains duplicates.\nThe rank of the output tensor (\noutput_rank\n) is the rank of the input tensor (\ndata\n) plus the number of values in\naxes\n.\nEach value in\naxes\nshould be within the (inclusive) range [-output_rank , output_rank - 1].\nThe order of values in\naxes\ndoes not matter and can come in any order.",
            "Inputs":"data\n(heterogeneous) -\nT\n:\nOriginal tensor\naxes\n(heterogeneous) -\ntensor(int64)\n:\n1D tensor of integers indicating the dimensions to be inserted. Negative value means counting dimensions from the back. Accepted range is [-r, r-1] where r = rank(expanded).",
            "Outputs":"expanded\n(heterogeneous) -\nT\n:\nReshaped tensor with same data as input.",
            "Type constraints":"T\nin (\ntensor(bfloat16)\n,\ntensor(bool)\n,\ntensor(complex128)\n,\ntensor(complex64)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(float4e2m1)\n,\ntensor(float8e4m3fn)\n,\ntensor(float8e4m3fnuz)\n,\ntensor(float8e5m2)\n,\ntensor(float8e5m2fnuz)\n,\ntensor(float8e8m0)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int4)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(string)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint4)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain input and output types to all tensor types up to IRv12.\nUnsqueeze - 23 vs 24"
        }
    },
    {
        "name":"Upsample",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Upsample.html#l-onnx-doc-upsample",
        "details":{
            "Summary":"Upsample the input tensor.\nEach dimension value of the output tensor is:\noutput_dimension = floor(input_dimension * scale).",
            "Attributes":"mode - STRING\n(default is\n'nearest'\n):\nTwo interpolation modes: nearest (default), and linear (including bilinear, trilinear, etc)",
            "Inputs":"X\n(heterogeneous) -\nT\n:\nN-D tensor\nscales\n(heterogeneous) -\ntensor(float)\n:\nThe scale array along each dimension. It takes value greater than or equal to 1. The number of elements of âscalesâ should be the same as the rank of input âXâ.",
            "Outputs":"Y\n(heterogeneous) -\nT\n:\nN-D tensor after resizing",
            "Type constraints":"T\nin (\ntensor(bool)\n,\ntensor(complex128)\n,\ntensor(complex64)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(string)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain input âXâ and output âYâ to all tensor types.\nUpsample - 9 vs 10"
        }
    },
    {
        "name":"Where",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Where.html#l-onnx-doc-where",
        "details":{
            "Summary":"Return elements, either from X or Y, depending on condition.\nWhere behaves like\nnumpy.where\nwith three parameters.\nThis operator supports\nmultidirectional (i.e., Numpy-style) broadcasting\n; for more details please check\nBroadcasting in ONNX\n.",
            "Inputs":"condition\n(heterogeneous) -\nB\n:\nWhen True (nonzero), yield X, otherwise yield Y\nX\n(heterogeneous) -\nT\n:\nvalues selected at indices where condition is True\nY\n(heterogeneous) -\nT\n:\nvalues selected at indices where condition is False",
            "Outputs":"output\n(heterogeneous) -\nT\n:\nTensor of shape equal to the broadcasted shape of condition, X, and Y.",
            "Type constraints":"B\nin (\ntensor(bool)\n):\nConstrain to boolean tensors.\nT\nin (\ntensor(bfloat16)\n,\ntensor(bool)\n,\ntensor(complex128)\n,\ntensor(complex64)\n,\ntensor(double)\n,\ntensor(float)\n,\ntensor(float16)\n,\ntensor(int16)\n,\ntensor(int32)\n,\ntensor(int64)\n,\ntensor(int8)\n,\ntensor(string)\n,\ntensor(uint16)\n,\ntensor(uint32)\n,\ntensor(uint64)\n,\ntensor(uint8)\n):\nConstrain input and output types to all tensor types (including bfloat).\nWhere - 9 vs 16"
        }
    },
    {
        "name":"Xor",
        "url":"https:\/\/onnx.ai\/onnx\/operators\/onnx__Xor.html#l-onnx-doc-xor",
        "details":{
            "Summary":"Returns the tensor resulted from performing the\nxor\nlogical operation\nelementwise on the input tensors\nA\nand\nB\n(with Numpy-style broadcasting support).\nThis operator supports\nmultidirectional (i.e., Numpy-style) broadcasting\n; for more details please check\nBroadcasting in ONNX\n.",
            "Inputs":"A\n(heterogeneous) -\nT\n:\nFirst input operand for the logical operator.\nB\n(heterogeneous) -\nT\n:\nSecond input operand for the logical operator.",
            "Outputs":"C\n(heterogeneous) -\nT1\n:\nResult tensor.",
            "Type constraints":"T\nin (\ntensor(bool)\n):\nConstrain input to boolean tensor.\nT1\nin (\ntensor(bool)\n):\nConstrain output to boolean tensor.\nXor - 1 vs 7"
        }
    }
]